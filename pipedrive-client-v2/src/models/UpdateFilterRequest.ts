/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateFilterRequest
 */
export interface UpdateFilterRequest {
    /**
     * The name of the filter
     * @type {string}
     * @memberof UpdateFilterRequest
     */
    name?: string;
    /**
     * The conditions of the filter as a JSON object. It requires a minimum structure as follows: `{"glue":"and","conditions":[{"glue":"and","conditions": [CONDITION_OBJECTS]},{"glue":"or","conditions":[CONDITION_OBJECTS]}]}`. Replace `CONDITION_OBJECTS` with JSON objects of the following structure: `{"object":"","field_id":"", "operator":"","value":"", "extra_value":""}` or leave the array empty. Depending on the object type you should use another API endpoint to get `field_id`. There are five types of objects you can choose from: `"person"`, `"deal"`, `"organization"`, `"product"`, `"activity"` and you can use these types of operators depending on what type of a field you have: `"IS NOT NULL"`, `"IS NULL"`, `"<="`, `">="`, `"<"`, `">"`, `"!="`, `"="`, `"LIKE '$%'"`, `"LIKE '%$%'"`, `"NOT LIKE '$%'"`. To get a better understanding of how filters work try creating them directly from the Pipedrive application.
     * @type {object}
     * @memberof UpdateFilterRequest
     */
    conditions: object;
}

/**
 * Check if a given object implements the UpdateFilterRequest interface.
 */
export function instanceOfUpdateFilterRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "conditions" in value;

    return isInstance;
}

export function UpdateFilterRequestFromJSON(json: any): UpdateFilterRequest {
    return UpdateFilterRequestFromJSONTyped(json, false);
}

export function UpdateFilterRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateFilterRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'conditions': json['conditions'],
    };
}

export function UpdateFilterRequestToJSON(value?: UpdateFilterRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'conditions': value.conditions,
    };
}

