/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AddRecurringSubscriptionRequest
 */
export interface AddRecurringSubscriptionRequest {
    /**
     * The ID of the deal this recurring subscription is associated with
     * @type {number}
     * @memberof AddRecurringSubscriptionRequest
     */
    deal_id: number;
    /**
     * The currency of the recurring subscription. Accepts a 3-character currency code.
     * @type {string}
     * @memberof AddRecurringSubscriptionRequest
     */
    currency: string;
    /**
     * The description of the recurring subscription
     * @type {string}
     * @memberof AddRecurringSubscriptionRequest
     */
    description?: string;
    /**
     * The interval between payments
     * @type {string}
     * @memberof AddRecurringSubscriptionRequest
     */
    cadence_type: AddRecurringSubscriptionRequestCadenceTypeEnum;
    /**
     * Shows how many payments the subscription has. Note that one field must be set: `cycles_count` or `infinite`. If `cycles_count` is set, then `cycle_amount` and `start_date` are also required.
     * @type {number}
     * @memberof AddRecurringSubscriptionRequest
     */
    cycles_count?: number;
    /**
     * The amount of each payment
     * @type {number}
     * @memberof AddRecurringSubscriptionRequest
     */
    cycle_amount: number;
    /**
     * The start date of the recurring subscription. Format: YYYY-MM-DD
     * @type {Date}
     * @memberof AddRecurringSubscriptionRequest
     */
    start_date: Date;
    /**
     * This indicates that the recurring subscription will last until it's manually canceled or deleted. Note that only one field must be set: `cycles_count` or `infinite`.
     * @type {boolean}
     * @memberof AddRecurringSubscriptionRequest
     */
    infinite?: boolean;
    /**
     * Array of additional payments. It requires a minimum structure as follows: [{ amount:SUM, description:DESCRIPTION, due_at:PAYMENT_DATE }]. Replace SUM with a payment amount, DESCRIPTION with an explanation string, PAYMENT_DATE with a date (format YYYY-MM-DD).
     * @type {Array<object>}
     * @memberof AddRecurringSubscriptionRequest
     */
    payments?: Array<object>;
    /**
     * Indicates that the deal value must be set to recurring subscription's MRR value
     * @type {boolean}
     * @memberof AddRecurringSubscriptionRequest
     */
    update_deal_value?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum AddRecurringSubscriptionRequestCadenceTypeEnum {
    Weekly = 'weekly',
    Monthly = 'monthly',
    Quarterly = 'quarterly',
    Yearly = 'yearly'
}


/**
 * Check if a given object implements the AddRecurringSubscriptionRequest interface.
 */
export function instanceOfAddRecurringSubscriptionRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "deal_id" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "cadence_type" in value;
    isInstance = isInstance && "cycle_amount" in value;
    isInstance = isInstance && "start_date" in value;

    return isInstance;
}

export function AddRecurringSubscriptionRequestFromJSON(json: any): AddRecurringSubscriptionRequest {
    return AddRecurringSubscriptionRequestFromJSONTyped(json, false);
}

export function AddRecurringSubscriptionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddRecurringSubscriptionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'deal_id': json['deal_id'],
        'currency': json['currency'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'cadence_type': json['cadence_type'],
        'cycles_count': !exists(json, 'cycles_count') ? undefined : json['cycles_count'],
        'cycle_amount': json['cycle_amount'],
        'start_date': (new Date(json['start_date'])),
        'infinite': !exists(json, 'infinite') ? undefined : json['infinite'],
        'payments': !exists(json, 'payments') ? undefined : json['payments'],
        'update_deal_value': !exists(json, 'update_deal_value') ? undefined : json['update_deal_value'],
    };
}

export function AddRecurringSubscriptionRequestToJSON(value?: AddRecurringSubscriptionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'deal_id': value.deal_id,
        'currency': value.currency,
        'description': value.description,
        'cadence_type': value.cadence_type,
        'cycles_count': value.cycles_count,
        'cycle_amount': value.cycle_amount,
        'start_date': (value.start_date.toISOString().substr(0,10)),
        'infinite': value.infinite,
        'payments': value.payments,
        'update_deal_value': value.update_deal_value,
    };
}

