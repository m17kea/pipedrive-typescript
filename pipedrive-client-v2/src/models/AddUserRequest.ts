/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AddUserRequestAccessInner } from './AddUserRequestAccessInner';
import {
    AddUserRequestAccessInnerFromJSON,
    AddUserRequestAccessInnerFromJSONTyped,
    AddUserRequestAccessInnerToJSON,
} from './AddUserRequestAccessInner';

/**
 * 
 * @export
 * @interface AddUserRequest
 */
export interface AddUserRequest {
    /**
     * The email of the user
     * @type {string}
     * @memberof AddUserRequest
     */
    email: string;
    /**
     * The name of the user
     * @type {string}
     * @memberof AddUserRequest
     */
    name?: string;
    /**
     * The access given to the user. Each item in the array represents access to a specific app. Optionally may include either admin flag or permission set ID to specify which access to give within the app. If both are omitted, the default access for the corresponding app will be used. It requires structure as follows: `[{ app: 'sales', permission_set_id: '62cc4d7f-4038-4352-abf3-a8c1c822b631' }, { app: 'global', admin: true }, { app: 'account_settings' }]`
     * @type {Array<AddUserRequestAccessInner>}
     * @memberof AddUserRequest
     */
    access?: Array<AddUserRequestAccessInner>;
    /**
     * Whether the user is active or not. `false` = Not activated, `true` = Activated
     * @type {boolean}
     * @memberof AddUserRequest
     */
    active_flag?: boolean;
}

/**
 * Check if a given object implements the AddUserRequest interface.
 */
export function instanceOfAddUserRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "email" in value;

    return isInstance;
}

export function AddUserRequestFromJSON(json: any): AddUserRequest {
    return AddUserRequestFromJSONTyped(json, false);
}

export function AddUserRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddUserRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'email': json['email'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'access': !exists(json, 'access') ? undefined : ((json['access'] as Array<any>).map(AddUserRequestAccessInnerFromJSON)),
        'active_flag': !exists(json, 'active_flag') ? undefined : json['active_flag'],
    };
}

export function AddUserRequestToJSON(value?: AddUserRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'email': value.email,
        'name': value.name,
        'access': value.access === undefined ? undefined : ((value.access as Array<any>).map(AddUserRequestAccessInnerToJSON)),
        'active_flag': value.active_flag,
    };
}

