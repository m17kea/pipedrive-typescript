/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SubscriptionsIdResponse200AllOfData
 */
export interface SubscriptionsIdResponse200AllOfData {
    /**
     * The ID of the subscription
     * @type {number}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    id?: number;
    /**
     * The ID of the user who created the subscription
     * @type {number}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    user_id?: number;
    /**
     * The ID of the deal this subscription is associated with
     * @type {number}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    deal_id?: number;
    /**
     * The description of the recurring subscription
     * @type {string}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    description?: string;
    /**
     * The subscription status
     * @type {boolean}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    is_active?: boolean;
    /**
     * Shows how many payments a recurring subscription has
     * @type {number}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    cycles_count?: number;
    /**
     * The amount of each payment
     * @type {number}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    cycle_amount?: number;
    /**
     * Indicates that the recurring subscription will last until it is manually canceled or deleted
     * @type {boolean}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    infinite?: boolean;
    /**
     * The currency of the subscription
     * @type {string}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    currency?: string;
    /**
     * The interval between payments
     * @type {string}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    cadence_type?: string;
    /**
     * The start date of the recurring subscription
     * @type {Date}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    start_date?: Date;
    /**
     * The end date of the subscription
     * @type {Date}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    end_date?: Date;
    /**
     * The total value of all payments
     * @type {number}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    lifetime_value?: number;
    /**
     * The final status of the subscription
     * @type {string}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    final_status?: string | null;
    /**
     * The creation time of the subscription
     * @type {string}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    add_time?: string;
    /**
     * The update time of the subscription
     * @type {string}
     * @memberof SubscriptionsIdResponse200AllOfData
     */
    update_time?: string;
}

/**
 * Check if a given object implements the SubscriptionsIdResponse200AllOfData interface.
 */
export function instanceOfSubscriptionsIdResponse200AllOfData(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SubscriptionsIdResponse200AllOfDataFromJSON(json: any): SubscriptionsIdResponse200AllOfData {
    return SubscriptionsIdResponse200AllOfDataFromJSONTyped(json, false);
}

export function SubscriptionsIdResponse200AllOfDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubscriptionsIdResponse200AllOfData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'user_id': !exists(json, 'user_id') ? undefined : json['user_id'],
        'deal_id': !exists(json, 'deal_id') ? undefined : json['deal_id'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'is_active': !exists(json, 'is_active') ? undefined : json['is_active'],
        'cycles_count': !exists(json, 'cycles_count') ? undefined : json['cycles_count'],
        'cycle_amount': !exists(json, 'cycle_amount') ? undefined : json['cycle_amount'],
        'infinite': !exists(json, 'infinite') ? undefined : json['infinite'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'cadence_type': !exists(json, 'cadence_type') ? undefined : json['cadence_type'],
        'start_date': !exists(json, 'start_date') ? undefined : (new Date(json['start_date'])),
        'end_date': !exists(json, 'end_date') ? undefined : (new Date(json['end_date'])),
        'lifetime_value': !exists(json, 'lifetime_value') ? undefined : json['lifetime_value'],
        'final_status': !exists(json, 'final_status') ? undefined : json['final_status'],
        'add_time': !exists(json, 'add_time') ? undefined : json['add_time'],
        'update_time': !exists(json, 'update_time') ? undefined : json['update_time'],
    };
}

export function SubscriptionsIdResponse200AllOfDataToJSON(value?: SubscriptionsIdResponse200AllOfData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'user_id': value.user_id,
        'deal_id': value.deal_id,
        'description': value.description,
        'is_active': value.is_active,
        'cycles_count': value.cycles_count,
        'cycle_amount': value.cycle_amount,
        'infinite': value.infinite,
        'currency': value.currency,
        'cadence_type': value.cadence_type,
        'start_date': value.start_date === undefined ? undefined : (value.start_date.toISOString().substr(0,10)),
        'end_date': value.end_date === undefined ? undefined : (value.end_date.toISOString().substr(0,10)),
        'lifetime_value': value.lifetime_value,
        'final_status': value.final_status,
        'add_time': value.add_time,
        'update_time': value.update_time,
    };
}

