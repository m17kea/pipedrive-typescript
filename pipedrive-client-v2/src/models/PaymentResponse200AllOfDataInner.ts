/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PaymentResponse200AllOfDataInner
 */
export interface PaymentResponse200AllOfDataInner {
    /**
     * The ID of the payment
     * @type {number}
     * @memberof PaymentResponse200AllOfDataInner
     */
    id?: number;
    /**
     * The ID of the subscription this payment is associated with
     * @type {number}
     * @memberof PaymentResponse200AllOfDataInner
     */
    subscription_id?: number;
    /**
     * The ID of the deal this payment is associated with
     * @type {number}
     * @memberof PaymentResponse200AllOfDataInner
     */
    deal_id?: number;
    /**
     * The payment status
     * @type {boolean}
     * @memberof PaymentResponse200AllOfDataInner
     */
    is_active?: boolean;
    /**
     * The payment amount
     * @type {number}
     * @memberof PaymentResponse200AllOfDataInner
     */
    amount?: number;
    /**
     * The currency of the payment
     * @type {string}
     * @memberof PaymentResponse200AllOfDataInner
     */
    currency?: string;
    /**
     * The difference between the amount of the current payment and the previous payment. The value can be either positive or negative.
     * @type {number}
     * @memberof PaymentResponse200AllOfDataInner
     */
    change_amount?: number;
    /**
     * The date when payment occurs
     * @type {Date}
     * @memberof PaymentResponse200AllOfDataInner
     */
    due_at?: Date;
    /**
     * Represents the movement of revenue in comparison with the previous payment. Possible values are: `New` - first payment of the subscription. `Recurring` - no movement. `Expansion` - current payment amount > previous payment amount. `Contraction` - current payment amount < previous payment amount. `Churn` - last payment of the subscription.
     * @type {string}
     * @memberof PaymentResponse200AllOfDataInner
     */
    revenue_movement_type?: PaymentResponse200AllOfDataInnerRevenueMovementTypeEnum;
    /**
     * The type of the payment. Possible values are: `Recurring` - payments occur over fixed intervals of time, `Additional` - extra payment not the recurring payment of the recurring subscription, `Installment` - payment of the installment subscription.
     * @type {string}
     * @memberof PaymentResponse200AllOfDataInner
     */
    payment_type?: PaymentResponse200AllOfDataInnerPaymentTypeEnum;
    /**
     * The description of the payment
     * @type {string}
     * @memberof PaymentResponse200AllOfDataInner
     */
    description?: string;
    /**
     * The creation time of the payment
     * @type {string}
     * @memberof PaymentResponse200AllOfDataInner
     */
    add_time?: string;
    /**
     * The update time of the payment
     * @type {string}
     * @memberof PaymentResponse200AllOfDataInner
     */
    update_time?: string;
}

/**
* @export
* @enum {string}
*/
export enum PaymentResponse200AllOfDataInnerRevenueMovementTypeEnum {
    New = 'new',
    Recurring = 'recurring',
    Expansion = 'expansion',
    Contraction = 'contraction',
    None = 'none',
    Churn = 'churn'
}
/**
* @export
* @enum {string}
*/
export enum PaymentResponse200AllOfDataInnerPaymentTypeEnum {
    Recurring = 'recurring',
    Additional = 'additional',
    Installment = 'installment'
}


/**
 * Check if a given object implements the PaymentResponse200AllOfDataInner interface.
 */
export function instanceOfPaymentResponse200AllOfDataInner(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PaymentResponse200AllOfDataInnerFromJSON(json: any): PaymentResponse200AllOfDataInner {
    return PaymentResponse200AllOfDataInnerFromJSONTyped(json, false);
}

export function PaymentResponse200AllOfDataInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentResponse200AllOfDataInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'subscription_id': !exists(json, 'subscription_id') ? undefined : json['subscription_id'],
        'deal_id': !exists(json, 'deal_id') ? undefined : json['deal_id'],
        'is_active': !exists(json, 'is_active') ? undefined : json['is_active'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'change_amount': !exists(json, 'change_amount') ? undefined : json['change_amount'],
        'due_at': !exists(json, 'due_at') ? undefined : (new Date(json['due_at'])),
        'revenue_movement_type': !exists(json, 'revenue_movement_type') ? undefined : json['revenue_movement_type'],
        'payment_type': !exists(json, 'payment_type') ? undefined : json['payment_type'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'add_time': !exists(json, 'add_time') ? undefined : json['add_time'],
        'update_time': !exists(json, 'update_time') ? undefined : json['update_time'],
    };
}

export function PaymentResponse200AllOfDataInnerToJSON(value?: PaymentResponse200AllOfDataInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'subscription_id': value.subscription_id,
        'deal_id': value.deal_id,
        'is_active': value.is_active,
        'amount': value.amount,
        'currency': value.currency,
        'change_amount': value.change_amount,
        'due_at': value.due_at === undefined ? undefined : (value.due_at.toISOString().substr(0,10)),
        'revenue_movement_type': value.revenue_movement_type,
        'payment_type': value.payment_type,
        'description': value.description,
        'add_time': value.add_time,
        'update_time': value.update_time,
    };
}

