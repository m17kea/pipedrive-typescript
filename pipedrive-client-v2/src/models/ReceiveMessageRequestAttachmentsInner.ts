/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ReceiveMessageRequestAttachmentsInner
 */
export interface ReceiveMessageRequestAttachmentsInner {
    /**
     * The ID of the attachment
     * @type {string}
     * @memberof ReceiveMessageRequestAttachmentsInner
     */
    id: string;
    /**
     * The mime-type of the attachment
     * @type {string}
     * @memberof ReceiveMessageRequestAttachmentsInner
     */
    type: string;
    /**
     * The name of the attachment
     * @type {string}
     * @memberof ReceiveMessageRequestAttachmentsInner
     */
    name?: string;
    /**
     * The size of the attachment
     * @type {number}
     * @memberof ReceiveMessageRequestAttachmentsInner
     */
    size?: number;
    /**
     * A URL to the file
     * @type {string}
     * @memberof ReceiveMessageRequestAttachmentsInner
     */
    url: string;
    /**
     * A URL to a preview picture of the file
     * @type {string}
     * @memberof ReceiveMessageRequestAttachmentsInner
     */
    preview_url?: string;
    /**
     * If true, it will use the getMessageById endpoint for fetching updated attachment's urls. Find out more [here](https://pipedrive.readme.io/docs/implementing-messaging-app-extension)
     * @type {boolean}
     * @memberof ReceiveMessageRequestAttachmentsInner
     */
    link_expires?: boolean;
}

/**
 * Check if a given object implements the ReceiveMessageRequestAttachmentsInner interface.
 */
export function instanceOfReceiveMessageRequestAttachmentsInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "url" in value;

    return isInstance;
}

export function ReceiveMessageRequestAttachmentsInnerFromJSON(json: any): ReceiveMessageRequestAttachmentsInner {
    return ReceiveMessageRequestAttachmentsInnerFromJSONTyped(json, false);
}

export function ReceiveMessageRequestAttachmentsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReceiveMessageRequestAttachmentsInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'size': !exists(json, 'size') ? undefined : json['size'],
        'url': json['url'],
        'preview_url': !exists(json, 'preview_url') ? undefined : json['preview_url'],
        'link_expires': !exists(json, 'link_expires') ? undefined : json['link_expires'],
    };
}

export function ReceiveMessageRequestAttachmentsInnerToJSON(value?: ReceiveMessageRequestAttachmentsInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'name': value.name,
        'size': value.size,
        'url': value.url,
        'preview_url': value.preview_url,
        'link_expires': value.link_expires,
    };
}

