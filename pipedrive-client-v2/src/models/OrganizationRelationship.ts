/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrganizationRelationship
 */
export interface OrganizationRelationship {
    /**
     * The ID of the base organization for the returned calculated values
     * @type {number}
     * @memberof OrganizationRelationship
     */
    org_id?: number;
    /**
     * The type of organization relationship
     * @type {string}
     * @memberof OrganizationRelationship
     */
    type?: OrganizationRelationshipTypeEnum;
    /**
     * The owner of this relationship. If type is `parent`, then the owner is the parent and the linked organization is the daughter.
     * @type {number}
     * @memberof OrganizationRelationship
     */
    rel_owner_org_id?: number;
    /**
     * The linked organization in this relationship. If type is `parent`, then the linked organization is the daughter.
     * @type {number}
     * @memberof OrganizationRelationship
     */
    rel_linked_org_id?: number;
}

/**
* @export
* @enum {string}
*/
export enum OrganizationRelationshipTypeEnum {
    Parent = 'parent',
    Related = 'related'
}


/**
 * Check if a given object implements the OrganizationRelationship interface.
 */
export function instanceOfOrganizationRelationship(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrganizationRelationshipFromJSON(json: any): OrganizationRelationship {
    return OrganizationRelationshipFromJSONTyped(json, false);
}

export function OrganizationRelationshipFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationRelationship {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'org_id': !exists(json, 'org_id') ? undefined : json['org_id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'rel_owner_org_id': !exists(json, 'rel_owner_org_id') ? undefined : json['rel_owner_org_id'],
        'rel_linked_org_id': !exists(json, 'rel_linked_org_id') ? undefined : json['rel_linked_org_id'],
    };
}

export function OrganizationRelationshipToJSON(value?: OrganizationRelationship | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'org_id': value.org_id,
        'type': value.type,
        'rel_owner_org_id': value.rel_owner_org_id,
        'rel_linked_org_id': value.rel_linked_org_id,
    };
}

