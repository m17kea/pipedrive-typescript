/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReceiveMessageRequestAttachmentsInner } from './ReceiveMessageRequestAttachmentsInner';
import {
    ReceiveMessageRequestAttachmentsInnerFromJSON,
    ReceiveMessageRequestAttachmentsInnerFromJSONTyped,
    ReceiveMessageRequestAttachmentsInnerToJSON,
} from './ReceiveMessageRequestAttachmentsInner';

/**
 * 
 * @export
 * @interface ReceiveMessageRequest
 */
export interface ReceiveMessageRequest {
    /**
     * The ID of the message
     * @type {string}
     * @memberof ReceiveMessageRequest
     */
    id: string;
    /**
     * The channel ID as in the provider
     * @type {string}
     * @memberof ReceiveMessageRequest
     */
    channel_id: string;
    /**
     * The ID of the provider's user that sent the message
     * @type {string}
     * @memberof ReceiveMessageRequest
     */
    sender_id: string;
    /**
     * The ID of the conversation
     * @type {string}
     * @memberof ReceiveMessageRequest
     */
    conversation_id: string;
    /**
     * The body of the message
     * @type {string}
     * @memberof ReceiveMessageRequest
     */
    message: string;
    /**
     * The status of the message
     * @type {string}
     * @memberof ReceiveMessageRequest
     */
    status: ReceiveMessageRequestStatusEnum;
    /**
     * The date and time when the message was created in the provider, in UTC. Format: YYYY-MM-DD HH:MM
     * @type {Date}
     * @memberof ReceiveMessageRequest
     */
    created_at: Date;
    /**
     * The date and time when the message can no longer receive a reply, in UTC. Format: YYYY-MM-DD HH:MM
     * @type {Date}
     * @memberof ReceiveMessageRequest
     */
    reply_by?: Date;
    /**
     * A URL that can open the conversation in the provider's side
     * @type {string}
     * @memberof ReceiveMessageRequest
     */
    conversation_link?: string;
    /**
     * The list of attachments available in the message
     * @type {Array<ReceiveMessageRequestAttachmentsInner>}
     * @memberof ReceiveMessageRequest
     */
    attachments?: Array<ReceiveMessageRequestAttachmentsInner>;
}

/**
* @export
* @enum {string}
*/
export enum ReceiveMessageRequestStatusEnum {
    Sent = 'sent',
    Delivered = 'delivered',
    Read = 'read',
    Failed = 'failed'
}


/**
 * Check if a given object implements the ReceiveMessageRequest interface.
 */
export function instanceOfReceiveMessageRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "channel_id" in value;
    isInstance = isInstance && "sender_id" in value;
    isInstance = isInstance && "conversation_id" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "created_at" in value;

    return isInstance;
}

export function ReceiveMessageRequestFromJSON(json: any): ReceiveMessageRequest {
    return ReceiveMessageRequestFromJSONTyped(json, false);
}

export function ReceiveMessageRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReceiveMessageRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'channel_id': json['channel_id'],
        'sender_id': json['sender_id'],
        'conversation_id': json['conversation_id'],
        'message': json['message'],
        'status': json['status'],
        'created_at': (new Date(json['created_at'])),
        'reply_by': !exists(json, 'reply_by') ? undefined : (new Date(json['reply_by'])),
        'conversation_link': !exists(json, 'conversation_link') ? undefined : json['conversation_link'],
        'attachments': !exists(json, 'attachments') ? undefined : ((json['attachments'] as Array<any>).map(ReceiveMessageRequestAttachmentsInnerFromJSON)),
    };
}

export function ReceiveMessageRequestToJSON(value?: ReceiveMessageRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'channel_id': value.channel_id,
        'sender_id': value.sender_id,
        'conversation_id': value.conversation_id,
        'message': value.message,
        'status': value.status,
        'created_at': (value.created_at.toISOString()),
        'reply_by': value.reply_by === undefined ? undefined : (value.reply_by.toISOString()),
        'conversation_link': value.conversation_link,
        'attachments': value.attachments === undefined ? undefined : ((value.attachments as Array<any>).map(ReceiveMessageRequestAttachmentsInnerToJSON)),
    };
}

