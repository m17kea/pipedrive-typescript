/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProductField
 */
export interface ProductField {
    /**
     * The name of the field
     * @type {string}
     * @memberof ProductField
     */
    name: string;
    /**
     * When `field_type` is either `set` or `enum`, possible options must be supplied as a JSON-encoded sequential array, for example:</br>`[{"label":"red"}, {"label":"blue"}, {"label":"lilac"}]`
     * @type {Array<object>}
     * @memberof ProductField
     */
    options?: Array<object>;
    /**
     * The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td><tr><td>`text`</td><td>Long text (up to 65k characters)</td><tr><td>`double`</td><td>Numeric value</td><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td><tr><td>`enum`</td><td>Options field with a single possible chosen option</td><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td><tr><td>`people`</td><td>Person field (contains a product ID which is stored on the same account)</td><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td><tr><td>`address`</td><td>Address field (autocompleted by Google Maps)</dd></table>
     * @type {string}
     * @memberof ProductField
     */
    field_type: ProductFieldFieldTypeEnum;
    /**
     * The ID of the product field
     * @type {number}
     * @memberof ProductField
     */
    id?: number;
    /**
     * The key of the product field
     * @type {string}
     * @memberof ProductField
     */
    key?: string;
    /**
     * The position (index) of the product field in the detail view
     * @type {number}
     * @memberof ProductField
     */
    order_nr?: number;
    /**
     * The product field creation time. Format: YYYY-MM-DD HH:MM:SS
     * @type {string}
     * @memberof ProductField
     */
    add_time?: string;
    /**
     * The product field last update time. Format: YYYY-MM-DD HH:MM:SS
     * @type {string}
     * @memberof ProductField
     */
    update_time?: string;
    /**
     * The ID of the last user to update the product field
     * @type {number}
     * @memberof ProductField
     */
    last_updated_by_user_id?: number;
    /**
     * Whether or not the product field is currently active
     * @type {boolean}
     * @memberof ProductField
     */
    active_flag?: boolean;
    /**
     * Whether or not the product field name and metadata is editable
     * @type {boolean}
     * @memberof ProductField
     */
    edit_flag?: boolean;
    /**
     * Whether or not the product field is visible in the Add Product Modal
     * @type {boolean}
     * @memberof ProductField
     */
    add_visible_flag?: boolean;
    /**
     * Whether or not the product field is marked as important
     * @type {boolean}
     * @memberof ProductField
     */
    important_flag?: boolean;
    /**
     * Whether or not the product field data can be edited
     * @type {boolean}
     * @memberof ProductField
     */
    bulk_edit_allowed?: boolean;
    /**
     * Whether or not the product field is searchable
     * @type {boolean}
     * @memberof ProductField
     */
    searchable_flag?: boolean;
    /**
     * Whether or not the product field value can be used when filtering searches
     * @type {boolean}
     * @memberof ProductField
     */
    filtering_allowed?: boolean;
    /**
     * Whether or not the product field is sortable
     * @type {boolean}
     * @memberof ProductField
     */
    sortable_flag?: boolean;
    /**
     * Whether or not the product field is mandatory when creating products
     * @type {boolean}
     * @memberof ProductField
     */
    mandatory_flag?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum ProductFieldFieldTypeEnum {
    Varchar = 'varchar',
    VarcharAuto = 'varchar_auto',
    Text = 'text',
    Double = 'double',
    Monetary = 'monetary',
    Date = 'date',
    Set = 'set',
    Enum = 'enum',
    User = 'user',
    Org = 'org',
    People = 'people',
    Phone = 'phone',
    Time = 'time',
    Timerange = 'timerange',
    Daterange = 'daterange',
    Address = 'address'
}


/**
 * Check if a given object implements the ProductField interface.
 */
export function instanceOfProductField(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "field_type" in value;

    return isInstance;
}

export function ProductFieldFromJSON(json: any): ProductField {
    return ProductFieldFromJSONTyped(json, false);
}

export function ProductFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductField {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'options': !exists(json, 'options') ? undefined : json['options'],
        'field_type': json['field_type'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'key': !exists(json, 'key') ? undefined : json['key'],
        'order_nr': !exists(json, 'order_nr') ? undefined : json['order_nr'],
        'add_time': !exists(json, 'add_time') ? undefined : json['add_time'],
        'update_time': !exists(json, 'update_time') ? undefined : json['update_time'],
        'last_updated_by_user_id': !exists(json, 'last_updated_by_user_id') ? undefined : json['last_updated_by_user_id'],
        'active_flag': !exists(json, 'active_flag') ? undefined : json['active_flag'],
        'edit_flag': !exists(json, 'edit_flag') ? undefined : json['edit_flag'],
        'add_visible_flag': !exists(json, 'add_visible_flag') ? undefined : json['add_visible_flag'],
        'important_flag': !exists(json, 'important_flag') ? undefined : json['important_flag'],
        'bulk_edit_allowed': !exists(json, 'bulk_edit_allowed') ? undefined : json['bulk_edit_allowed'],
        'searchable_flag': !exists(json, 'searchable_flag') ? undefined : json['searchable_flag'],
        'filtering_allowed': !exists(json, 'filtering_allowed') ? undefined : json['filtering_allowed'],
        'sortable_flag': !exists(json, 'sortable_flag') ? undefined : json['sortable_flag'],
        'mandatory_flag': !exists(json, 'mandatory_flag') ? undefined : json['mandatory_flag'],
    };
}

export function ProductFieldToJSON(value?: ProductField | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'options': value.options,
        'field_type': value.field_type,
        'id': value.id,
        'key': value.key,
        'order_nr': value.order_nr,
        'add_time': value.add_time,
        'update_time': value.update_time,
        'last_updated_by_user_id': value.last_updated_by_user_id,
        'active_flag': value.active_flag,
        'edit_flag': value.edit_flag,
        'add_visible_flag': value.add_visible_flag,
        'important_flag': value.important_flag,
        'bulk_edit_allowed': value.bulk_edit_allowed,
        'searchable_flag': value.searchable_flag,
        'filtering_allowed': value.filtering_allowed,
        'sortable_flag': value.sortable_flag,
        'mandatory_flag': value.mandatory_flag,
    };
}

