/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PersonItemAllOfEmailInner } from './PersonItemAllOfEmailInner';
import {
    PersonItemAllOfEmailInnerFromJSON,
    PersonItemAllOfEmailInnerFromJSONTyped,
    PersonItemAllOfEmailInnerToJSON,
} from './PersonItemAllOfEmailInner';
import type { PersonItemAllOfPhoneInner } from './PersonItemAllOfPhoneInner';
import {
    PersonItemAllOfPhoneInnerFromJSON,
    PersonItemAllOfPhoneInnerFromJSONTyped,
    PersonItemAllOfPhoneInnerToJSON,
} from './PersonItemAllOfPhoneInner';
import type { PersonItemAllOfPictureId } from './PersonItemAllOfPictureId';
import {
    PersonItemAllOfPictureIdFromJSON,
    PersonItemAllOfPictureIdFromJSONTyped,
    PersonItemAllOfPictureIdToJSON,
} from './PersonItemAllOfPictureId';

/**
 * 
 * @export
 * @interface PersonItemAllOf
 */
export interface PersonItemAllOf {
    /**
     * The ID of the person
     * @type {number}
     * @memberof PersonItemAllOf
     */
    id?: number;
    /**
     * The ID of the company related to the person
     * @type {number}
     * @memberof PersonItemAllOf
     */
    company_id?: number;
    /**
     * Whether the person is active or not
     * @type {boolean}
     * @memberof PersonItemAllOf
     */
    active_flag?: boolean;
    /**
     * List of phone data related to the person
     * @type {Array<PersonItemAllOfPhoneInner>}
     * @memberof PersonItemAllOf
     */
    phone?: Array<PersonItemAllOfPhoneInner>;
    /**
     * List of email data related to the person
     * @type {Array<PersonItemAllOfEmailInner>}
     * @memberof PersonItemAllOf
     */
    email?: Array<PersonItemAllOfEmailInner>;
    /**
     * The primary email of the person
     * @type {string}
     * @memberof PersonItemAllOf
     */
    primary_email?: string;
    /**
     * The first letter of the name of the person
     * @type {string}
     * @memberof PersonItemAllOf
     */
    first_char?: string;
    /**
     * The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS
     * @type {string}
     * @memberof PersonItemAllOf
     */
    add_time?: string;
    /**
     * The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS
     * @type {string}
     * @memberof PersonItemAllOf
     */
    update_time?: string;
    /**
     * The visibility group ID of who can see the person
     * @type {string}
     * @memberof PersonItemAllOf
     */
    visible_to?: string;
    /**
     * 
     * @type {PersonItemAllOfPictureId}
     * @memberof PersonItemAllOf
     */
    picture_id?: PersonItemAllOfPictureId;
    /**
     * The label assigned to the person
     * @type {number}
     * @memberof PersonItemAllOf
     */
    label?: number;
    /**
     * The name of the organization associated with the person
     * @type {string}
     * @memberof PersonItemAllOf
     */
    org_name?: string;
    /**
     * The name of the owner associated with the person
     * @type {string}
     * @memberof PersonItemAllOf
     */
    owner_name?: string;
    /**
     * The BCC email associated with the person
     * @type {string}
     * @memberof PersonItemAllOf
     */
    cc_email?: string;
}

/**
 * Check if a given object implements the PersonItemAllOf interface.
 */
export function instanceOfPersonItemAllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PersonItemAllOfFromJSON(json: any): PersonItemAllOf {
    return PersonItemAllOfFromJSONTyped(json, false);
}

export function PersonItemAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): PersonItemAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'company_id': !exists(json, 'company_id') ? undefined : json['company_id'],
        'active_flag': !exists(json, 'active_flag') ? undefined : json['active_flag'],
        'phone': !exists(json, 'phone') ? undefined : ((json['phone'] as Array<any>).map(PersonItemAllOfPhoneInnerFromJSON)),
        'email': !exists(json, 'email') ? undefined : ((json['email'] as Array<any>).map(PersonItemAllOfEmailInnerFromJSON)),
        'primary_email': !exists(json, 'primary_email') ? undefined : json['primary_email'],
        'first_char': !exists(json, 'first_char') ? undefined : json['first_char'],
        'add_time': !exists(json, 'add_time') ? undefined : json['add_time'],
        'update_time': !exists(json, 'update_time') ? undefined : json['update_time'],
        'visible_to': !exists(json, 'visible_to') ? undefined : json['visible_to'],
        'picture_id': !exists(json, 'picture_id') ? undefined : PersonItemAllOfPictureIdFromJSON(json['picture_id']),
        'label': !exists(json, 'label') ? undefined : json['label'],
        'org_name': !exists(json, 'org_name') ? undefined : json['org_name'],
        'owner_name': !exists(json, 'owner_name') ? undefined : json['owner_name'],
        'cc_email': !exists(json, 'cc_email') ? undefined : json['cc_email'],
    };
}

export function PersonItemAllOfToJSON(value?: PersonItemAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'company_id': value.company_id,
        'active_flag': value.active_flag,
        'phone': value.phone === undefined ? undefined : ((value.phone as Array<any>).map(PersonItemAllOfPhoneInnerToJSON)),
        'email': value.email === undefined ? undefined : ((value.email as Array<any>).map(PersonItemAllOfEmailInnerToJSON)),
        'primary_email': value.primary_email,
        'first_char': value.first_char,
        'add_time': value.add_time,
        'update_time': value.update_time,
        'visible_to': value.visible_to,
        'picture_id': PersonItemAllOfPictureIdToJSON(value.picture_id),
        'label': value.label,
        'org_name': value.org_name,
        'owner_name': value.owner_name,
        'cc_email': value.cc_email,
    };
}

