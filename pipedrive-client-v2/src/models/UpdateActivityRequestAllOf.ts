/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateActivityRequestAllOf
 */
export interface UpdateActivityRequestAllOf {
    /**
     * The subject of the activity
     * @type {string}
     * @memberof UpdateActivityRequestAllOf
     */
    subject?: string;
    /**
     * The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.
     * @type {string}
     * @memberof UpdateActivityRequestAllOf
     */
    type?: string;
    /**
     * The ID of the user whom the activity is assigned to
     * @type {number}
     * @memberof UpdateActivityRequestAllOf
     */
    user_id?: number;
    /**
     * List of multiple persons (participants) this activity is associated with. It requires a structure as follows: `[{"person_id":1,"primary_flag":true}]`
     * @type {Array<object>}
     * @memberof UpdateActivityRequestAllOf
     */
    participants?: Array<object>;
    /**
     * Set the activity as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset by never setting it or overriding it with `null`. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.
     * @type {boolean}
     * @memberof UpdateActivityRequestAllOf
     */
    busy_flag?: UpdateActivityRequestAllOfBusyFlagEnum;
    /**
     * The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address. It requires a structure as follows: `[{"email_address":"mail@example.org"}]` or `[{"person_id":1, "email_address":"mail@example.org"}]`
     * @type {Array<object>}
     * @memberof UpdateActivityRequestAllOf
     */
    attendees?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof UpdateActivityRequestAllOf
     */
    done?: UpdateActivityRequestAllOfDoneEnum;
}

/**
* @export
* @enum {string}
*/
export enum UpdateActivityRequestAllOfBusyFlagEnum {
    True = true,
    False = false
}
/**
* @export
* @enum {string}
*/
export enum UpdateActivityRequestAllOfDoneEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}


/**
 * Check if a given object implements the UpdateActivityRequestAllOf interface.
 */
export function instanceOfUpdateActivityRequestAllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpdateActivityRequestAllOfFromJSON(json: any): UpdateActivityRequestAllOf {
    return UpdateActivityRequestAllOfFromJSONTyped(json, false);
}

export function UpdateActivityRequestAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateActivityRequestAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'user_id': !exists(json, 'user_id') ? undefined : json['user_id'],
        'participants': !exists(json, 'participants') ? undefined : json['participants'],
        'busy_flag': !exists(json, 'busy_flag') ? undefined : json['busy_flag'],
        'attendees': !exists(json, 'attendees') ? undefined : json['attendees'],
        'done': !exists(json, 'done') ? undefined : json['done'],
    };
}

export function UpdateActivityRequestAllOfToJSON(value?: UpdateActivityRequestAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subject': value.subject,
        'type': value.type,
        'user_id': value.user_id,
        'participants': value.participants,
        'busy_flag': value.busy_flag,
        'attendees': value.attendees,
        'done': value.done,
    };
}

