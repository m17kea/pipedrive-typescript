/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrganizationCountAndAddressInfo
 */
export interface OrganizationCountAndAddressInfo {
    /**
     * The count of email messages related to the organization
     * @type {number}
     * @memberof OrganizationCountAndAddressInfo
     */
    email_messages_count?: number;
    /**
     * The count of persons related to the organization
     * @type {number}
     * @memberof OrganizationCountAndAddressInfo
     */
    people_count?: number;
    /**
     * The count of activities related to the organization
     * @type {number}
     * @memberof OrganizationCountAndAddressInfo
     */
    activities_count?: number;
    /**
     * The count of done activities related to the organization
     * @type {number}
     * @memberof OrganizationCountAndAddressInfo
     */
    done_activities_count?: number;
    /**
     * The count of undone activities related to the organization
     * @type {number}
     * @memberof OrganizationCountAndAddressInfo
     */
    undone_activities_count?: number;
    /**
     * The count of files related to the organization
     * @type {number}
     * @memberof OrganizationCountAndAddressInfo
     */
    files_count?: number;
    /**
     * The count of notes related to the organization
     * @type {number}
     * @memberof OrganizationCountAndAddressInfo
     */
    notes_count?: number;
    /**
     * The count of followers related to the organization
     * @type {number}
     * @memberof OrganizationCountAndAddressInfo
     */
    followers_count?: number;
    /**
     * The full address of the organization
     * @type {string}
     * @memberof OrganizationCountAndAddressInfo
     */
    address?: string;
    /**
     * The sub-premise of the organization location
     * @type {string}
     * @memberof OrganizationCountAndAddressInfo
     */
    address_subpremise?: string;
    /**
     * The street number of the organization location
     * @type {string}
     * @memberof OrganizationCountAndAddressInfo
     */
    address_street_number?: string;
    /**
     * The route of the organization location
     * @type {string}
     * @memberof OrganizationCountAndAddressInfo
     */
    address_route?: string;
    /**
     * The sub-locality of the organization location
     * @type {string}
     * @memberof OrganizationCountAndAddressInfo
     */
    address_sublocality?: string;
    /**
     * The locality of the organization location
     * @type {string}
     * @memberof OrganizationCountAndAddressInfo
     */
    address_locality?: string;
    /**
     * The level 1 admin area of the organization location
     * @type {string}
     * @memberof OrganizationCountAndAddressInfo
     */
    address_admin_area_level_1?: string;
    /**
     * The level 2 admin area of the organization location
     * @type {string}
     * @memberof OrganizationCountAndAddressInfo
     */
    address_admin_area_level_2?: string;
    /**
     * The country of the organization location
     * @type {string}
     * @memberof OrganizationCountAndAddressInfo
     */
    address_country?: string;
    /**
     * The postal code of the organization location
     * @type {string}
     * @memberof OrganizationCountAndAddressInfo
     */
    address_postal_code?: string;
    /**
     * The formatted organization location
     * @type {string}
     * @memberof OrganizationCountAndAddressInfo
     */
    address_formatted_address?: string;
}

/**
 * Check if a given object implements the OrganizationCountAndAddressInfo interface.
 */
export function instanceOfOrganizationCountAndAddressInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrganizationCountAndAddressInfoFromJSON(json: any): OrganizationCountAndAddressInfo {
    return OrganizationCountAndAddressInfoFromJSONTyped(json, false);
}

export function OrganizationCountAndAddressInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationCountAndAddressInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'email_messages_count': !exists(json, 'email_messages_count') ? undefined : json['email_messages_count'],
        'people_count': !exists(json, 'people_count') ? undefined : json['people_count'],
        'activities_count': !exists(json, 'activities_count') ? undefined : json['activities_count'],
        'done_activities_count': !exists(json, 'done_activities_count') ? undefined : json['done_activities_count'],
        'undone_activities_count': !exists(json, 'undone_activities_count') ? undefined : json['undone_activities_count'],
        'files_count': !exists(json, 'files_count') ? undefined : json['files_count'],
        'notes_count': !exists(json, 'notes_count') ? undefined : json['notes_count'],
        'followers_count': !exists(json, 'followers_count') ? undefined : json['followers_count'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'address_subpremise': !exists(json, 'address_subpremise') ? undefined : json['address_subpremise'],
        'address_street_number': !exists(json, 'address_street_number') ? undefined : json['address_street_number'],
        'address_route': !exists(json, 'address_route') ? undefined : json['address_route'],
        'address_sublocality': !exists(json, 'address_sublocality') ? undefined : json['address_sublocality'],
        'address_locality': !exists(json, 'address_locality') ? undefined : json['address_locality'],
        'address_admin_area_level_1': !exists(json, 'address_admin_area_level_1') ? undefined : json['address_admin_area_level_1'],
        'address_admin_area_level_2': !exists(json, 'address_admin_area_level_2') ? undefined : json['address_admin_area_level_2'],
        'address_country': !exists(json, 'address_country') ? undefined : json['address_country'],
        'address_postal_code': !exists(json, 'address_postal_code') ? undefined : json['address_postal_code'],
        'address_formatted_address': !exists(json, 'address_formatted_address') ? undefined : json['address_formatted_address'],
    };
}

export function OrganizationCountAndAddressInfoToJSON(value?: OrganizationCountAndAddressInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'email_messages_count': value.email_messages_count,
        'people_count': value.people_count,
        'activities_count': value.activities_count,
        'done_activities_count': value.done_activities_count,
        'undone_activities_count': value.undone_activities_count,
        'files_count': value.files_count,
        'notes_count': value.notes_count,
        'followers_count': value.followers_count,
        'address': value.address,
        'address_subpremise': value.address_subpremise,
        'address_street_number': value.address_street_number,
        'address_route': value.address_route,
        'address_sublocality': value.address_sublocality,
        'address_locality': value.address_locality,
        'address_admin_area_level_1': value.address_admin_area_level_1,
        'address_admin_area_level_2': value.address_admin_area_level_2,
        'address_country': value.address_country,
        'address_postal_code': value.address_postal_code,
        'address_formatted_address': value.address_formatted_address,
    };
}

