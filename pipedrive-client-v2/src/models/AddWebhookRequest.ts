/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AddWebhookRequest
 */
export interface AddWebhookRequest {
    /**
     * A full, valid, publicly accessible URL which determines where to send the notifications. Please note that you cannot use Pipedrive API endpoints as the `subscription_url` and the chosen URL must not redirect to another link.
     * @type {string}
     * @memberof AddWebhookRequest
     */
    subscription_url: string;
    /**
     * The type of action to receive notifications about. Wildcard will match all supported actions.
     * @type {string}
     * @memberof AddWebhookRequest
     */
    event_action: AddWebhookRequestEventActionEnum;
    /**
     * The type of object to receive notifications about. Wildcard will match all supported objects.
     * @type {string}
     * @memberof AddWebhookRequest
     */
    event_object: AddWebhookRequestEventObjectEnum;
    /**
     * The ID of the user this Webhook will be authorized with. If not set, current authorized user will be used. Note that this does not filter only certain user's events â€” rather, this specifies the user's permissions under which each event is checked. Events about objects the selected user is not entitled to access are not sent. If you want to receive notifications for all events, a top-level admin user should be used.
     * @type {number}
     * @memberof AddWebhookRequest
     */
    user_id?: number;
    /**
     * The HTTP basic auth username of the subscription URL endpoint (if required)
     * @type {string}
     * @memberof AddWebhookRequest
     */
    http_auth_user?: string;
    /**
     * The HTTP basic auth password of the subscription URL endpoint (if required)
     * @type {string}
     * @memberof AddWebhookRequest
     */
    http_auth_password?: string;
}

/**
* @export
* @enum {string}
*/
export enum AddWebhookRequestEventActionEnum {
    Added = 'added',
    Updated = 'updated',
    Merged = 'merged',
    Deleted = 'deleted',
    Star = '*'
}
/**
* @export
* @enum {string}
*/
export enum AddWebhookRequestEventObjectEnum {
    Activity = 'activity',
    ActivityType = 'activityType',
    Deal = 'deal',
    Note = 'note',
    Organization = 'organization',
    Person = 'person',
    Pipeline = 'pipeline',
    Product = 'product',
    Stage = 'stage',
    User = 'user',
    Star = '*'
}


/**
 * Check if a given object implements the AddWebhookRequest interface.
 */
export function instanceOfAddWebhookRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "subscription_url" in value;
    isInstance = isInstance && "event_action" in value;
    isInstance = isInstance && "event_object" in value;

    return isInstance;
}

export function AddWebhookRequestFromJSON(json: any): AddWebhookRequest {
    return AddWebhookRequestFromJSONTyped(json, false);
}

export function AddWebhookRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddWebhookRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subscription_url': json['subscription_url'],
        'event_action': json['event_action'],
        'event_object': json['event_object'],
        'user_id': !exists(json, 'user_id') ? undefined : json['user_id'],
        'http_auth_user': !exists(json, 'http_auth_user') ? undefined : json['http_auth_user'],
        'http_auth_password': !exists(json, 'http_auth_password') ? undefined : json['http_auth_password'],
    };
}

export function AddWebhookRequestToJSON(value?: AddWebhookRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subscription_url': value.subscription_url,
        'event_action': value.event_action,
        'event_object': value.event_object,
        'user_id': value.user_id,
        'http_auth_user': value.http_auth_user,
        'http_auth_password': value.http_auth_password,
    };
}

