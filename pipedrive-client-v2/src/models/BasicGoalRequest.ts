/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BasicGoalRequest
 */
export interface BasicGoalRequest {
    /**
     * The title of the goal
     * @type {string}
     * @memberof BasicGoalRequest
     */
    title?: string;
    /**
     * Who this goal is assigned to. It requires the following JSON structure: { "id": "1", "type": "person" }. `type` can be either `person`, `company` or `team`. ID of the assignee person, company or team.
     * @type {object}
     * @memberof BasicGoalRequest
     */
    assignee?: object;
    /**
     * The type of the goal. It requires the following JSON structure: { "name": "deals_started", "params": { "pipeline_id": 1 } }. Type can be one of: `deals_won`, `deals_progressed`, `activities_completed`, `activities_added`, `deals_started` or `revenue_forecast`. `params` can include `pipeline_id`, `stage_id` or `activity_type_id`. `stage_id` is related to only `deals_progressed` type of goals and `activity_type_id` to `activities_completed` or `activities_added` types of goals. To track goal in all pipelines set `pipeline_id` as `null`.
     * @type {object}
     * @memberof BasicGoalRequest
     */
    type?: object;
    /**
     * The expected outcome of the goal. Expected outcome can be tracked either by `quantity` or by `sum`. It requires the following JSON structure: { "target": "50", "tracking_metric": "quantity" } or { "target": "50", "tracking_metric": "sum", "currency_id": 1 }. `currency_id` should only be added to `sum` type of goals.
     * @type {object}
     * @memberof BasicGoalRequest
     */
    expected_outcome?: object;
    /**
     * The date when the goal starts and ends. It requires the following JSON structure: { "start": "2019-01-01", "end": "2022-12-31" }. Date in format of YYYY-MM-DD. "end" can be set to `null` for an infinite, open-ended goal.
     * @type {object}
     * @memberof BasicGoalRequest
     */
    duration?: object;
    /**
     * The interval of the goal
     * @type {string}
     * @memberof BasicGoalRequest
     */
    interval?: BasicGoalRequestIntervalEnum;
}

/**
* @export
* @enum {string}
*/
export enum BasicGoalRequestIntervalEnum {
    Weekly = 'weekly',
    Monthly = 'monthly',
    Quarterly = 'quarterly',
    Yearly = 'yearly'
}


/**
 * Check if a given object implements the BasicGoalRequest interface.
 */
export function instanceOfBasicGoalRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BasicGoalRequestFromJSON(json: any): BasicGoalRequest {
    return BasicGoalRequestFromJSONTyped(json, false);
}

export function BasicGoalRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BasicGoalRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': !exists(json, 'title') ? undefined : json['title'],
        'assignee': !exists(json, 'assignee') ? undefined : json['assignee'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'expected_outcome': !exists(json, 'expected_outcome') ? undefined : json['expected_outcome'],
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
        'interval': !exists(json, 'interval') ? undefined : json['interval'],
    };
}

export function BasicGoalRequestToJSON(value?: BasicGoalRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'assignee': value.assignee,
        'type': value.type,
        'expected_outcome': value.expected_outcome,
        'duration': value.duration,
        'interval': value.interval,
    };
}

