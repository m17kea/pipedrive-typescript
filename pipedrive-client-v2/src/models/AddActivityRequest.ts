/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AddActivityRequest
 */
export interface AddActivityRequest {
    /**
     * The due date of the activity. Format: YYYY-MM-DD
     * @type {Date}
     * @memberof AddActivityRequest
     */
    due_date?: Date;
    /**
     * The due time of the activity in UTC. Format: HH:MM
     * @type {string}
     * @memberof AddActivityRequest
     */
    due_time?: string;
    /**
     * The duration of the activity. Format: HH:MM
     * @type {string}
     * @memberof AddActivityRequest
     */
    duration?: string;
    /**
     * The ID of the deal this activity is associated with
     * @type {number}
     * @memberof AddActivityRequest
     */
    deal_id?: number;
    /**
     * The ID of the lead this activity is associated with
     * @type {string}
     * @memberof AddActivityRequest
     */
    lead_id?: string;
    /**
     * The ID of the person this activity is associated with
     * @type {number}
     * @memberof AddActivityRequest
     */
    person_id?: number;
    /**
     * The ID of the organization this activity is associated with
     * @type {number}
     * @memberof AddActivityRequest
     */
    org_id?: number;
    /**
     * The note of the activity (HTML format)
     * @type {string}
     * @memberof AddActivityRequest
     */
    note?: string;
    /**
     * The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.
     * @type {string}
     * @memberof AddActivityRequest
     */
    location?: string;
    /**
     * Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.
     * @type {string}
     * @memberof AddActivityRequest
     */
    public_description?: string;
    /**
     * The subject of the activity. When value for subject is not set, it will be given a default value `Call`.
     * @type {string}
     * @memberof AddActivityRequest
     */
    subject?: string;
    /**
     * The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes. When value for type is not set, it will be given a default value `Call`.
     * @type {string}
     * @memberof AddActivityRequest
     */
    type?: string;
    /**
     * The ID of the user whom the activity is assigned to. If omitted, the activity is assigned to the authorized user.
     * @type {number}
     * @memberof AddActivityRequest
     */
    user_id?: number;
    /**
     * List of multiple persons (participants) this activity is associated with. If omitted, single participant from `person_id` field is used. It requires a structure as follows: `[{"person_id":1,"primary_flag":true}]`
     * @type {Array<object>}
     * @memberof AddActivityRequest
     */
    participants?: Array<object>;
    /**
     * Set the activity as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset by never setting it or overriding it with `null`. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.
     * @type {boolean}
     * @memberof AddActivityRequest
     */
    busy_flag?: AddActivityRequestBusyFlagEnum;
    /**
     * The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address. It requires a structure as follows: `[{"email_address":"mail@example.org"}]` or `[{"person_id":1, "email_address":"mail@example.org"}]`
     * @type {Array<object>}
     * @memberof AddActivityRequest
     */
    attendees?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof AddActivityRequest
     */
    done?: AddActivityRequestDoneEnum;
}

/**
* @export
* @enum {string}
*/
export enum AddActivityRequestBusyFlagEnum {
    True = true,
    False = false
}
/**
* @export
* @enum {string}
*/
export enum AddActivityRequestDoneEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}


/**
 * Check if a given object implements the AddActivityRequest interface.
 */
export function instanceOfAddActivityRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AddActivityRequestFromJSON(json: any): AddActivityRequest {
    return AddActivityRequestFromJSONTyped(json, false);
}

export function AddActivityRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddActivityRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'due_date': !exists(json, 'due_date') ? undefined : (new Date(json['due_date'])),
        'due_time': !exists(json, 'due_time') ? undefined : json['due_time'],
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
        'deal_id': !exists(json, 'deal_id') ? undefined : json['deal_id'],
        'lead_id': !exists(json, 'lead_id') ? undefined : json['lead_id'],
        'person_id': !exists(json, 'person_id') ? undefined : json['person_id'],
        'org_id': !exists(json, 'org_id') ? undefined : json['org_id'],
        'note': !exists(json, 'note') ? undefined : json['note'],
        'location': !exists(json, 'location') ? undefined : json['location'],
        'public_description': !exists(json, 'public_description') ? undefined : json['public_description'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'user_id': !exists(json, 'user_id') ? undefined : json['user_id'],
        'participants': !exists(json, 'participants') ? undefined : json['participants'],
        'busy_flag': !exists(json, 'busy_flag') ? undefined : json['busy_flag'],
        'attendees': !exists(json, 'attendees') ? undefined : json['attendees'],
        'done': !exists(json, 'done') ? undefined : json['done'],
    };
}

export function AddActivityRequestToJSON(value?: AddActivityRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'due_date': value.due_date === undefined ? undefined : (value.due_date.toISOString().substr(0,10)),
        'due_time': value.due_time,
        'duration': value.duration,
        'deal_id': value.deal_id,
        'lead_id': value.lead_id,
        'person_id': value.person_id,
        'org_id': value.org_id,
        'note': value.note,
        'location': value.location,
        'public_description': value.public_description,
        'subject': value.subject,
        'type': value.type,
        'user_id': value.user_id,
        'participants': value.participants,
        'busy_flag': value.busy_flag,
        'attendees': value.attendees,
        'done': value.done,
    };
}

