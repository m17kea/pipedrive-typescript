/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddPersonFollowerRequest,
  AddPersonFollowerResponse200,
  AddPersonPictureResponse200,
  AddPersonRequest,
  AddPersonResponse200,
  DeletePersonResponse200,
  DeletePersonsResponse200,
  GetAssociatedActivitiesResponse200,
  GetAssociatedDealsResponse200,
  GetAssociatedFilesResponse200,
  GetAssociatedFollowersResponse200,
  GetAssociatedMailMessagesResponse200,
  GetAssociatedPersonUpdatesResponse200,
  GetPersonProductsResponse200,
  GetPersonResponse200,
  GetPersonsResponse200,
  ListPermittedUsersResponse2001,
  MergePersonsRequest,
  MergePersonsResponse200,
  SearchPersonsResponse200,
  UpdatePersonRequest,
  UpdatePersonResponse200,
} from '../models';
import {
    AddPersonFollowerRequestFromJSON,
    AddPersonFollowerRequestToJSON,
    AddPersonFollowerResponse200FromJSON,
    AddPersonFollowerResponse200ToJSON,
    AddPersonPictureResponse200FromJSON,
    AddPersonPictureResponse200ToJSON,
    AddPersonRequestFromJSON,
    AddPersonRequestToJSON,
    AddPersonResponse200FromJSON,
    AddPersonResponse200ToJSON,
    DeletePersonResponse200FromJSON,
    DeletePersonResponse200ToJSON,
    DeletePersonsResponse200FromJSON,
    DeletePersonsResponse200ToJSON,
    GetAssociatedActivitiesResponse200FromJSON,
    GetAssociatedActivitiesResponse200ToJSON,
    GetAssociatedDealsResponse200FromJSON,
    GetAssociatedDealsResponse200ToJSON,
    GetAssociatedFilesResponse200FromJSON,
    GetAssociatedFilesResponse200ToJSON,
    GetAssociatedFollowersResponse200FromJSON,
    GetAssociatedFollowersResponse200ToJSON,
    GetAssociatedMailMessagesResponse200FromJSON,
    GetAssociatedMailMessagesResponse200ToJSON,
    GetAssociatedPersonUpdatesResponse200FromJSON,
    GetAssociatedPersonUpdatesResponse200ToJSON,
    GetPersonProductsResponse200FromJSON,
    GetPersonProductsResponse200ToJSON,
    GetPersonResponse200FromJSON,
    GetPersonResponse200ToJSON,
    GetPersonsResponse200FromJSON,
    GetPersonsResponse200ToJSON,
    ListPermittedUsersResponse2001FromJSON,
    ListPermittedUsersResponse2001ToJSON,
    MergePersonsRequestFromJSON,
    MergePersonsRequestToJSON,
    MergePersonsResponse200FromJSON,
    MergePersonsResponse200ToJSON,
    SearchPersonsResponse200FromJSON,
    SearchPersonsResponse200ToJSON,
    UpdatePersonRequestFromJSON,
    UpdatePersonRequestToJSON,
    UpdatePersonResponse200FromJSON,
    UpdatePersonResponse200ToJSON,
} from '../models';

export interface AddPersonOperationRequest {
    addPersonRequest?: AddPersonRequest;
}

export interface AddPersonFollowerOperationRequest {
    id: number;
    addPersonFollowerRequest?: AddPersonFollowerRequest;
}

export interface AddPersonPictureRequest {
    id: number;
    file: Blob;
    cropX?: number;
    cropY?: number;
    cropWidth?: number;
    cropHeight?: number;
}

export interface DeletePersonRequest {
    id: number;
}

export interface DeletePersonFollowerRequest {
    id: number;
    followerId: number;
}

export interface DeletePersonPictureRequest {
    id: number;
}

export interface DeletePersonsRequest {
    ids: string;
}

export interface GetPersonRequest {
    id: number;
}

export interface GetPersonActivitiesRequest {
    id: number;
    start?: number;
    limit?: number;
    done?: GetPersonActivitiesDoneEnum;
    exclude?: string;
}

export interface GetPersonDealsRequest {
    id: number;
    start?: number;
    limit?: number;
    status?: GetPersonDealsStatusEnum;
    sort?: string;
}

export interface GetPersonFilesRequest {
    id: number;
    start?: number;
    limit?: number;
    includeDeletedFiles?: GetPersonFilesIncludeDeletedFilesEnum;
    sort?: string;
}

export interface GetPersonFollowersRequest {
    id: number;
}

export interface GetPersonMailMessagesRequest {
    id: number;
    start?: number;
    limit?: number;
}

export interface GetPersonProductsRequest {
    id: number;
    start?: number;
    limit?: number;
}

export interface GetPersonUpdatesRequest {
    id: number;
    start?: number;
    limit?: number;
    allChanges?: string;
    items?: string;
}

export interface GetPersonUsersRequest {
    id: number;
}

export interface GetPersonsRequest {
    userId?: number;
    filterId?: number;
    firstChar?: string;
    start?: number;
    limit?: number;
    sort?: string;
}

export interface MergePersonsOperationRequest {
    id: number;
    mergePersonsRequest?: MergePersonsRequest;
}

export interface SearchPersonsRequest {
    term: string;
    fields?: SearchPersonsFieldsEnum;
    exactMatch?: SearchPersonsExactMatchEnum;
    organizationId?: number;
    includeFields?: SearchPersonsIncludeFieldsEnum;
    start?: number;
    limit?: number;
}

export interface UpdatePersonOperationRequest {
    id: number;
    updatePersonRequest?: UpdatePersonRequest;
}

/**
 * PersonsApi - interface
 * 
 * @export
 * @interface PersonsApiInterface
 */
export interface PersonsApiInterface {
    /**
     * Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * @summary Add a person
     * @param {AddPersonRequest} [addPersonRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    addPersonRaw(requestParameters: AddPersonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPersonResponse200>>;

    /**
     * Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * Add a person
     */
    addPerson(requestParameters: AddPersonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPersonResponse200>;

    /**
     * Adds a follower to a person.
     * @summary Add a follower to a person
     * @param {number} id The ID of the person
     * @param {AddPersonFollowerRequest} [addPersonFollowerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    addPersonFollowerRaw(requestParameters: AddPersonFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPersonFollowerResponse200>>;

    /**
     * Adds a follower to a person.
     * Add a follower to a person
     */
    addPersonFollower(requestParameters: AddPersonFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPersonFollowerResponse200>;

    /**
     * Adds a picture to a person. If a picture is already set, the old picture will be replaced. Added image (or the cropping parameters supplied with the request) should have an equal width and height and should be at least 128 pixels. GIF, JPG and PNG are accepted. All added images will be resized to 128 and 512 pixel wide squares.
     * @summary Add person picture
     * @param {number} id The ID of the person
     * @param {Blob} file One image supplied in the multipart/form-data encoding
     * @param {number} [cropX] X coordinate to where start cropping form (in pixels)
     * @param {number} [cropY] Y coordinate to where start cropping form (in pixels)
     * @param {number} [cropWidth] The width of the cropping area (in pixels)
     * @param {number} [cropHeight] The height of the cropping area (in pixels)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    addPersonPictureRaw(requestParameters: AddPersonPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPersonPictureResponse200>>;

    /**
     * Adds a picture to a person. If a picture is already set, the old picture will be replaced. Added image (or the cropping parameters supplied with the request) should have an equal width and height and should be at least 128 pixels. GIF, JPG and PNG are accepted. All added images will be resized to 128 and 512 pixel wide squares.
     * Add person picture
     */
    addPersonPicture(requestParameters: AddPersonPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPersonPictureResponse200>;

    /**
     * Marks a person as deleted.
     * @summary Delete a person
     * @param {number} id The ID of the person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    deletePersonRaw(requestParameters: DeletePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePersonResponse200>>;

    /**
     * Marks a person as deleted.
     * Delete a person
     */
    deletePerson(requestParameters: DeletePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePersonResponse200>;

    /**
     * Deletes a follower from a person.
     * @summary Delete a follower from a person
     * @param {number} id The ID of the person
     * @param {number} followerId The ID of the follower
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    deletePersonFollowerRaw(requestParameters: DeletePersonFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePersonResponse200>>;

    /**
     * Deletes a follower from a person.
     * Delete a follower from a person
     */
    deletePersonFollower(requestParameters: DeletePersonFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePersonResponse200>;

    /**
     * Deletes a person’s picture.
     * @summary Delete person picture
     * @param {number} id The ID of the person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    deletePersonPictureRaw(requestParameters: DeletePersonPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePersonResponse200>>;

    /**
     * Deletes a person’s picture.
     * Delete person picture
     */
    deletePersonPicture(requestParameters: DeletePersonPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePersonResponse200>;

    /**
     * Marks multiple persons as deleted.
     * @summary Delete multiple persons in bulk
     * @param {string} ids The comma-separated IDs that will be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    deletePersonsRaw(requestParameters: DeletePersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePersonsResponse200>>;

    /**
     * Marks multiple persons as deleted.
     * Delete multiple persons in bulk
     */
    deletePersons(requestParameters: DeletePersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePersonsResponse200>;

    /**
     * Returns the details of a person. Note that this also returns some additional fields which are not present when asking for all persons. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of personFields.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary Get details of a person
     * @param {number} id The ID of the person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    getPersonRaw(requestParameters: GetPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPersonResponse200>>;

    /**
     * Returns the details of a person. Note that this also returns some additional fields which are not present when asking for all persons. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of personFields.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * Get details of a person
     */
    getPerson(requestParameters: GetPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPersonResponse200>;

    /**
     * Lists activities associated with a person.
     * @summary List activities associated with a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted, returns both Done and Not done activities.
     * @param {string} [exclude] A comma-separated string of activity IDs to exclude from result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    getPersonActivitiesRaw(requestParameters: GetPersonActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedActivitiesResponse200>>;

    /**
     * Lists activities associated with a person.
     * List activities associated with a person
     */
    getPersonActivities(requestParameters: GetPersonActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedActivitiesResponse200>;

    /**
     * Lists deals associated with a person.
     * @summary List deals associated with a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are fetched.
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    getPersonDealsRaw(requestParameters: GetPersonDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedDealsResponse200>>;

    /**
     * Lists deals associated with a person.
     * List deals associated with a person
     */
    getPersonDeals(requestParameters: GetPersonDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedDealsResponse200>;

    /**
     * Lists files associated with a person.
     * @summary List files attached to a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [includeDeletedFiles] When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work.
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    getPersonFilesRaw(requestParameters: GetPersonFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedFilesResponse200>>;

    /**
     * Lists files associated with a person.
     * List files attached to a person
     */
    getPersonFiles(requestParameters: GetPersonFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedFilesResponse200>;

    /**
     * Lists the followers of a person.
     * @summary List followers of a person
     * @param {number} id The ID of the person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    getPersonFollowersRaw(requestParameters: GetPersonFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedFollowersResponse200>>;

    /**
     * Lists the followers of a person.
     * List followers of a person
     */
    getPersonFollowers(requestParameters: GetPersonFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedFollowersResponse200>;

    /**
     * Lists mail messages associated with a person.
     * @summary List mail messages associated with a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    getPersonMailMessagesRaw(requestParameters: GetPersonMailMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedMailMessagesResponse200>>;

    /**
     * Lists mail messages associated with a person.
     * List mail messages associated with a person
     */
    getPersonMailMessages(requestParameters: GetPersonMailMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedMailMessagesResponse200>;

    /**
     * Lists products associated with a person.
     * @summary List products associated with a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    getPersonProductsRaw(requestParameters: GetPersonProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPersonProductsResponse200>>;

    /**
     * Lists products associated with a person.
     * List products associated with a person
     */
    getPersonProducts(requestParameters: GetPersonProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPersonProductsResponse200>;

    /**
     * Lists updates about a person.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint\'s response will also include updates for the `marketing_status` field.
     * @summary List updates about a person
     * @param {number} id The ID of the person
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [allChanges] Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted returns changes without custom field updates.
     * @param {string} [items] A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    getPersonUpdatesRaw(requestParameters: GetPersonUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedPersonUpdatesResponse200>>;

    /**
     * Lists updates about a person.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint\'s response will also include updates for the `marketing_status` field.
     * List updates about a person
     */
    getPersonUpdates(requestParameters: GetPersonUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedPersonUpdatesResponse200>;

    /**
     * List users permitted to access a person.
     * @summary List permitted users
     * @param {number} id The ID of the person
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    getPersonUsersRaw(requestParameters: GetPersonUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPermittedUsersResponse2001>>;

    /**
     * List users permitted to access a person.
     * List permitted users
     */
    getPersonUsers(requestParameters: GetPersonUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPermittedUsersResponse2001>;

    /**
     * Returns all persons.
     * @summary Get all persons
     * @param {number} [userId] If supplied, only persons owned by the given user will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;user_id&#x60; when both are supplied.
     * @param {number} [filterId] The ID of the filter to use
     * @param {string} [firstChar] If supplied, only persons whose name starts with the specified letter will be returned (case insensitive)
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    getPersonsRaw(requestParameters: GetPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPersonsResponse200>>;

    /**
     * Returns all persons.
     * Get all persons
     */
    getPersons(requestParameters: GetPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPersonsResponse200>;

    /**
     * Merges a person with another person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-persons\" target=\"_blank\" rel=\"noopener noreferrer\">merging two persons</a>.
     * @summary Merge two persons
     * @param {number} id The ID of the person
     * @param {MergePersonsRequest} [mergePersonsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    mergePersonsRaw(requestParameters: MergePersonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MergePersonsResponse200>>;

    /**
     * Merges a person with another person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-persons\" target=\"_blank\" rel=\"noopener noreferrer\">merging two persons</a>.
     * Merge two persons
     */
    mergePersons(requestParameters: MergePersonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MergePersonsResponse200>;

    /**
     * Searches all persons by name, email, phone, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found persons can be filtered by organization ID.
     * @summary Search persons
     * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;).
     * @param {'custom_fields' | 'email' | 'notes' | 'phone' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them.
     * @param {boolean} [exactMatch] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @param {number} [organizationId] Will filter persons by the provided organization ID. The upper limit of found persons associated with the organization is 2000.
     * @param {'person.picture'} [includeFields] Supports including optional fields in the results which are not provided by default
     * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    searchPersonsRaw(requestParameters: SearchPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchPersonsResponse200>>;

    /**
     * Searches all persons by name, email, phone, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found persons can be filtered by organization ID.
     * Search persons
     */
    searchPersons(requestParameters: SearchPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchPersonsResponse200>;

    /**
     * Updates the properties of a person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-person\" target=\"_blank\" rel=\"noopener noreferrer\">updating a person</a>.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * @summary Update a person
     * @param {number} id The ID of the person
     * @param {UpdatePersonRequest} [updatePersonRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonsApiInterface
     */
    updatePersonRaw(requestParameters: UpdatePersonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatePersonResponse200>>;

    /**
     * Updates the properties of a person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-person\" target=\"_blank\" rel=\"noopener noreferrer\">updating a person</a>.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * Update a person
     */
    updatePerson(requestParameters: UpdatePersonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatePersonResponse200>;

}

/**
 * 
 */
export class PersonsApi extends runtime.BaseAPI implements PersonsApiInterface {

    /**
     * Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * Add a person
     */
    async addPersonRaw(requestParameters: AddPersonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPersonResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/persons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddPersonRequestToJSON(requestParameters.addPersonRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPersonResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * Add a person
     */
    async addPerson(requestParameters: AddPersonOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPersonResponse200> {
        const response = await this.addPersonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a follower to a person.
     * Add a follower to a person
     */
    async addPersonFollowerRaw(requestParameters: AddPersonFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPersonFollowerResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addPersonFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/persons/{id}/followers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddPersonFollowerRequestToJSON(requestParameters.addPersonFollowerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPersonFollowerResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a follower to a person.
     * Add a follower to a person
     */
    async addPersonFollower(requestParameters: AddPersonFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPersonFollowerResponse200> {
        const response = await this.addPersonFollowerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a picture to a person. If a picture is already set, the old picture will be replaced. Added image (or the cropping parameters supplied with the request) should have an equal width and height and should be at least 128 pixels. GIF, JPG and PNG are accepted. All added images will be resized to 128 and 512 pixel wide squares.
     * Add person picture
     */
    async addPersonPictureRaw(requestParameters: AddPersonPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPersonPictureResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addPersonPicture.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling addPersonPicture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.cropX !== undefined) {
            formParams.append('crop_x', requestParameters.cropX as any);
        }

        if (requestParameters.cropY !== undefined) {
            formParams.append('crop_y', requestParameters.cropY as any);
        }

        if (requestParameters.cropWidth !== undefined) {
            formParams.append('crop_width', requestParameters.cropWidth as any);
        }

        if (requestParameters.cropHeight !== undefined) {
            formParams.append('crop_height', requestParameters.cropHeight as any);
        }

        const response = await this.request({
            path: `/persons/{id}/picture`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPersonPictureResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a picture to a person. If a picture is already set, the old picture will be replaced. Added image (or the cropping parameters supplied with the request) should have an equal width and height and should be at least 128 pixels. GIF, JPG and PNG are accepted. All added images will be resized to 128 and 512 pixel wide squares.
     * Add person picture
     */
    async addPersonPicture(requestParameters: AddPersonPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPersonPictureResponse200> {
        const response = await this.addPersonPictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks a person as deleted.
     * Delete a person
     */
    async deletePersonRaw(requestParameters: DeletePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePersonResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/persons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePersonResponse200FromJSON(jsonValue));
    }

    /**
     * Marks a person as deleted.
     * Delete a person
     */
    async deletePerson(requestParameters: DeletePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePersonResponse200> {
        const response = await this.deletePersonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a follower from a person.
     * Delete a follower from a person
     */
    async deletePersonFollowerRaw(requestParameters: DeletePersonFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePersonResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePersonFollower.');
        }

        if (requestParameters.followerId === null || requestParameters.followerId === undefined) {
            throw new runtime.RequiredError('followerId','Required parameter requestParameters.followerId was null or undefined when calling deletePersonFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/persons/{id}/followers/{follower_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"follower_id"}}`, encodeURIComponent(String(requestParameters.followerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePersonResponse200FromJSON(jsonValue));
    }

    /**
     * Deletes a follower from a person.
     * Delete a follower from a person
     */
    async deletePersonFollower(requestParameters: DeletePersonFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePersonResponse200> {
        const response = await this.deletePersonFollowerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a person’s picture.
     * Delete person picture
     */
    async deletePersonPictureRaw(requestParameters: DeletePersonPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePersonResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePersonPicture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/persons/{id}/picture`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePersonResponse200FromJSON(jsonValue));
    }

    /**
     * Deletes a person’s picture.
     * Delete person picture
     */
    async deletePersonPicture(requestParameters: DeletePersonPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePersonResponse200> {
        const response = await this.deletePersonPictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks multiple persons as deleted.
     * Delete multiple persons in bulk
     */
    async deletePersonsRaw(requestParameters: DeletePersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePersonsResponse200>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError('ids','Required parameter requestParameters.ids was null or undefined when calling deletePersons.');
        }

        const queryParameters: any = {};

        if (requestParameters.ids !== undefined) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/persons`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePersonsResponse200FromJSON(jsonValue));
    }

    /**
     * Marks multiple persons as deleted.
     * Delete multiple persons in bulk
     */
    async deletePersons(requestParameters: DeletePersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePersonsResponse200> {
        const response = await this.deletePersonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of a person. Note that this also returns some additional fields which are not present when asking for all persons. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of personFields.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * Get details of a person
     */
    async getPersonRaw(requestParameters: GetPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPersonResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/persons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPersonResponse200FromJSON(jsonValue));
    }

    /**
     * Returns the details of a person. Note that this also returns some additional fields which are not present when asking for all persons. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of personFields.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * Get details of a person
     */
    async getPerson(requestParameters: GetPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPersonResponse200> {
        const response = await this.getPersonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists activities associated with a person.
     * List activities associated with a person
     */
    async getPersonActivitiesRaw(requestParameters: GetPersonActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedActivitiesResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPersonActivities.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.done !== undefined) {
            queryParameters['done'] = requestParameters.done;
        }

        if (requestParameters.exclude !== undefined) {
            queryParameters['exclude'] = requestParameters.exclude;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["activities:read", "activities:full"]);
        }

        const response = await this.request({
            path: `/persons/{id}/activities`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedActivitiesResponse200FromJSON(jsonValue));
    }

    /**
     * Lists activities associated with a person.
     * List activities associated with a person
     */
    async getPersonActivities(requestParameters: GetPersonActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedActivitiesResponse200> {
        const response = await this.getPersonActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists deals associated with a person.
     * List deals associated with a person
     */
    async getPersonDealsRaw(requestParameters: GetPersonDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedDealsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPersonDeals.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/persons/{id}/deals`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedDealsResponse200FromJSON(jsonValue));
    }

    /**
     * Lists deals associated with a person.
     * List deals associated with a person
     */
    async getPersonDeals(requestParameters: GetPersonDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedDealsResponse200> {
        const response = await this.getPersonDealsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists files associated with a person.
     * List files attached to a person
     */
    async getPersonFilesRaw(requestParameters: GetPersonFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedFilesResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPersonFiles.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.includeDeletedFiles !== undefined) {
            queryParameters['include_deleted_files'] = requestParameters.includeDeletedFiles;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/persons/{id}/files`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedFilesResponse200FromJSON(jsonValue));
    }

    /**
     * Lists files associated with a person.
     * List files attached to a person
     */
    async getPersonFiles(requestParameters: GetPersonFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedFilesResponse200> {
        const response = await this.getPersonFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists the followers of a person.
     * List followers of a person
     */
    async getPersonFollowersRaw(requestParameters: GetPersonFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedFollowersResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPersonFollowers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/persons/{id}/followers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedFollowersResponse200FromJSON(jsonValue));
    }

    /**
     * Lists the followers of a person.
     * List followers of a person
     */
    async getPersonFollowers(requestParameters: GetPersonFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedFollowersResponse200> {
        const response = await this.getPersonFollowersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists mail messages associated with a person.
     * List mail messages associated with a person
     */
    async getPersonMailMessagesRaw(requestParameters: GetPersonMailMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedMailMessagesResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPersonMailMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["mail:read", "mail:full"]);
        }

        const response = await this.request({
            path: `/persons/{id}/mailMessages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedMailMessagesResponse200FromJSON(jsonValue));
    }

    /**
     * Lists mail messages associated with a person.
     * List mail messages associated with a person
     */
    async getPersonMailMessages(requestParameters: GetPersonMailMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedMailMessagesResponse200> {
        const response = await this.getPersonMailMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists products associated with a person.
     * List products associated with a person
     */
    async getPersonProductsRaw(requestParameters: GetPersonProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPersonProductsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPersonProducts.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/persons/{id}/products`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPersonProductsResponse200FromJSON(jsonValue));
    }

    /**
     * Lists products associated with a person.
     * List products associated with a person
     */
    async getPersonProducts(requestParameters: GetPersonProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPersonProductsResponse200> {
        const response = await this.getPersonProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists updates about a person.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint\'s response will also include updates for the `marketing_status` field.
     * List updates about a person
     */
    async getPersonUpdatesRaw(requestParameters: GetPersonUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedPersonUpdatesResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPersonUpdates.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.allChanges !== undefined) {
            queryParameters['all_changes'] = requestParameters.allChanges;
        }

        if (requestParameters.items !== undefined) {
            queryParameters['items'] = requestParameters.items;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recents:read"]);
        }

        const response = await this.request({
            path: `/persons/{id}/flow`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedPersonUpdatesResponse200FromJSON(jsonValue));
    }

    /**
     * Lists updates about a person.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint\'s response will also include updates for the `marketing_status` field.
     * List updates about a person
     */
    async getPersonUpdates(requestParameters: GetPersonUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedPersonUpdatesResponse200> {
        const response = await this.getPersonUpdatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List users permitted to access a person.
     * List permitted users
     */
    async getPersonUsersRaw(requestParameters: GetPersonUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPermittedUsersResponse2001>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPersonUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/persons/{id}/permittedUsers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPermittedUsersResponse2001FromJSON(jsonValue));
    }

    /**
     * List users permitted to access a person.
     * List permitted users
     */
    async getPersonUsers(requestParameters: GetPersonUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPermittedUsersResponse2001> {
        const response = await this.getPersonUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all persons.
     * Get all persons
     */
    async getPersonsRaw(requestParameters: GetPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPersonsResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter_id'] = requestParameters.filterId;
        }

        if (requestParameters.firstChar !== undefined) {
            queryParameters['first_char'] = requestParameters.firstChar;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/persons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPersonsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns all persons.
     * Get all persons
     */
    async getPersons(requestParameters: GetPersonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPersonsResponse200> {
        const response = await this.getPersonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Merges a person with another person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-persons\" target=\"_blank\" rel=\"noopener noreferrer\">merging two persons</a>.
     * Merge two persons
     */
    async mergePersonsRaw(requestParameters: MergePersonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MergePersonsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mergePersons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/persons/{id}/merge`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MergePersonsRequestToJSON(requestParameters.mergePersonsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MergePersonsResponse200FromJSON(jsonValue));
    }

    /**
     * Merges a person with another person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-persons\" target=\"_blank\" rel=\"noopener noreferrer\">merging two persons</a>.
     * Merge two persons
     */
    async mergePersons(requestParameters: MergePersonsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MergePersonsResponse200> {
        const response = await this.mergePersonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches all persons by name, email, phone, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found persons can be filtered by organization ID.
     * Search persons
     */
    async searchPersonsRaw(requestParameters: SearchPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchPersonsResponse200>> {
        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling searchPersons.');
        }

        const queryParameters: any = {};

        if (requestParameters.term !== undefined) {
            queryParameters['term'] = requestParameters.term;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.exactMatch !== undefined) {
            queryParameters['exact_match'] = requestParameters.exactMatch;
        }

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organization_id'] = requestParameters.organizationId;
        }

        if (requestParameters.includeFields !== undefined) {
            queryParameters['include_fields'] = requestParameters.includeFields;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:read", "contacts:full", "search:read"]);
        }

        const response = await this.request({
            path: `/persons/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchPersonsResponse200FromJSON(jsonValue));
    }

    /**
     * Searches all persons by name, email, phone, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found persons can be filtered by organization ID.
     * Search persons
     */
    async searchPersons(requestParameters: SearchPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchPersonsResponse200> {
        const response = await this.searchPersonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the properties of a person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-person\" target=\"_blank\" rel=\"noopener noreferrer\">updating a person</a>.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * Update a person
     */
    async updatePersonRaw(requestParameters: UpdatePersonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatePersonResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/persons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePersonRequestToJSON(requestParameters.updatePersonRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatePersonResponse200FromJSON(jsonValue));
    }

    /**
     * Updates the properties of a person. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-person\" target=\"_blank\" rel=\"noopener noreferrer\">updating a person</a>.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
     * Update a person
     */
    async updatePerson(requestParameters: UpdatePersonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatePersonResponse200> {
        const response = await this.updatePersonRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetPersonActivitiesDoneEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetPersonDealsStatusEnum {
    Open = 'open',
    Won = 'won',
    Lost = 'lost',
    Deleted = 'deleted',
    AllNotDeleted = 'all_not_deleted'
}
/**
  * @export
  * @enum {string}
  */
export enum GetPersonFilesIncludeDeletedFilesEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum SearchPersonsFieldsEnum {
    CustomFields = 'custom_fields',
    Email = 'email',
    Notes = 'notes',
    Phone = 'phone',
    Name = 'name'
}
/**
  * @export
  * @enum {string}
  */
export enum SearchPersonsExactMatchEnum {
    True = true,
    False = false
}
/**
  * @export
  * @enum {string}
  */
export enum SearchPersonsIncludeFieldsEnum {
    PersonPicture = 'person.picture'
}
