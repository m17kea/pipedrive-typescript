/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddCallLogAudioFileResponse200,
  AddCallLogRequest,
  AddCallLogResponse200,
  CallLogResponse400,
  CallLogResponse403,
  CallLogResponse404,
  CallLogResponse409,
  CallLogResponse410,
  CallLogResponse500,
  DeleteCallLogResponse200,
  GetCallLog200Response,
  GetUserCallLogsResponse200,
} from '../models';
import {
    AddCallLogAudioFileResponse200FromJSON,
    AddCallLogAudioFileResponse200ToJSON,
    AddCallLogRequestFromJSON,
    AddCallLogRequestToJSON,
    AddCallLogResponse200FromJSON,
    AddCallLogResponse200ToJSON,
    CallLogResponse400FromJSON,
    CallLogResponse400ToJSON,
    CallLogResponse403FromJSON,
    CallLogResponse403ToJSON,
    CallLogResponse404FromJSON,
    CallLogResponse404ToJSON,
    CallLogResponse409FromJSON,
    CallLogResponse409ToJSON,
    CallLogResponse410FromJSON,
    CallLogResponse410ToJSON,
    CallLogResponse500FromJSON,
    CallLogResponse500ToJSON,
    DeleteCallLogResponse200FromJSON,
    DeleteCallLogResponse200ToJSON,
    GetCallLog200ResponseFromJSON,
    GetCallLog200ResponseToJSON,
    GetUserCallLogsResponse200FromJSON,
    GetUserCallLogsResponse200ToJSON,
} from '../models';

export interface AddCallLogOperationRequest {
    addCallLogRequest?: AddCallLogRequest;
}

export interface AddCallLogAudioFileRequest {
    id: string;
    file: Blob;
}

export interface DeleteCallLogRequest {
    id: string;
}

export interface GetCallLogRequest {
    id: string;
}

export interface GetUserCallLogsRequest {
    start?: number;
    limit?: number;
}

/**
 * CallLogsApi - interface
 * 
 * @export
 * @interface CallLogsApiInterface
 */
export interface CallLogsApiInterface {
    /**
     * Adds a new call log.
     * @summary Add a call log
     * @param {AddCallLogRequest} [addCallLogRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallLogsApiInterface
     */
    addCallLogRaw(requestParameters: AddCallLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddCallLogResponse200>>;

    /**
     * Adds a new call log.
     * Add a call log
     */
    addCallLog(requestParameters: AddCallLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddCallLogResponse200>;

    /**
     * Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
     * @summary Attach an audio file to the call log
     * @param {string} id The ID received when you create the call log
     * @param {Blob} file Audio file supported by the HTML5 specification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallLogsApiInterface
     */
    addCallLogAudioFileRaw(requestParameters: AddCallLogAudioFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddCallLogAudioFileResponse200>>;

    /**
     * Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
     * Attach an audio file to the call log
     */
    addCallLogAudioFile(requestParameters: AddCallLogAudioFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddCallLogAudioFileResponse200>;

    /**
     * Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
     * @summary Delete a call log
     * @param {string} id The ID received when you create the call log
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallLogsApiInterface
     */
    deleteCallLogRaw(requestParameters: DeleteCallLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCallLogResponse200>>;

    /**
     * Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
     * Delete a call log
     */
    deleteCallLog(requestParameters: DeleteCallLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCallLogResponse200>;

    /**
     * Returns details of a specific call log.
     * @summary Get details of a call log
     * @param {string} id The ID received when you create the call log
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallLogsApiInterface
     */
    getCallLogRaw(requestParameters: GetCallLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCallLog200Response>>;

    /**
     * Returns details of a specific call log.
     * Get details of a call log
     */
    getCallLog(requestParameters: GetCallLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCallLog200Response>;

    /**
     * Returns all call logs assigned to a particular user.
     * @summary Get all call logs assigned to a particular user
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallLogsApiInterface
     */
    getUserCallLogsRaw(requestParameters: GetUserCallLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserCallLogsResponse200>>;

    /**
     * Returns all call logs assigned to a particular user.
     * Get all call logs assigned to a particular user
     */
    getUserCallLogs(requestParameters: GetUserCallLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserCallLogsResponse200>;

}

/**
 * 
 */
export class CallLogsApi extends runtime.BaseAPI implements CallLogsApiInterface {

    /**
     * Adds a new call log.
     * Add a call log
     */
    async addCallLogRaw(requestParameters: AddCallLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddCallLogResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["phone-integration"]);
        }

        const response = await this.request({
            path: `/callLogs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddCallLogRequestToJSON(requestParameters.addCallLogRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddCallLogResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new call log.
     * Add a call log
     */
    async addCallLog(requestParameters: AddCallLogOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddCallLogResponse200> {
        const response = await this.addCallLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
     * Attach an audio file to the call log
     */
    async addCallLogAudioFileRaw(requestParameters: AddCallLogAudioFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddCallLogAudioFileResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addCallLogAudioFile.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling addCallLogAudioFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["phone-integration"]);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/callLogs/{id}/recordings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddCallLogAudioFileResponse200FromJSON(jsonValue));
    }

    /**
     * Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
     * Attach an audio file to the call log
     */
    async addCallLogAudioFile(requestParameters: AddCallLogAudioFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddCallLogAudioFileResponse200> {
        const response = await this.addCallLogAudioFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
     * Delete a call log
     */
    async deleteCallLogRaw(requestParameters: DeleteCallLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCallLogResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCallLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["phone-integration"]);
        }

        const response = await this.request({
            path: `/callLogs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteCallLogResponse200FromJSON(jsonValue));
    }

    /**
     * Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
     * Delete a call log
     */
    async deleteCallLog(requestParameters: DeleteCallLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCallLogResponse200> {
        const response = await this.deleteCallLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns details of a specific call log.
     * Get details of a call log
     */
    async getCallLogRaw(requestParameters: GetCallLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCallLog200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCallLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["phone-integration"]);
        }

        const response = await this.request({
            path: `/callLogs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCallLog200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns details of a specific call log.
     * Get details of a call log
     */
    async getCallLog(requestParameters: GetCallLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCallLog200Response> {
        const response = await this.getCallLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all call logs assigned to a particular user.
     * Get all call logs assigned to a particular user
     */
    async getUserCallLogsRaw(requestParameters: GetUserCallLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserCallLogsResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["phone-integration"]);
        }

        const response = await this.request({
            path: `/callLogs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserCallLogsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns all call logs assigned to a particular user.
     * Get all call logs assigned to a particular user
     */
    async getUserCallLogs(requestParameters: GetUserCallLogsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserCallLogsResponse200> {
        const response = await this.getUserCallLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
