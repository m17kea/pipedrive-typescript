/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddRecurringSubscriptionRequest,
  AddSubscriptionInstallmentRequest,
  CancelRecurringSubscriptionRequest,
  PaymentResponse200,
  SubscriptionsIdResponse200,
  UpdateRecurringSubscriptionRequest,
  UpdateSubscriptionInstallmentRequest,
} from '../models';
import {
    AddRecurringSubscriptionRequestFromJSON,
    AddRecurringSubscriptionRequestToJSON,
    AddSubscriptionInstallmentRequestFromJSON,
    AddSubscriptionInstallmentRequestToJSON,
    CancelRecurringSubscriptionRequestFromJSON,
    CancelRecurringSubscriptionRequestToJSON,
    PaymentResponse200FromJSON,
    PaymentResponse200ToJSON,
    SubscriptionsIdResponse200FromJSON,
    SubscriptionsIdResponse200ToJSON,
    UpdateRecurringSubscriptionRequestFromJSON,
    UpdateRecurringSubscriptionRequestToJSON,
    UpdateSubscriptionInstallmentRequestFromJSON,
    UpdateSubscriptionInstallmentRequestToJSON,
} from '../models';

export interface AddRecurringSubscriptionOperationRequest {
    addRecurringSubscriptionRequest?: AddRecurringSubscriptionRequest;
}

export interface AddSubscriptionInstallmentOperationRequest {
    addSubscriptionInstallmentRequest?: AddSubscriptionInstallmentRequest;
}

export interface CancelRecurringSubscriptionOperationRequest {
    id: number;
    cancelRecurringSubscriptionRequest?: CancelRecurringSubscriptionRequest;
}

export interface DeleteSubscriptionRequest {
    id: number;
}

export interface FindSubscriptionByDealRequest {
    dealId: number;
}

export interface GetSubscriptionRequest {
    id: number;
}

export interface GetSubscriptionPaymentsRequest {
    id: number;
}

export interface UpdateRecurringSubscriptionOperationRequest {
    id: number;
    updateRecurringSubscriptionRequest?: UpdateRecurringSubscriptionRequest;
}

export interface UpdateSubscriptionInstallmentOperationRequest {
    id: number;
    updateSubscriptionInstallmentRequest?: UpdateSubscriptionInstallmentRequest;
}

/**
 * SubscriptionsApi - interface
 * 
 * @export
 * @interface SubscriptionsApiInterface
 */
export interface SubscriptionsApiInterface {
    /**
     * Adds a new recurring subscription.
     * @summary Add a recurring subscription
     * @param {AddRecurringSubscriptionRequest} [addRecurringSubscriptionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiInterface
     */
    addRecurringSubscriptionRaw(requestParameters: AddRecurringSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>>;

    /**
     * Adds a new recurring subscription.
     * Add a recurring subscription
     */
    addRecurringSubscription(requestParameters: AddRecurringSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200>;

    /**
     * Adds a new installment subscription.
     * @summary Add an installment subscription
     * @param {AddSubscriptionInstallmentRequest} [addSubscriptionInstallmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiInterface
     */
    addSubscriptionInstallmentRaw(requestParameters: AddSubscriptionInstallmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>>;

    /**
     * Adds a new installment subscription.
     * Add an installment subscription
     */
    addSubscriptionInstallment(requestParameters: AddSubscriptionInstallmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200>;

    /**
     * Cancels a recurring subscription.
     * @summary Cancel a recurring subscription
     * @param {number} id The ID of the subscription
     * @param {CancelRecurringSubscriptionRequest} [cancelRecurringSubscriptionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiInterface
     */
    cancelRecurringSubscriptionRaw(requestParameters: CancelRecurringSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>>;

    /**
     * Cancels a recurring subscription.
     * Cancel a recurring subscription
     */
    cancelRecurringSubscription(requestParameters: CancelRecurringSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200>;

    /**
     * Marks an installment or a recurring subscription as deleted.
     * @summary Delete a subscription
     * @param {number} id The ID of the subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiInterface
     */
    deleteSubscriptionRaw(requestParameters: DeleteSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>>;

    /**
     * Marks an installment or a recurring subscription as deleted.
     * Delete a subscription
     */
    deleteSubscription(requestParameters: DeleteSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200>;

    /**
     * Returns details of an installment or a recurring subscription by the deal ID.
     * @summary Find subscription by deal
     * @param {number} dealId The ID of the deal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiInterface
     */
    findSubscriptionByDealRaw(requestParameters: FindSubscriptionByDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>>;

    /**
     * Returns details of an installment or a recurring subscription by the deal ID.
     * Find subscription by deal
     */
    findSubscriptionByDeal(requestParameters: FindSubscriptionByDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200>;

    /**
     * Returns details of an installment or a recurring subscription.
     * @summary Get details of a subscription
     * @param {number} id The ID of the subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiInterface
     */
    getSubscriptionRaw(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>>;

    /**
     * Returns details of an installment or a recurring subscription.
     * Get details of a subscription
     */
    getSubscription(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200>;

    /**
     * Returns all payments of an installment or recurring subscription.
     * @summary Get all payments of a subscription
     * @param {number} id The ID of the subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiInterface
     */
    getSubscriptionPaymentsRaw(requestParameters: GetSubscriptionPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentResponse200>>;

    /**
     * Returns all payments of an installment or recurring subscription.
     * Get all payments of a subscription
     */
    getSubscriptionPayments(requestParameters: GetSubscriptionPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentResponse200>;

    /**
     * Updates a recurring subscription.
     * @summary Update a recurring subscription
     * @param {number} id The ID of the subscription
     * @param {UpdateRecurringSubscriptionRequest} [updateRecurringSubscriptionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiInterface
     */
    updateRecurringSubscriptionRaw(requestParameters: UpdateRecurringSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>>;

    /**
     * Updates a recurring subscription.
     * Update a recurring subscription
     */
    updateRecurringSubscription(requestParameters: UpdateRecurringSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200>;

    /**
     * Updates an installment subscription.
     * @summary Update an installment subscription
     * @param {number} id The ID of the subscription
     * @param {UpdateSubscriptionInstallmentRequest} [updateSubscriptionInstallmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApiInterface
     */
    updateSubscriptionInstallmentRaw(requestParameters: UpdateSubscriptionInstallmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>>;

    /**
     * Updates an installment subscription.
     * Update an installment subscription
     */
    updateSubscriptionInstallment(requestParameters: UpdateSubscriptionInstallmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200>;

}

/**
 * 
 */
export class SubscriptionsApi extends runtime.BaseAPI implements SubscriptionsApiInterface {

    /**
     * Adds a new recurring subscription.
     * Add a recurring subscription
     */
    async addRecurringSubscriptionRaw(requestParameters: AddRecurringSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/subscriptions/recurring`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddRecurringSubscriptionRequestToJSON(requestParameters.addRecurringSubscriptionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionsIdResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new recurring subscription.
     * Add a recurring subscription
     */
    async addRecurringSubscription(requestParameters: AddRecurringSubscriptionOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200> {
        const response = await this.addRecurringSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new installment subscription.
     * Add an installment subscription
     */
    async addSubscriptionInstallmentRaw(requestParameters: AddSubscriptionInstallmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/subscriptions/installment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddSubscriptionInstallmentRequestToJSON(requestParameters.addSubscriptionInstallmentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionsIdResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new installment subscription.
     * Add an installment subscription
     */
    async addSubscriptionInstallment(requestParameters: AddSubscriptionInstallmentOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200> {
        const response = await this.addSubscriptionInstallmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancels a recurring subscription.
     * Cancel a recurring subscription
     */
    async cancelRecurringSubscriptionRaw(requestParameters: CancelRecurringSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cancelRecurringSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/subscriptions/recurring/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CancelRecurringSubscriptionRequestToJSON(requestParameters.cancelRecurringSubscriptionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionsIdResponse200FromJSON(jsonValue));
    }

    /**
     * Cancels a recurring subscription.
     * Cancel a recurring subscription
     */
    async cancelRecurringSubscription(requestParameters: CancelRecurringSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200> {
        const response = await this.cancelRecurringSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks an installment or a recurring subscription as deleted.
     * Delete a subscription
     */
    async deleteSubscriptionRaw(requestParameters: DeleteSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionsIdResponse200FromJSON(jsonValue));
    }

    /**
     * Marks an installment or a recurring subscription as deleted.
     * Delete a subscription
     */
    async deleteSubscription(requestParameters: DeleteSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200> {
        const response = await this.deleteSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns details of an installment or a recurring subscription by the deal ID.
     * Find subscription by deal
     */
    async findSubscriptionByDealRaw(requestParameters: FindSubscriptionByDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>> {
        if (requestParameters.dealId === null || requestParameters.dealId === undefined) {
            throw new runtime.RequiredError('dealId','Required parameter requestParameters.dealId was null or undefined when calling findSubscriptionByDeal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/subscriptions/find/{dealId}`.replace(`{${"dealId"}}`, encodeURIComponent(String(requestParameters.dealId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionsIdResponse200FromJSON(jsonValue));
    }

    /**
     * Returns details of an installment or a recurring subscription by the deal ID.
     * Find subscription by deal
     */
    async findSubscriptionByDeal(requestParameters: FindSubscriptionByDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200> {
        const response = await this.findSubscriptionByDealRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns details of an installment or a recurring subscription.
     * Get details of a subscription
     */
    async getSubscriptionRaw(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionsIdResponse200FromJSON(jsonValue));
    }

    /**
     * Returns details of an installment or a recurring subscription.
     * Get details of a subscription
     */
    async getSubscription(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200> {
        const response = await this.getSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all payments of an installment or recurring subscription.
     * Get all payments of a subscription
     */
    async getSubscriptionPaymentsRaw(requestParameters: GetSubscriptionPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSubscriptionPayments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/subscriptions/{id}/payments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentResponse200FromJSON(jsonValue));
    }

    /**
     * Returns all payments of an installment or recurring subscription.
     * Get all payments of a subscription
     */
    async getSubscriptionPayments(requestParameters: GetSubscriptionPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentResponse200> {
        const response = await this.getSubscriptionPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a recurring subscription.
     * Update a recurring subscription
     */
    async updateRecurringSubscriptionRaw(requestParameters: UpdateRecurringSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRecurringSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/subscriptions/recurring/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRecurringSubscriptionRequestToJSON(requestParameters.updateRecurringSubscriptionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionsIdResponse200FromJSON(jsonValue));
    }

    /**
     * Updates a recurring subscription.
     * Update a recurring subscription
     */
    async updateRecurringSubscription(requestParameters: UpdateRecurringSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200> {
        const response = await this.updateRecurringSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an installment subscription.
     * Update an installment subscription
     */
    async updateSubscriptionInstallmentRaw(requestParameters: UpdateSubscriptionInstallmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionsIdResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSubscriptionInstallment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/subscriptions/installment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSubscriptionInstallmentRequestToJSON(requestParameters.updateSubscriptionInstallmentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionsIdResponse200FromJSON(jsonValue));
    }

    /**
     * Updates an installment subscription.
     * Update an installment subscription
     */
    async updateSubscriptionInstallment(requestParameters: UpdateSubscriptionInstallmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionsIdResponse200> {
        const response = await this.updateSubscriptionInstallmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
