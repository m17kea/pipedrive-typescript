/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddOrganizationFollowerRequest,
  AddOrganizationFollowerResponse200,
  AddOrganizationRequest,
  AddOrganizationResponse200,
  DeleteOrganizationFollowerResponse200,
  DeleteOrganizationResponse200,
  DeleteOrganizationsResponse200,
  GetAssociatedActivitiesResponse200,
  GetAssociatedDealsResponse200,
  GetAssociatedFilesResponse200,
  GetAssociatedFollowersResponse2001,
  GetAssociatedMailMessagesResponse200,
  GetAssociatedUpdatesResponse200,
  GetOrganizationResponse200,
  GetOrganizationsResponse200,
  ListPermittedUsersResponse2001,
  ListPersonsResponse200,
  MergeOrganizationsRequest,
  MergeOrganizationsResponse200,
  SearchOrganizationResponse200,
  UpdateOrganizationRequest,
  UpdateOrganizationResponse200,
} from '../models';
import {
    AddOrganizationFollowerRequestFromJSON,
    AddOrganizationFollowerRequestToJSON,
    AddOrganizationFollowerResponse200FromJSON,
    AddOrganizationFollowerResponse200ToJSON,
    AddOrganizationRequestFromJSON,
    AddOrganizationRequestToJSON,
    AddOrganizationResponse200FromJSON,
    AddOrganizationResponse200ToJSON,
    DeleteOrganizationFollowerResponse200FromJSON,
    DeleteOrganizationFollowerResponse200ToJSON,
    DeleteOrganizationResponse200FromJSON,
    DeleteOrganizationResponse200ToJSON,
    DeleteOrganizationsResponse200FromJSON,
    DeleteOrganizationsResponse200ToJSON,
    GetAssociatedActivitiesResponse200FromJSON,
    GetAssociatedActivitiesResponse200ToJSON,
    GetAssociatedDealsResponse200FromJSON,
    GetAssociatedDealsResponse200ToJSON,
    GetAssociatedFilesResponse200FromJSON,
    GetAssociatedFilesResponse200ToJSON,
    GetAssociatedFollowersResponse2001FromJSON,
    GetAssociatedFollowersResponse2001ToJSON,
    GetAssociatedMailMessagesResponse200FromJSON,
    GetAssociatedMailMessagesResponse200ToJSON,
    GetAssociatedUpdatesResponse200FromJSON,
    GetAssociatedUpdatesResponse200ToJSON,
    GetOrganizationResponse200FromJSON,
    GetOrganizationResponse200ToJSON,
    GetOrganizationsResponse200FromJSON,
    GetOrganizationsResponse200ToJSON,
    ListPermittedUsersResponse2001FromJSON,
    ListPermittedUsersResponse2001ToJSON,
    ListPersonsResponse200FromJSON,
    ListPersonsResponse200ToJSON,
    MergeOrganizationsRequestFromJSON,
    MergeOrganizationsRequestToJSON,
    MergeOrganizationsResponse200FromJSON,
    MergeOrganizationsResponse200ToJSON,
    SearchOrganizationResponse200FromJSON,
    SearchOrganizationResponse200ToJSON,
    UpdateOrganizationRequestFromJSON,
    UpdateOrganizationRequestToJSON,
    UpdateOrganizationResponse200FromJSON,
    UpdateOrganizationResponse200ToJSON,
} from '../models';

export interface AddOrganizationOperationRequest {
    addOrganizationRequest?: AddOrganizationRequest;
}

export interface AddOrganizationFollowerOperationRequest {
    id: number;
    addOrganizationFollowerRequest?: AddOrganizationFollowerRequest;
}

export interface DeleteOrganizationRequest {
    id: number;
}

export interface DeleteOrganizationFollowerRequest {
    id: number;
    followerId: number;
}

export interface DeleteOrganizationsRequest {
    ids: string;
}

export interface GetOrganizationRequest {
    id: number;
}

export interface GetOrganizationActivitiesRequest {
    id: number;
    start?: number;
    limit?: number;
    done?: GetOrganizationActivitiesDoneEnum;
    exclude?: string;
}

export interface GetOrganizationDealsRequest {
    id: number;
    start?: number;
    limit?: number;
    status?: GetOrganizationDealsStatusEnum;
    sort?: string;
    onlyPrimaryAssociation?: GetOrganizationDealsOnlyPrimaryAssociationEnum;
}

export interface GetOrganizationFilesRequest {
    id: number;
    start?: number;
    limit?: number;
    includeDeletedFiles?: GetOrganizationFilesIncludeDeletedFilesEnum;
    sort?: string;
}

export interface GetOrganizationFollowersRequest {
    id: number;
}

export interface GetOrganizationMailMessagesRequest {
    id: number;
    start?: number;
    limit?: number;
}

export interface GetOrganizationPersonsRequest {
    id: number;
    start?: number;
    limit?: number;
}

export interface GetOrganizationUpdatesRequest {
    id: number;
    start?: number;
    limit?: number;
    allChanges?: string;
    items?: string;
}

export interface GetOrganizationUsersRequest {
    id: number;
}

export interface GetOrganizationsRequest {
    userId?: number;
    filterId?: number;
    firstChar?: string;
    start?: number;
    limit?: number;
    sort?: string;
}

export interface MergeOrganizationsOperationRequest {
    id: number;
    mergeOrganizationsRequest?: MergeOrganizationsRequest;
}

export interface SearchOrganizationRequest {
    term: string;
    fields?: SearchOrganizationFieldsEnum;
    exactMatch?: SearchOrganizationExactMatchEnum;
    start?: number;
    limit?: number;
}

export interface UpdateOrganizationOperationRequest {
    id: number;
    updateOrganizationRequest?: UpdateOrganizationRequest;
}

/**
 * OrganizationsApi - interface
 * 
 * @export
 * @interface OrganizationsApiInterface
 */
export interface OrganizationsApiInterface {
    /**
     * Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>.
     * @summary Add an organization
     * @param {AddOrganizationRequest} [addOrganizationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    addOrganizationRaw(requestParameters: AddOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrganizationResponse200>>;

    /**
     * Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>.
     * Add an organization
     */
    addOrganization(requestParameters: AddOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrganizationResponse200>;

    /**
     * Adds a follower to an organization.
     * @summary Add a follower to an organization
     * @param {number} id The ID of the organization
     * @param {AddOrganizationFollowerRequest} [addOrganizationFollowerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    addOrganizationFollowerRaw(requestParameters: AddOrganizationFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrganizationFollowerResponse200>>;

    /**
     * Adds a follower to an organization.
     * Add a follower to an organization
     */
    addOrganizationFollower(requestParameters: AddOrganizationFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrganizationFollowerResponse200>;

    /**
     * Marks an organization as deleted.
     * @summary Delete an organization
     * @param {number} id The ID of the organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    deleteOrganizationRaw(requestParameters: DeleteOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOrganizationResponse200>>;

    /**
     * Marks an organization as deleted.
     * Delete an organization
     */
    deleteOrganization(requestParameters: DeleteOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOrganizationResponse200>;

    /**
     * Deletes a follower from an organization. You can retrieve the `follower_id` from the <a href=\"https://developers.pipedrive.com/docs/api/v1/Organizations#getOrganizationFollowers\">List followers of an organization</a> endpoint.
     * @summary Delete a follower from an organization
     * @param {number} id The ID of the organization
     * @param {number} followerId The ID of the follower
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    deleteOrganizationFollowerRaw(requestParameters: DeleteOrganizationFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOrganizationFollowerResponse200>>;

    /**
     * Deletes a follower from an organization. You can retrieve the `follower_id` from the <a href=\"https://developers.pipedrive.com/docs/api/v1/Organizations#getOrganizationFollowers\">List followers of an organization</a> endpoint.
     * Delete a follower from an organization
     */
    deleteOrganizationFollower(requestParameters: DeleteOrganizationFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOrganizationFollowerResponse200>;

    /**
     * Marks multiple organizations as deleted.
     * @summary Delete multiple organizations in bulk
     * @param {string} ids The comma-separated IDs that will be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    deleteOrganizationsRaw(requestParameters: DeleteOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOrganizationsResponse200>>;

    /**
     * Marks multiple organizations as deleted.
     * Delete multiple organizations in bulk
     */
    deleteOrganizations(requestParameters: DeleteOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOrganizationsResponse200>;

    /**
     * Returns details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of organizationFields.
     * @summary Get details of an organization
     * @param {number} id The ID of the organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationRaw(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationResponse200>>;

    /**
     * Returns details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of organizationFields.
     * Get details of an organization
     */
    getOrganization(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationResponse200>;

    /**
     * Lists activities associated with an organization.
     * @summary List activities associated with an organization
     * @param {number} id The ID of the organization
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted returns both Done and Not done activities.
     * @param {string} [exclude] A comma-separated string of activity IDs to exclude from result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationActivitiesRaw(requestParameters: GetOrganizationActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedActivitiesResponse200>>;

    /**
     * Lists activities associated with an organization.
     * List activities associated with an organization
     */
    getOrganizationActivities(requestParameters: GetOrganizationActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedActivitiesResponse200>;

    /**
     * Lists deals associated with an organization.
     * @summary List deals associated with an organization
     * @param {number} id The ID of the organization
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are fetched.
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
     * @param {0 | 1} [onlyPrimaryAssociation] If set, only deals that are directly associated to the organization are fetched. If not set (default), all deals are fetched that are either directly or indirectly related to the organization. Indirect relations include relations through custom, organization-type fields and through persons of the given organization.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationDealsRaw(requestParameters: GetOrganizationDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedDealsResponse200>>;

    /**
     * Lists deals associated with an organization.
     * List deals associated with an organization
     */
    getOrganizationDeals(requestParameters: GetOrganizationDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedDealsResponse200>;

    /**
     * Lists files associated with an organization.
     * @summary List files attached to an organization
     * @param {number} id The ID of the organization
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [includeDeletedFiles] When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work.
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationFilesRaw(requestParameters: GetOrganizationFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedFilesResponse200>>;

    /**
     * Lists files associated with an organization.
     * List files attached to an organization
     */
    getOrganizationFiles(requestParameters: GetOrganizationFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedFilesResponse200>;

    /**
     * Lists the followers of an organization.
     * @summary List followers of an organization
     * @param {number} id The ID of the organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationFollowersRaw(requestParameters: GetOrganizationFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedFollowersResponse2001>>;

    /**
     * Lists the followers of an organization.
     * List followers of an organization
     */
    getOrganizationFollowers(requestParameters: GetOrganizationFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedFollowersResponse2001>;

    /**
     * Lists mail messages associated with an organization.
     * @summary List mail messages associated with an organization
     * @param {number} id The ID of the organization
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationMailMessagesRaw(requestParameters: GetOrganizationMailMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedMailMessagesResponse200>>;

    /**
     * Lists mail messages associated with an organization.
     * List mail messages associated with an organization
     */
    getOrganizationMailMessages(requestParameters: GetOrganizationMailMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedMailMessagesResponse200>;

    /**
     * Lists persons associated with an organization.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary List persons of an organization
     * @param {number} id The ID of the organization
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationPersonsRaw(requestParameters: GetOrganizationPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPersonsResponse200>>;

    /**
     * Lists persons associated with an organization.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * List persons of an organization
     */
    getOrganizationPersons(requestParameters: GetOrganizationPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPersonsResponse200>;

    /**
     * Lists updates about an organization.
     * @summary List updates about an organization
     * @param {number} id The ID of the organization
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [allChanges] Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted, returns changes without custom field updates.
     * @param {string} [items] A comma-separated string for filtering out item specific updates. (Possible values - activity, plannedActivity, note, file, change, deal, follower, participant, mailMessage, mailMessageWithAttachment, invoice, activityFile, document)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationUpdatesRaw(requestParameters: GetOrganizationUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedUpdatesResponse200>>;

    /**
     * Lists updates about an organization.
     * List updates about an organization
     */
    getOrganizationUpdates(requestParameters: GetOrganizationUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedUpdatesResponse200>;

    /**
     * List users permitted to access an organization.
     * @summary List permitted users
     * @param {number} id The ID of the organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationUsersRaw(requestParameters: GetOrganizationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPermittedUsersResponse2001>>;

    /**
     * List users permitted to access an organization.
     * List permitted users
     */
    getOrganizationUsers(requestParameters: GetOrganizationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPermittedUsersResponse2001>;

    /**
     * Returns all organizations.
     * @summary Get all organizations
     * @param {number} [userId] If supplied, only organizations owned by the given user will be returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;user_id&#x60; when both are supplied.
     * @param {number} [filterId] The ID of the filter to use
     * @param {string} [firstChar] If supplied, only organizations whose name starts with the specified letter will be returned (case insensitive)
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    getOrganizationsRaw(requestParameters: GetOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationsResponse200>>;

    /**
     * Returns all organizations.
     * Get all organizations
     */
    getOrganizations(requestParameters: GetOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationsResponse200>;

    /**
     * Merges an organization with another organization. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-organizations\" target=\"_blank\" rel=\"noopener noreferrer\">merging two organizations</a>.
     * @summary Merge two organizations
     * @param {number} id The ID of the organization
     * @param {MergeOrganizationsRequest} [mergeOrganizationsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    mergeOrganizationsRaw(requestParameters: MergeOrganizationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MergeOrganizationsResponse200>>;

    /**
     * Merges an organization with another organization. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-organizations\" target=\"_blank\" rel=\"noopener noreferrer\">merging two organizations</a>.
     * Merge two organizations
     */
    mergeOrganizations(requestParameters: MergeOrganizationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MergeOrganizationsResponse200>;

    /**
     * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * @summary Search organizations
     * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;).
     * @param {'address' | 'custom_fields' | 'notes' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them.
     * @param {boolean} [exactMatch] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    searchOrganizationRaw(requestParameters: SearchOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchOrganizationResponse200>>;

    /**
     * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * Search organizations
     */
    searchOrganization(requestParameters: SearchOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchOrganizationResponse200>;

    /**
     * Updates the properties of an organization.
     * @summary Update an organization
     * @param {number} id The ID of the organization
     * @param {UpdateOrganizationRequest} [updateOrganizationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApiInterface
     */
    updateOrganizationRaw(requestParameters: UpdateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateOrganizationResponse200>>;

    /**
     * Updates the properties of an organization.
     * Update an organization
     */
    updateOrganization(requestParameters: UpdateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateOrganizationResponse200>;

}

/**
 * 
 */
export class OrganizationsApi extends runtime.BaseAPI implements OrganizationsApiInterface {

    /**
     * Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>.
     * Add an organization
     */
    async addOrganizationRaw(requestParameters: AddOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrganizationResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOrganizationRequestToJSON(requestParameters.addOrganizationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddOrganizationResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-an-organization\" target=\"_blank\" rel=\"noopener noreferrer\">adding an organization</a>.
     * Add an organization
     */
    async addOrganization(requestParameters: AddOrganizationOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrganizationResponse200> {
        const response = await this.addOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a follower to an organization.
     * Add a follower to an organization
     */
    async addOrganizationFollowerRaw(requestParameters: AddOrganizationFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrganizationFollowerResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addOrganizationFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/organizations/{id}/followers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOrganizationFollowerRequestToJSON(requestParameters.addOrganizationFollowerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddOrganizationFollowerResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a follower to an organization.
     * Add a follower to an organization
     */
    async addOrganizationFollower(requestParameters: AddOrganizationFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrganizationFollowerResponse200> {
        const response = await this.addOrganizationFollowerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks an organization as deleted.
     * Delete an organization
     */
    async deleteOrganizationRaw(requestParameters: DeleteOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOrganizationResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteOrganizationResponse200FromJSON(jsonValue));
    }

    /**
     * Marks an organization as deleted.
     * Delete an organization
     */
    async deleteOrganization(requestParameters: DeleteOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOrganizationResponse200> {
        const response = await this.deleteOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a follower from an organization. You can retrieve the `follower_id` from the <a href=\"https://developers.pipedrive.com/docs/api/v1/Organizations#getOrganizationFollowers\">List followers of an organization</a> endpoint.
     * Delete a follower from an organization
     */
    async deleteOrganizationFollowerRaw(requestParameters: DeleteOrganizationFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOrganizationFollowerResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrganizationFollower.');
        }

        if (requestParameters.followerId === null || requestParameters.followerId === undefined) {
            throw new runtime.RequiredError('followerId','Required parameter requestParameters.followerId was null or undefined when calling deleteOrganizationFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/organizations/{id}/followers/{follower_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"follower_id"}}`, encodeURIComponent(String(requestParameters.followerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteOrganizationFollowerResponse200FromJSON(jsonValue));
    }

    /**
     * Deletes a follower from an organization. You can retrieve the `follower_id` from the <a href=\"https://developers.pipedrive.com/docs/api/v1/Organizations#getOrganizationFollowers\">List followers of an organization</a> endpoint.
     * Delete a follower from an organization
     */
    async deleteOrganizationFollower(requestParameters: DeleteOrganizationFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOrganizationFollowerResponse200> {
        const response = await this.deleteOrganizationFollowerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks multiple organizations as deleted.
     * Delete multiple organizations in bulk
     */
    async deleteOrganizationsRaw(requestParameters: DeleteOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOrganizationsResponse200>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError('ids','Required parameter requestParameters.ids was null or undefined when calling deleteOrganizations.');
        }

        const queryParameters: any = {};

        if (requestParameters.ids !== undefined) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/organizations`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteOrganizationsResponse200FromJSON(jsonValue));
    }

    /**
     * Marks multiple organizations as deleted.
     * Delete multiple organizations in bulk
     */
    async deleteOrganizations(requestParameters: DeleteOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOrganizationsResponse200> {
        const response = await this.deleteOrganizationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of organizationFields.
     * Get details of an organization
     */
    async getOrganizationRaw(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationResponse200FromJSON(jsonValue));
    }

    /**
     * Returns details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of organizationFields.
     * Get details of an organization
     */
    async getOrganization(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationResponse200> {
        const response = await this.getOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists activities associated with an organization.
     * List activities associated with an organization
     */
    async getOrganizationActivitiesRaw(requestParameters: GetOrganizationActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedActivitiesResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationActivities.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.done !== undefined) {
            queryParameters['done'] = requestParameters.done;
        }

        if (requestParameters.exclude !== undefined) {
            queryParameters['exclude'] = requestParameters.exclude;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["activities:read", "activities:full"]);
        }

        const response = await this.request({
            path: `/organizations/{id}/activities`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedActivitiesResponse200FromJSON(jsonValue));
    }

    /**
     * Lists activities associated with an organization.
     * List activities associated with an organization
     */
    async getOrganizationActivities(requestParameters: GetOrganizationActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedActivitiesResponse200> {
        const response = await this.getOrganizationActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists deals associated with an organization.
     * List deals associated with an organization
     */
    async getOrganizationDealsRaw(requestParameters: GetOrganizationDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedDealsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationDeals.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.onlyPrimaryAssociation !== undefined) {
            queryParameters['only_primary_association'] = requestParameters.onlyPrimaryAssociation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/organizations/{id}/deals`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedDealsResponse200FromJSON(jsonValue));
    }

    /**
     * Lists deals associated with an organization.
     * List deals associated with an organization
     */
    async getOrganizationDeals(requestParameters: GetOrganizationDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedDealsResponse200> {
        const response = await this.getOrganizationDealsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists files associated with an organization.
     * List files attached to an organization
     */
    async getOrganizationFilesRaw(requestParameters: GetOrganizationFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedFilesResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationFiles.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.includeDeletedFiles !== undefined) {
            queryParameters['include_deleted_files'] = requestParameters.includeDeletedFiles;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/organizations/{id}/files`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedFilesResponse200FromJSON(jsonValue));
    }

    /**
     * Lists files associated with an organization.
     * List files attached to an organization
     */
    async getOrganizationFiles(requestParameters: GetOrganizationFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedFilesResponse200> {
        const response = await this.getOrganizationFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists the followers of an organization.
     * List followers of an organization
     */
    async getOrganizationFollowersRaw(requestParameters: GetOrganizationFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedFollowersResponse2001>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationFollowers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/organizations/{id}/followers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedFollowersResponse2001FromJSON(jsonValue));
    }

    /**
     * Lists the followers of an organization.
     * List followers of an organization
     */
    async getOrganizationFollowers(requestParameters: GetOrganizationFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedFollowersResponse2001> {
        const response = await this.getOrganizationFollowersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists mail messages associated with an organization.
     * List mail messages associated with an organization
     */
    async getOrganizationMailMessagesRaw(requestParameters: GetOrganizationMailMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedMailMessagesResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationMailMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["mail:read", "mail:full"]);
        }

        const response = await this.request({
            path: `/organizations/{id}/mailMessages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedMailMessagesResponse200FromJSON(jsonValue));
    }

    /**
     * Lists mail messages associated with an organization.
     * List mail messages associated with an organization
     */
    async getOrganizationMailMessages(requestParameters: GetOrganizationMailMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedMailMessagesResponse200> {
        const response = await this.getOrganizationMailMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists persons associated with an organization.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * List persons of an organization
     */
    async getOrganizationPersonsRaw(requestParameters: GetOrganizationPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPersonsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationPersons.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/organizations/{id}/persons`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPersonsResponse200FromJSON(jsonValue));
    }

    /**
     * Lists persons associated with an organization.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * List persons of an organization
     */
    async getOrganizationPersons(requestParameters: GetOrganizationPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPersonsResponse200> {
        const response = await this.getOrganizationPersonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists updates about an organization.
     * List updates about an organization
     */
    async getOrganizationUpdatesRaw(requestParameters: GetOrganizationUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedUpdatesResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationUpdates.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.allChanges !== undefined) {
            queryParameters['all_changes'] = requestParameters.allChanges;
        }

        if (requestParameters.items !== undefined) {
            queryParameters['items'] = requestParameters.items;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recents:read"]);
        }

        const response = await this.request({
            path: `/organizations/{id}/flow`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedUpdatesResponse200FromJSON(jsonValue));
    }

    /**
     * Lists updates about an organization.
     * List updates about an organization
     */
    async getOrganizationUpdates(requestParameters: GetOrganizationUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedUpdatesResponse200> {
        const response = await this.getOrganizationUpdatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List users permitted to access an organization.
     * List permitted users
     */
    async getOrganizationUsersRaw(requestParameters: GetOrganizationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPermittedUsersResponse2001>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/organizations/{id}/permittedUsers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPermittedUsersResponse2001FromJSON(jsonValue));
    }

    /**
     * List users permitted to access an organization.
     * List permitted users
     */
    async getOrganizationUsers(requestParameters: GetOrganizationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPermittedUsersResponse2001> {
        const response = await this.getOrganizationUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all organizations.
     * Get all organizations
     */
    async getOrganizationsRaw(requestParameters: GetOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationsResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter_id'] = requestParameters.filterId;
        }

        if (requestParameters.firstChar !== undefined) {
            queryParameters['first_char'] = requestParameters.firstChar;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns all organizations.
     * Get all organizations
     */
    async getOrganizations(requestParameters: GetOrganizationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationsResponse200> {
        const response = await this.getOrganizationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Merges an organization with another organization. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-organizations\" target=\"_blank\" rel=\"noopener noreferrer\">merging two organizations</a>.
     * Merge two organizations
     */
    async mergeOrganizationsRaw(requestParameters: MergeOrganizationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MergeOrganizationsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mergeOrganizations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/organizations/{id}/merge`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MergeOrganizationsRequestToJSON(requestParameters.mergeOrganizationsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MergeOrganizationsResponse200FromJSON(jsonValue));
    }

    /**
     * Merges an organization with another organization. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-organizations\" target=\"_blank\" rel=\"noopener noreferrer\">merging two organizations</a>.
     * Merge two organizations
     */
    async mergeOrganizations(requestParameters: MergeOrganizationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MergeOrganizationsResponse200> {
        const response = await this.mergeOrganizationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * Search organizations
     */
    async searchOrganizationRaw(requestParameters: SearchOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchOrganizationResponse200>> {
        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling searchOrganization.');
        }

        const queryParameters: any = {};

        if (requestParameters.term !== undefined) {
            queryParameters['term'] = requestParameters.term;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.exactMatch !== undefined) {
            queryParameters['exact_match'] = requestParameters.exactMatch;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:read", "contacts:full", "search:read"]);
        }

        const response = await this.request({
            path: `/organizations/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchOrganizationResponse200FromJSON(jsonValue));
    }

    /**
     * Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * Search organizations
     */
    async searchOrganization(requestParameters: SearchOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchOrganizationResponse200> {
        const response = await this.searchOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the properties of an organization.
     * Update an organization
     */
    async updateOrganizationRaw(requestParameters: UpdateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateOrganizationResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationRequestToJSON(requestParameters.updateOrganizationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateOrganizationResponse200FromJSON(jsonValue));
    }

    /**
     * Updates the properties of an organization.
     * Update an organization
     */
    async updateOrganization(requestParameters: UpdateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateOrganizationResponse200> {
        const response = await this.updateOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetOrganizationActivitiesDoneEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetOrganizationDealsStatusEnum {
    Open = 'open',
    Won = 'won',
    Lost = 'lost',
    Deleted = 'deleted',
    AllNotDeleted = 'all_not_deleted'
}
/**
  * @export
  * @enum {string}
  */
export enum GetOrganizationDealsOnlyPrimaryAssociationEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetOrganizationFilesIncludeDeletedFilesEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum SearchOrganizationFieldsEnum {
    Address = 'address',
    CustomFields = 'custom_fields',
    Notes = 'notes',
    Name = 'name'
}
/**
  * @export
  * @enum {string}
  */
export enum SearchOrganizationExactMatchEnum {
    True = true,
    False = false
}
