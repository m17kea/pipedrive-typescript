/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddOrganizationRelationshipRequest,
  AddOrganizationRelationshipResponse200,
  DeleteOrganizationRelationshipResponse200,
  GetOrganizationRelationshipResponse200,
  GetOrganizationRelationshipsResponse200,
  OrganizationRelationship,
  UpdateOrganizationRelationshipResponse200,
} from '../models';
import {
    AddOrganizationRelationshipRequestFromJSON,
    AddOrganizationRelationshipRequestToJSON,
    AddOrganizationRelationshipResponse200FromJSON,
    AddOrganizationRelationshipResponse200ToJSON,
    DeleteOrganizationRelationshipResponse200FromJSON,
    DeleteOrganizationRelationshipResponse200ToJSON,
    GetOrganizationRelationshipResponse200FromJSON,
    GetOrganizationRelationshipResponse200ToJSON,
    GetOrganizationRelationshipsResponse200FromJSON,
    GetOrganizationRelationshipsResponse200ToJSON,
    OrganizationRelationshipFromJSON,
    OrganizationRelationshipToJSON,
    UpdateOrganizationRelationshipResponse200FromJSON,
    UpdateOrganizationRelationshipResponse200ToJSON,
} from '../models';

export interface AddOrganizationRelationshipOperationRequest {
    addOrganizationRelationshipRequest?: AddOrganizationRelationshipRequest;
}

export interface DeleteOrganizationRelationshipRequest {
    id: number;
}

export interface GetOrganizationRelationshipRequest {
    id: number;
    orgId?: number;
}

export interface GetOrganizationRelationshipsRequest {
    orgId: number;
}

export interface UpdateOrganizationRelationshipRequest {
    id: number;
    organizationRelationship?: OrganizationRelationship;
}

/**
 * OrganizationRelationshipsApi - interface
 * 
 * @export
 * @interface OrganizationRelationshipsApiInterface
 */
export interface OrganizationRelationshipsApiInterface {
    /**
     * Creates and returns an organization relationship.
     * @summary Create an organization relationship
     * @param {AddOrganizationRelationshipRequest} [addOrganizationRelationshipRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApiInterface
     */
    addOrganizationRelationshipRaw(requestParameters: AddOrganizationRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrganizationRelationshipResponse200>>;

    /**
     * Creates and returns an organization relationship.
     * Create an organization relationship
     */
    addOrganizationRelationship(requestParameters: AddOrganizationRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrganizationRelationshipResponse200>;

    /**
     * Deletes an organization relationship and returns the deleted ID.
     * @summary Delete an organization relationship
     * @param {number} id The ID of the organization relationship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApiInterface
     */
    deleteOrganizationRelationshipRaw(requestParameters: DeleteOrganizationRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOrganizationRelationshipResponse200>>;

    /**
     * Deletes an organization relationship and returns the deleted ID.
     * Delete an organization relationship
     */
    deleteOrganizationRelationship(requestParameters: DeleteOrganizationRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOrganizationRelationshipResponse200>;

    /**
     * Finds and returns an organization relationship from its ID.
     * @summary Get one organization relationship
     * @param {number} id The ID of the organization relationship
     * @param {number} [orgId] The ID of the base organization for the returned calculated values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApiInterface
     */
    getOrganizationRelationshipRaw(requestParameters: GetOrganizationRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationRelationshipResponse200>>;

    /**
     * Finds and returns an organization relationship from its ID.
     * Get one organization relationship
     */
    getOrganizationRelationship(requestParameters: GetOrganizationRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationRelationshipResponse200>;

    /**
     * Gets all of the relationships for a supplied organization ID.
     * @summary Get all relationships for organization
     * @param {number} orgId The ID of the organization to get relationships for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApiInterface
     */
    getOrganizationRelationshipsRaw(requestParameters: GetOrganizationRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationRelationshipsResponse200>>;

    /**
     * Gets all of the relationships for a supplied organization ID.
     * Get all relationships for organization
     */
    getOrganizationRelationships(requestParameters: GetOrganizationRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationRelationshipsResponse200>;

    /**
     * Updates and returns an organization relationship.
     * @summary Update an organization relationship
     * @param {number} id The ID of the organization relationship
     * @param {OrganizationRelationship} [organizationRelationship] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationRelationshipsApiInterface
     */
    updateOrganizationRelationshipRaw(requestParameters: UpdateOrganizationRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateOrganizationRelationshipResponse200>>;

    /**
     * Updates and returns an organization relationship.
     * Update an organization relationship
     */
    updateOrganizationRelationship(requestParameters: UpdateOrganizationRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateOrganizationRelationshipResponse200>;

}

/**
 * 
 */
export class OrganizationRelationshipsApi extends runtime.BaseAPI implements OrganizationRelationshipsApiInterface {

    /**
     * Creates and returns an organization relationship.
     * Create an organization relationship
     */
    async addOrganizationRelationshipRaw(requestParameters: AddOrganizationRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrganizationRelationshipResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/organizationRelationships`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOrganizationRelationshipRequestToJSON(requestParameters.addOrganizationRelationshipRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddOrganizationRelationshipResponse200FromJSON(jsonValue));
    }

    /**
     * Creates and returns an organization relationship.
     * Create an organization relationship
     */
    async addOrganizationRelationship(requestParameters: AddOrganizationRelationshipOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrganizationRelationshipResponse200> {
        const response = await this.addOrganizationRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an organization relationship and returns the deleted ID.
     * Delete an organization relationship
     */
    async deleteOrganizationRelationshipRaw(requestParameters: DeleteOrganizationRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOrganizationRelationshipResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrganizationRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/organizationRelationships/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteOrganizationRelationshipResponse200FromJSON(jsonValue));
    }

    /**
     * Deletes an organization relationship and returns the deleted ID.
     * Delete an organization relationship
     */
    async deleteOrganizationRelationship(requestParameters: DeleteOrganizationRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOrganizationRelationshipResponse200> {
        const response = await this.deleteOrganizationRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Finds and returns an organization relationship from its ID.
     * Get one organization relationship
     */
    async getOrganizationRelationshipRaw(requestParameters: GetOrganizationRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationRelationshipResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationRelationship.');
        }

        const queryParameters: any = {};

        if (requestParameters.orgId !== undefined) {
            queryParameters['org_id'] = requestParameters.orgId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/organizationRelationships/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationRelationshipResponse200FromJSON(jsonValue));
    }

    /**
     * Finds and returns an organization relationship from its ID.
     * Get one organization relationship
     */
    async getOrganizationRelationship(requestParameters: GetOrganizationRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationRelationshipResponse200> {
        const response = await this.getOrganizationRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all of the relationships for a supplied organization ID.
     * Get all relationships for organization
     */
    async getOrganizationRelationshipsRaw(requestParameters: GetOrganizationRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationRelationshipsResponse200>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling getOrganizationRelationships.');
        }

        const queryParameters: any = {};

        if (requestParameters.orgId !== undefined) {
            queryParameters['org_id'] = requestParameters.orgId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/organizationRelationships`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationRelationshipsResponse200FromJSON(jsonValue));
    }

    /**
     * Gets all of the relationships for a supplied organization ID.
     * Get all relationships for organization
     */
    async getOrganizationRelationships(requestParameters: GetOrganizationRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationRelationshipsResponse200> {
        const response = await this.getOrganizationRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates and returns an organization relationship.
     * Update an organization relationship
     */
    async updateOrganizationRelationshipRaw(requestParameters: UpdateOrganizationRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateOrganizationRelationshipResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrganizationRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:full"]);
        }

        const response = await this.request({
            path: `/organizationRelationships/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationRelationshipToJSON(requestParameters.organizationRelationship),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateOrganizationRelationshipResponse200FromJSON(jsonValue));
    }

    /**
     * Updates and returns an organization relationship.
     * Update an organization relationship
     */
    async updateOrganizationRelationship(requestParameters: UpdateOrganizationRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateOrganizationRelationshipResponse200> {
        const response = await this.updateOrganizationRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
