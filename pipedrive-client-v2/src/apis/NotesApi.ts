/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddNoteRequest,
  CommentPostPutObject,
  DeleteCommentResponse200,
  DeleteNoteResponse200,
  GetCommentsResponse200,
  GetNotesResponse200,
  NoteRequest,
  OneCommentResponse200,
  OneNoteResponse200,
} from '../models';
import {
    AddNoteRequestFromJSON,
    AddNoteRequestToJSON,
    CommentPostPutObjectFromJSON,
    CommentPostPutObjectToJSON,
    DeleteCommentResponse200FromJSON,
    DeleteCommentResponse200ToJSON,
    DeleteNoteResponse200FromJSON,
    DeleteNoteResponse200ToJSON,
    GetCommentsResponse200FromJSON,
    GetCommentsResponse200ToJSON,
    GetNotesResponse200FromJSON,
    GetNotesResponse200ToJSON,
    NoteRequestFromJSON,
    NoteRequestToJSON,
    OneCommentResponse200FromJSON,
    OneCommentResponse200ToJSON,
    OneNoteResponse200FromJSON,
    OneNoteResponse200ToJSON,
} from '../models';

export interface AddNoteOperationRequest {
    addNoteRequest?: AddNoteRequest;
}

export interface AddNoteCommentRequest {
    id: number;
    commentPostPutObject?: CommentPostPutObject;
}

export interface DeleteCommentRequest {
    id: number;
    commentId: string;
}

export interface DeleteNoteRequest {
    id: number;
}

export interface GetCommentRequest {
    id: number;
    commentId: string;
}

export interface GetNoteRequest {
    id: number;
}

export interface GetNoteCommentsRequest {
    id: number;
    start?: number;
    limit?: number;
}

export interface GetNotesRequest {
    userId?: number;
    leadId?: string;
    dealId?: number;
    personId?: number;
    orgId?: number;
    start?: number;
    limit?: number;
    sort?: string;
    startDate?: Date;
    endDate?: Date;
    pinnedToLeadFlag?: GetNotesPinnedToLeadFlagEnum;
    pinnedToDealFlag?: GetNotesPinnedToDealFlagEnum;
    pinnedToOrganizationFlag?: GetNotesPinnedToOrganizationFlagEnum;
    pinnedToPersonFlag?: GetNotesPinnedToPersonFlagEnum;
}

export interface UpdateCommentForNoteRequest {
    id: number;
    commentId: string;
    commentPostPutObject?: CommentPostPutObject;
}

export interface UpdateNoteRequest {
    id: number;
    noteRequest?: NoteRequest;
}

/**
 * NotesApi - interface
 * 
 * @export
 * @interface NotesApiInterface
 */
export interface NotesApiInterface {
    /**
     * Adds a new note.
     * @summary Add a note
     * @param {AddNoteRequest} [addNoteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApiInterface
     */
    addNoteRaw(requestParameters: AddNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OneNoteResponse200>>;

    /**
     * Adds a new note.
     * Add a note
     */
    addNote(requestParameters: AddNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OneNoteResponse200>;

    /**
     * Adds a new comment to a note.
     * @summary Add a comment to a note
     * @param {number} id The ID of the note
     * @param {CommentPostPutObject} [commentPostPutObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApiInterface
     */
    addNoteCommentRaw(requestParameters: AddNoteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OneCommentResponse200>>;

    /**
     * Adds a new comment to a note.
     * Add a comment to a note
     */
    addNoteComment(requestParameters: AddNoteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OneCommentResponse200>;

    /**
     * Deletes a comment.
     * @summary Delete a comment related to a note
     * @param {number} id The ID of the note
     * @param {string} commentId The ID of the comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApiInterface
     */
    deleteCommentRaw(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCommentResponse200>>;

    /**
     * Deletes a comment.
     * Delete a comment related to a note
     */
    deleteComment(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCommentResponse200>;

    /**
     * Deletes a specific note.
     * @summary Delete a note
     * @param {number} id The ID of the note
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApiInterface
     */
    deleteNoteRaw(requestParameters: DeleteNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteNoteResponse200>>;

    /**
     * Deletes a specific note.
     * Delete a note
     */
    deleteNote(requestParameters: DeleteNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteNoteResponse200>;

    /**
     * Returns the details of a comment.
     * @summary Get one comment
     * @param {number} id The ID of the note
     * @param {string} commentId The ID of the comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApiInterface
     */
    getCommentRaw(requestParameters: GetCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OneCommentResponse200>>;

    /**
     * Returns the details of a comment.
     * Get one comment
     */
    getComment(requestParameters: GetCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OneCommentResponse200>;

    /**
     * Returns details about a specific note.
     * @summary Get one note
     * @param {number} id The ID of the note
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApiInterface
     */
    getNoteRaw(requestParameters: GetNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OneNoteResponse200>>;

    /**
     * Returns details about a specific note.
     * Get one note
     */
    getNote(requestParameters: GetNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OneNoteResponse200>;

    /**
     * Returns all comments associated with a note.
     * @summary Get all comments for a note
     * @param {number} id The ID of the note
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApiInterface
     */
    getNoteCommentsRaw(requestParameters: GetNoteCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommentsResponse200>>;

    /**
     * Returns all comments associated with a note.
     * Get all comments for a note
     */
    getNoteComments(requestParameters: GetNoteCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommentsResponse200>;

    /**
     * Returns all notes.
     * @summary Get all notes
     * @param {number} [userId] The ID of the user whose notes to fetch. If omitted, notes by all users will be returned.
     * @param {string} [leadId] The ID of the lead which notes to fetch. If omitted, notes about all leads will be returned.
     * @param {number} [dealId] The ID of the deal which notes to fetch. If omitted, notes about all deals will be returned.
     * @param {number} [personId] The ID of the person whose notes to fetch. If omitted, notes about all persons will be returned.
     * @param {number} [orgId] The ID of the organization which notes to fetch. If omitted, notes about all organizations will be returned.
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;content&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;.
     * @param {Date} [startDate] The date in format of YYYY-MM-DD from which notes to fetch
     * @param {Date} [endDate] The date in format of YYYY-MM-DD until which notes to fetch to
     * @param {0 | 1} [pinnedToLeadFlag] If set, the results are filtered by note to lead pinning state
     * @param {0 | 1} [pinnedToDealFlag] If set, the results are filtered by note to deal pinning state
     * @param {0 | 1} [pinnedToOrganizationFlag] If set, the results are filtered by note to organization pinning state
     * @param {0 | 1} [pinnedToPersonFlag] If set, the results are filtered by note to person pinning state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApiInterface
     */
    getNotesRaw(requestParameters: GetNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNotesResponse200>>;

    /**
     * Returns all notes.
     * Get all notes
     */
    getNotes(requestParameters: GetNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNotesResponse200>;

    /**
     * Updates a comment related to a note.
     * @summary Update a comment related to a note
     * @param {number} id The ID of the note
     * @param {string} commentId The ID of the comment
     * @param {CommentPostPutObject} [commentPostPutObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApiInterface
     */
    updateCommentForNoteRaw(requestParameters: UpdateCommentForNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OneCommentResponse200>>;

    /**
     * Updates a comment related to a note.
     * Update a comment related to a note
     */
    updateCommentForNote(requestParameters: UpdateCommentForNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OneCommentResponse200>;

    /**
     * Updates a note.
     * @summary Update a note
     * @param {number} id The ID of the note
     * @param {NoteRequest} [noteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotesApiInterface
     */
    updateNoteRaw(requestParameters: UpdateNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OneNoteResponse200>>;

    /**
     * Updates a note.
     * Update a note
     */
    updateNote(requestParameters: UpdateNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OneNoteResponse200>;

}

/**
 * 
 */
export class NotesApi extends runtime.BaseAPI implements NotesApiInterface {

    /**
     * Adds a new note.
     * Add a note
     */
    async addNoteRaw(requestParameters: AddNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OneNoteResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full", "contacts:full"]);
        }

        const response = await this.request({
            path: `/notes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddNoteRequestToJSON(requestParameters.addNoteRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OneNoteResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new note.
     * Add a note
     */
    async addNote(requestParameters: AddNoteOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OneNoteResponse200> {
        const response = await this.addNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new comment to a note.
     * Add a comment to a note
     */
    async addNoteCommentRaw(requestParameters: AddNoteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OneCommentResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addNoteComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full", "contacts:full"]);
        }

        const response = await this.request({
            path: `/notes/{id}/comments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentPostPutObjectToJSON(requestParameters.commentPostPutObject),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OneCommentResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new comment to a note.
     * Add a comment to a note
     */
    async addNoteComment(requestParameters: AddNoteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OneCommentResponse200> {
        const response = await this.addNoteCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a comment.
     * Delete a comment related to a note
     */
    async deleteCommentRaw(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCommentResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling deleteComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full", "contacts:full"]);
        }

        const response = await this.request({
            path: `/notes/{id}/comments/{commentId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteCommentResponse200FromJSON(jsonValue));
    }

    /**
     * Deletes a comment.
     * Delete a comment related to a note
     */
    async deleteComment(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCommentResponse200> {
        const response = await this.deleteCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific note.
     * Delete a note
     */
    async deleteNoteRaw(requestParameters: DeleteNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteNoteResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full", "contacts:full"]);
        }

        const response = await this.request({
            path: `/notes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteNoteResponse200FromJSON(jsonValue));
    }

    /**
     * Deletes a specific note.
     * Delete a note
     */
    async deleteNote(requestParameters: DeleteNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteNoteResponse200> {
        const response = await this.deleteNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of a comment.
     * Get one comment
     */
    async getCommentRaw(requestParameters: GetCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OneCommentResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling getComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full", "contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/notes/{id}/comments/{commentId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OneCommentResponse200FromJSON(jsonValue));
    }

    /**
     * Returns the details of a comment.
     * Get one comment
     */
    async getComment(requestParameters: GetCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OneCommentResponse200> {
        const response = await this.getCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns details about a specific note.
     * Get one note
     */
    async getNoteRaw(requestParameters: GetNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OneNoteResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full", "contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/notes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OneNoteResponse200FromJSON(jsonValue));
    }

    /**
     * Returns details about a specific note.
     * Get one note
     */
    async getNote(requestParameters: GetNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OneNoteResponse200> {
        const response = await this.getNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all comments associated with a note.
     * Get all comments for a note
     */
    async getNoteCommentsRaw(requestParameters: GetNoteCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommentsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNoteComments.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full", "contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/notes/{id}/comments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommentsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns all comments associated with a note.
     * Get all comments for a note
     */
    async getNoteComments(requestParameters: GetNoteCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommentsResponse200> {
        const response = await this.getNoteCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all notes.
     * Get all notes
     */
    async getNotesRaw(requestParameters: GetNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNotesResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.leadId !== undefined) {
            queryParameters['lead_id'] = requestParameters.leadId;
        }

        if (requestParameters.dealId !== undefined) {
            queryParameters['deal_id'] = requestParameters.dealId;
        }

        if (requestParameters.personId !== undefined) {
            queryParameters['person_id'] = requestParameters.personId;
        }

        if (requestParameters.orgId !== undefined) {
            queryParameters['org_id'] = requestParameters.orgId;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.pinnedToLeadFlag !== undefined) {
            queryParameters['pinned_to_lead_flag'] = requestParameters.pinnedToLeadFlag;
        }

        if (requestParameters.pinnedToDealFlag !== undefined) {
            queryParameters['pinned_to_deal_flag'] = requestParameters.pinnedToDealFlag;
        }

        if (requestParameters.pinnedToOrganizationFlag !== undefined) {
            queryParameters['pinned_to_organization_flag'] = requestParameters.pinnedToOrganizationFlag;
        }

        if (requestParameters.pinnedToPersonFlag !== undefined) {
            queryParameters['pinned_to_person_flag'] = requestParameters.pinnedToPersonFlag;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full", "contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/notes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNotesResponse200FromJSON(jsonValue));
    }

    /**
     * Returns all notes.
     * Get all notes
     */
    async getNotes(requestParameters: GetNotesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNotesResponse200> {
        const response = await this.getNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a comment related to a note.
     * Update a comment related to a note
     */
    async updateCommentForNoteRaw(requestParameters: UpdateCommentForNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OneCommentResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCommentForNote.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling updateCommentForNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full", "contacts:full"]);
        }

        const response = await this.request({
            path: `/notes/{id}/comments/{commentId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CommentPostPutObjectToJSON(requestParameters.commentPostPutObject),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OneCommentResponse200FromJSON(jsonValue));
    }

    /**
     * Updates a comment related to a note.
     * Update a comment related to a note
     */
    async updateCommentForNote(requestParameters: UpdateCommentForNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OneCommentResponse200> {
        const response = await this.updateCommentForNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a note.
     * Update a note
     */
    async updateNoteRaw(requestParameters: UpdateNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OneNoteResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full", "contacts:full"]);
        }

        const response = await this.request({
            path: `/notes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NoteRequestToJSON(requestParameters.noteRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OneNoteResponse200FromJSON(jsonValue));
    }

    /**
     * Updates a note.
     * Update a note
     */
    async updateNote(requestParameters: UpdateNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OneNoteResponse200> {
        const response = await this.updateNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetNotesPinnedToLeadFlagEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetNotesPinnedToDealFlagEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetNotesPinnedToOrganizationFlagEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetNotesPinnedToPersonFlagEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
