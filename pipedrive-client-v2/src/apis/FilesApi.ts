/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddFileAndLinkItResponse200,
  AddFileResponse200,
  DeleteFileResponse200,
  GetFileResponse200,
  GetFilesResponse200,
  LinkFileToItemResponse200,
  UpdateFileResponse200,
} from '../models';
import {
    AddFileAndLinkItResponse200FromJSON,
    AddFileAndLinkItResponse200ToJSON,
    AddFileResponse200FromJSON,
    AddFileResponse200ToJSON,
    DeleteFileResponse200FromJSON,
    DeleteFileResponse200ToJSON,
    GetFileResponse200FromJSON,
    GetFileResponse200ToJSON,
    GetFilesResponse200FromJSON,
    GetFilesResponse200ToJSON,
    LinkFileToItemResponse200FromJSON,
    LinkFileToItemResponse200ToJSON,
    UpdateFileResponse200FromJSON,
    UpdateFileResponse200ToJSON,
} from '../models';

export interface AddFileRequest {
    file: Blob;
    dealId?: number;
    personId?: number;
    orgId?: number;
    productId?: number;
    activityId?: number;
}

export interface AddFileAndLinkItRequest {
    fileType: AddFileAndLinkItFileTypeEnum;
    title: string;
    itemType: AddFileAndLinkItItemTypeEnum;
    itemId: number;
    remoteLocation: AddFileAndLinkItRemoteLocationEnum;
}

export interface DeleteFileRequest {
    id: number;
}

export interface DownloadFileRequest {
    id: number;
}

export interface GetFileRequest {
    id: number;
}

export interface GetFilesRequest {
    start?: number;
    limit?: number;
    includeDeletedFiles?: GetFilesIncludeDeletedFilesEnum;
    sort?: string;
}

export interface LinkFileToItemRequest {
    itemType: LinkFileToItemItemTypeEnum;
    itemId: number;
    remoteId: string;
    remoteLocation: LinkFileToItemRemoteLocationEnum;
}

export interface UpdateFileRequest {
    id: number;
    name?: string;
    description?: string;
}

/**
 * FilesApi - interface
 * 
 * @export
 * @interface FilesApiInterface
 */
export interface FilesApiInterface {
    /**
     * Lets you upload a file and associate it with a deal, person, organization, activity or product. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a file</a>.
     * @summary Add file
     * @param {Blob} file A single file, supplied in the multipart/form-data encoding and contained within the given boundaries
     * @param {number} [dealId] The ID of the deal to associate file(s) with
     * @param {number} [personId] The ID of the person to associate file(s) with
     * @param {number} [orgId] The ID of the organization to associate file(s) with
     * @param {number} [productId] The ID of the product to associate file(s) with
     * @param {number} [activityId] The ID of the activity to associate file(s) with
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    addFileRaw(requestParameters: AddFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddFileResponse200>>;

    /**
     * Lets you upload a file and associate it with a deal, person, organization, activity or product. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a file</a>.
     * Add file
     */
    addFile(requestParameters: AddFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddFileResponse200>;

    /**
     * Creates a new empty file in the remote location (`googledrive`) that will be linked to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
     * @summary Create a remote file and link it to an item
     * @param {string} fileType The file type
     * @param {string} title The title of the file
     * @param {string} itemType The item type
     * @param {number} itemId The ID of the item to associate the file with
     * @param {string} remoteLocation The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    addFileAndLinkItRaw(requestParameters: AddFileAndLinkItRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddFileAndLinkItResponse200>>;

    /**
     * Creates a new empty file in the remote location (`googledrive`) that will be linked to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
     * Create a remote file and link it to an item
     */
    addFileAndLinkIt(requestParameters: AddFileAndLinkItRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddFileAndLinkItResponse200>;

    /**
     * Marks a file as deleted.
     * @summary Delete a file
     * @param {number} id The ID of the file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    deleteFileRaw(requestParameters: DeleteFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFileResponse200>>;

    /**
     * Marks a file as deleted.
     * Delete a file
     */
    deleteFile(requestParameters: DeleteFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFileResponse200>;

    /**
     * Initializes a file download.
     * @summary Download one file
     * @param {number} id The ID of the file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    downloadFileRaw(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Initializes a file download.
     * Download one file
     */
    downloadFile(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Returns data about a specific file.
     * @summary Get one file
     * @param {number} id The ID of the file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    getFileRaw(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFileResponse200>>;

    /**
     * Returns data about a specific file.
     * Get one file
     */
    getFile(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFileResponse200>;

    /**
     * Returns data about all files.
     * @summary Get all files
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [includeDeletedFiles] When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work.
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    getFilesRaw(requestParameters: GetFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFilesResponse200>>;

    /**
     * Returns data about all files.
     * Get all files
     */
    getFiles(requestParameters: GetFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFilesResponse200>;

    /**
     * Links an existing remote file (`googledrive`) to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
     * @summary Link a remote file to an item
     * @param {string} itemType The item type
     * @param {number} itemId The ID of the item to associate the file with
     * @param {string} remoteId The remote item ID
     * @param {string} remoteLocation The location type to send the file to. Only &#x60;googledrive&#x60; is supported at the moment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    linkFileToItemRaw(requestParameters: LinkFileToItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkFileToItemResponse200>>;

    /**
     * Links an existing remote file (`googledrive`) to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
     * Link a remote file to an item
     */
    linkFileToItem(requestParameters: LinkFileToItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkFileToItemResponse200>;

    /**
     * Updates the properties of a file.
     * @summary Update file details
     * @param {number} id The ID of the file
     * @param {string} [name] The visible name of the file
     * @param {string} [description] The description of the file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApiInterface
     */
    updateFileRaw(requestParameters: UpdateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateFileResponse200>>;

    /**
     * Updates the properties of a file.
     * Update file details
     */
    updateFile(requestParameters: UpdateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateFileResponse200>;

}

/**
 * 
 */
export class FilesApi extends runtime.BaseAPI implements FilesApiInterface {

    /**
     * Lets you upload a file and associate it with a deal, person, organization, activity or product. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a file</a>.
     * Add file
     */
    async addFileRaw(requestParameters: AddFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddFileResponse200>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling addFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full", "activities:full", "contacts:full"]);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.dealId !== undefined) {
            formParams.append('deal_id', requestParameters.dealId as any);
        }

        if (requestParameters.personId !== undefined) {
            formParams.append('person_id', requestParameters.personId as any);
        }

        if (requestParameters.orgId !== undefined) {
            formParams.append('org_id', requestParameters.orgId as any);
        }

        if (requestParameters.productId !== undefined) {
            formParams.append('product_id', requestParameters.productId as any);
        }

        if (requestParameters.activityId !== undefined) {
            formParams.append('activity_id', requestParameters.activityId as any);
        }

        const response = await this.request({
            path: `/files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddFileResponse200FromJSON(jsonValue));
    }

    /**
     * Lets you upload a file and associate it with a deal, person, organization, activity or product. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a file</a>.
     * Add file
     */
    async addFile(requestParameters: AddFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddFileResponse200> {
        const response = await this.addFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new empty file in the remote location (`googledrive`) that will be linked to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
     * Create a remote file and link it to an item
     */
    async addFileAndLinkItRaw(requestParameters: AddFileAndLinkItRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddFileAndLinkItResponse200>> {
        if (requestParameters.fileType === null || requestParameters.fileType === undefined) {
            throw new runtime.RequiredError('fileType','Required parameter requestParameters.fileType was null or undefined when calling addFileAndLinkIt.');
        }

        if (requestParameters.title === null || requestParameters.title === undefined) {
            throw new runtime.RequiredError('title','Required parameter requestParameters.title was null or undefined when calling addFileAndLinkIt.');
        }

        if (requestParameters.itemType === null || requestParameters.itemType === undefined) {
            throw new runtime.RequiredError('itemType','Required parameter requestParameters.itemType was null or undefined when calling addFileAndLinkIt.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling addFileAndLinkIt.');
        }

        if (requestParameters.remoteLocation === null || requestParameters.remoteLocation === undefined) {
            throw new runtime.RequiredError('remoteLocation','Required parameter requestParameters.remoteLocation was null or undefined when calling addFileAndLinkIt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full", "activities:full", "contacts:full"]);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.fileType !== undefined) {
            formParams.append('file_type', requestParameters.fileType as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        if (requestParameters.itemType !== undefined) {
            formParams.append('item_type', requestParameters.itemType as any);
        }

        if (requestParameters.itemId !== undefined) {
            formParams.append('item_id', requestParameters.itemId as any);
        }

        if (requestParameters.remoteLocation !== undefined) {
            formParams.append('remote_location', requestParameters.remoteLocation as any);
        }

        const response = await this.request({
            path: `/files/remote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddFileAndLinkItResponse200FromJSON(jsonValue));
    }

    /**
     * Creates a new empty file in the remote location (`googledrive`) that will be linked to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
     * Create a remote file and link it to an item
     */
    async addFileAndLinkIt(requestParameters: AddFileAndLinkItRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddFileAndLinkItResponse200> {
        const response = await this.addFileAndLinkItRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks a file as deleted.
     * Delete a file
     */
    async deleteFileRaw(requestParameters: DeleteFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFileResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full", "activities:full", "contacts:full"]);
        }

        const response = await this.request({
            path: `/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteFileResponse200FromJSON(jsonValue));
    }

    /**
     * Marks a file as deleted.
     * Delete a file
     */
    async deleteFile(requestParameters: DeleteFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFileResponse200> {
        const response = await this.deleteFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initializes a file download.
     * Download one file
     */
    async downloadFileRaw(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling downloadFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full", "activities:read", "activities:full", "contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/files/{id}/download`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Initializes a file download.
     * Download one file
     */
    async downloadFile(requestParameters: DownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.downloadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about a specific file.
     * Get one file
     */
    async getFileRaw(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFileResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full", "activities:read", "activities:full", "contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFileResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about a specific file.
     * Get one file
     */
    async getFile(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFileResponse200> {
        const response = await this.getFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about all files.
     * Get all files
     */
    async getFilesRaw(requestParameters: GetFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFilesResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.includeDeletedFiles !== undefined) {
            queryParameters['include_deleted_files'] = requestParameters.includeDeletedFiles;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full", "activities:read", "activities:full", "contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/files`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFilesResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about all files.
     * Get all files
     */
    async getFiles(requestParameters: GetFilesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFilesResponse200> {
        const response = await this.getFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Links an existing remote file (`googledrive`) to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
     * Link a remote file to an item
     */
    async linkFileToItemRaw(requestParameters: LinkFileToItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkFileToItemResponse200>> {
        if (requestParameters.itemType === null || requestParameters.itemType === undefined) {
            throw new runtime.RequiredError('itemType','Required parameter requestParameters.itemType was null or undefined when calling linkFileToItem.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling linkFileToItem.');
        }

        if (requestParameters.remoteId === null || requestParameters.remoteId === undefined) {
            throw new runtime.RequiredError('remoteId','Required parameter requestParameters.remoteId was null or undefined when calling linkFileToItem.');
        }

        if (requestParameters.remoteLocation === null || requestParameters.remoteLocation === undefined) {
            throw new runtime.RequiredError('remoteLocation','Required parameter requestParameters.remoteLocation was null or undefined when calling linkFileToItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full", "activities:full", "contacts:full"]);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.itemType !== undefined) {
            formParams.append('item_type', requestParameters.itemType as any);
        }

        if (requestParameters.itemId !== undefined) {
            formParams.append('item_id', requestParameters.itemId as any);
        }

        if (requestParameters.remoteId !== undefined) {
            formParams.append('remote_id', requestParameters.remoteId as any);
        }

        if (requestParameters.remoteLocation !== undefined) {
            formParams.append('remote_location', requestParameters.remoteLocation as any);
        }

        const response = await this.request({
            path: `/files/remoteLink`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkFileToItemResponse200FromJSON(jsonValue));
    }

    /**
     * Links an existing remote file (`googledrive`) to the item you supply. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-remote-file\" target=\"_blank\" rel=\"noopener noreferrer\">adding a remote file</a>.
     * Link a remote file to an item
     */
    async linkFileToItem(requestParameters: LinkFileToItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkFileToItemResponse200> {
        const response = await this.linkFileToItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the properties of a file.
     * Update file details
     */
    async updateFileRaw(requestParameters: UpdateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateFileResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full", "activities:full", "contacts:full"]);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('description', requestParameters.description as any);
        }

        const response = await this.request({
            path: `/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateFileResponse200FromJSON(jsonValue));
    }

    /**
     * Updates the properties of a file.
     * Update file details
     */
    async updateFile(requestParameters: UpdateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateFileResponse200> {
        const response = await this.updateFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum AddFileAndLinkItFileTypeEnum {
    Gdoc = 'gdoc',
    Gslides = 'gslides',
    Gsheet = 'gsheet',
    Gform = 'gform',
    Gdraw = 'gdraw'
}
/**
  * @export
  * @enum {string}
  */
export enum AddFileAndLinkItItemTypeEnum {
    Deal = 'deal',
    Organization = 'organization',
    Person = 'person'
}
/**
  * @export
  * @enum {string}
  */
export enum AddFileAndLinkItRemoteLocationEnum {
    Googledrive = 'googledrive'
}
/**
  * @export
  * @enum {string}
  */
export enum GetFilesIncludeDeletedFilesEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum LinkFileToItemItemTypeEnum {
    Deal = 'deal',
    Organization = 'organization',
    Person = 'person'
}
/**
  * @export
  * @enum {string}
  */
export enum LinkFileToItemRemoteLocationEnum {
    Googledrive = 'googledrive'
}
