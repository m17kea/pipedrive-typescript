/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddWebhookRequest,
  BaseResponse200,
  DeleteWebhook403Response,
  GetWebhooksResponse200,
  UnathorizedResponse,
  WebhookResponse200,
  WebhooksBadRequestResponse,
} from '../models';
import {
    AddWebhookRequestFromJSON,
    AddWebhookRequestToJSON,
    BaseResponse200FromJSON,
    BaseResponse200ToJSON,
    DeleteWebhook403ResponseFromJSON,
    DeleteWebhook403ResponseToJSON,
    GetWebhooksResponse200FromJSON,
    GetWebhooksResponse200ToJSON,
    UnathorizedResponseFromJSON,
    UnathorizedResponseToJSON,
    WebhookResponse200FromJSON,
    WebhookResponse200ToJSON,
    WebhooksBadRequestResponseFromJSON,
    WebhooksBadRequestResponseToJSON,
} from '../models';

export interface AddWebhookOperationRequest {
    addWebhookRequest?: AddWebhookRequest;
}

export interface DeleteWebhookRequest {
    id: number;
}

/**
 * WebhooksApi - interface
 * 
 * @export
 * @interface WebhooksApiInterface
 */
export interface WebhooksApiInterface {
    /**
     * Creates a new Webhook and returns its details. Note that specifying an event which triggers the Webhook combines 2 parameters - `event_action` and `event_object`. E.g., use `*.*` for getting notifications about all events, `added.deal` for any newly added deals, `deleted.persons` for any deleted persons, etc. See <a href=\"https://pipedrive.readme.io/docs/guide-for-webhooks?ref=api_reference\" target=\"_blank\" rel=\"noopener noreferrer\">the guide for Webhooks</a> for more details.
     * @summary Create a new Webhook
     * @param {AddWebhookRequest} [addWebhookRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiInterface
     */
    addWebhookRaw(requestParameters: AddWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookResponse200>>;

    /**
     * Creates a new Webhook and returns its details. Note that specifying an event which triggers the Webhook combines 2 parameters - `event_action` and `event_object`. E.g., use `*.*` for getting notifications about all events, `added.deal` for any newly added deals, `deleted.persons` for any deleted persons, etc. See <a href=\"https://pipedrive.readme.io/docs/guide-for-webhooks?ref=api_reference\" target=\"_blank\" rel=\"noopener noreferrer\">the guide for Webhooks</a> for more details.
     * Create a new Webhook
     */
    addWebhook(requestParameters: AddWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookResponse200>;

    /**
     * Deletes the specified Webhook.
     * @summary Delete existing Webhook
     * @param {number} id The ID of the Webhook to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiInterface
     */
    deleteWebhookRaw(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse200>>;

    /**
     * Deletes the specified Webhook.
     * Delete existing Webhook
     */
    deleteWebhook(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse200>;

    /**
     * Returns data about all the Webhooks of a company.
     * @summary Get all Webhooks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiInterface
     */
    getWebhooksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWebhooksResponse200>>;

    /**
     * Returns data about all the Webhooks of a company.
     * Get all Webhooks
     */
    getWebhooks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWebhooksResponse200>;

}

/**
 * 
 */
export class WebhooksApi extends runtime.BaseAPI implements WebhooksApiInterface {

    /**
     * Creates a new Webhook and returns its details. Note that specifying an event which triggers the Webhook combines 2 parameters - `event_action` and `event_object`. E.g., use `*.*` for getting notifications about all events, `added.deal` for any newly added deals, `deleted.persons` for any deleted persons, etc. See <a href=\"https://pipedrive.readme.io/docs/guide-for-webhooks?ref=api_reference\" target=\"_blank\" rel=\"noopener noreferrer\">the guide for Webhooks</a> for more details.
     * Create a new Webhook
     */
    async addWebhookRaw(requestParameters: AddWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/webhooks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddWebhookRequestToJSON(requestParameters.addWebhookRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookResponse200FromJSON(jsonValue));
    }

    /**
     * Creates a new Webhook and returns its details. Note that specifying an event which triggers the Webhook combines 2 parameters - `event_action` and `event_object`. E.g., use `*.*` for getting notifications about all events, `added.deal` for any newly added deals, `deleted.persons` for any deleted persons, etc. See <a href=\"https://pipedrive.readme.io/docs/guide-for-webhooks?ref=api_reference\" target=\"_blank\" rel=\"noopener noreferrer\">the guide for Webhooks</a> for more details.
     * Create a new Webhook
     */
    async addWebhook(requestParameters: AddWebhookOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookResponse200> {
        const response = await this.addWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the specified Webhook.
     * Delete existing Webhook
     */
    async deleteWebhookRaw(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/webhooks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponse200FromJSON(jsonValue));
    }

    /**
     * Deletes the specified Webhook.
     * Delete existing Webhook
     */
    async deleteWebhook(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse200> {
        const response = await this.deleteWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about all the Webhooks of a company.
     * Get all Webhooks
     */
    async getWebhooksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWebhooksResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/webhooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWebhooksResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about all the Webhooks of a company.
     * Get all Webhooks
     */
    async getWebhooks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWebhooksResponse200> {
        const response = await this.getWebhooksRaw(initOverrides);
        return await response.value();
    }

}
