/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteMailThreadResponse200,
  GetAllMailMessagesOfMailThreadResponse200,
  GetMailThreadsResponse200,
  GetOneMailThreadResponse200,
  MailMessageResponse200,
  UpdateMailThreadDetailsResponse200,
} from '../models';
import {
    DeleteMailThreadResponse200FromJSON,
    DeleteMailThreadResponse200ToJSON,
    GetAllMailMessagesOfMailThreadResponse200FromJSON,
    GetAllMailMessagesOfMailThreadResponse200ToJSON,
    GetMailThreadsResponse200FromJSON,
    GetMailThreadsResponse200ToJSON,
    GetOneMailThreadResponse200FromJSON,
    GetOneMailThreadResponse200ToJSON,
    MailMessageResponse200FromJSON,
    MailMessageResponse200ToJSON,
    UpdateMailThreadDetailsResponse200FromJSON,
    UpdateMailThreadDetailsResponse200ToJSON,
} from '../models';

export interface DeleteMailThreadRequest {
    id: number;
}

export interface GetMailMessageRequest {
    id: number;
    includeBody?: GetMailMessageIncludeBodyEnum;
}

export interface GetMailThreadRequest {
    id: number;
}

export interface GetMailThreadMessagesRequest {
    id: number;
}

export interface GetMailThreadsRequest {
    folder: GetMailThreadsFolderEnum;
    start?: number;
    limit?: number;
}

export interface UpdateMailThreadDetailsRequest {
    id: number;
    dealId?: number;
    leadId?: string;
    sharedFlag?: UpdateMailThreadDetailsSharedFlagEnum;
    readFlag?: UpdateMailThreadDetailsReadFlagEnum;
    archivedFlag?: UpdateMailThreadDetailsArchivedFlagEnum;
}

/**
 * MailboxApi - interface
 * 
 * @export
 * @interface MailboxApiInterface
 */
export interface MailboxApiInterface {
    /**
     * Marks a mail thread as deleted.
     * @summary Delete mail thread
     * @param {number} id The ID of the mail thread
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailboxApiInterface
     */
    deleteMailThreadRaw(requestParameters: DeleteMailThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteMailThreadResponse200>>;

    /**
     * Marks a mail thread as deleted.
     * Delete mail thread
     */
    deleteMailThread(requestParameters: DeleteMailThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteMailThreadResponse200>;

    /**
     * Returns data about a specific mail message.
     * @summary Get one mail message
     * @param {number} id The ID of the mail message to fetch
     * @param {0 | 1} [includeBody] Whether to include the full message body or not. &#x60;0&#x60; &#x3D; Don\&#39;t include, &#x60;1&#x60; &#x3D; Include
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailboxApiInterface
     */
    getMailMessageRaw(requestParameters: GetMailMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailMessageResponse200>>;

    /**
     * Returns data about a specific mail message.
     * Get one mail message
     */
    getMailMessage(requestParameters: GetMailMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailMessageResponse200>;

    /**
     * Returns a specific mail thread.
     * @summary Get one mail thread
     * @param {number} id The ID of the mail thread
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailboxApiInterface
     */
    getMailThreadRaw(requestParameters: GetMailThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOneMailThreadResponse200>>;

    /**
     * Returns a specific mail thread.
     * Get one mail thread
     */
    getMailThread(requestParameters: GetMailThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOneMailThreadResponse200>;

    /**
     * Returns all the mail messages inside a specified mail thread.
     * @summary Get all mail messages of mail thread
     * @param {number} id The ID of the mail thread
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailboxApiInterface
     */
    getMailThreadMessagesRaw(requestParameters: GetMailThreadMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllMailMessagesOfMailThreadResponse200>>;

    /**
     * Returns all the mail messages inside a specified mail thread.
     * Get all mail messages of mail thread
     */
    getMailThreadMessages(requestParameters: GetMailThreadMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllMailMessagesOfMailThreadResponse200>;

    /**
     * Returns mail threads in a specified folder ordered by the most recent message within.
     * @summary Get mail threads
     * @param {'inbox' | 'drafts' | 'sent' | 'archive'} folder The type of folder to fetch
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailboxApiInterface
     */
    getMailThreadsRaw(requestParameters: GetMailThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMailThreadsResponse200>>;

    /**
     * Returns mail threads in a specified folder ordered by the most recent message within.
     * Get mail threads
     */
    getMailThreads(requestParameters: GetMailThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMailThreadsResponse200>;

    /**
     * Updates the properties of a mail thread.
     * @summary Update mail thread details
     * @param {number} id The ID of the mail thread
     * @param {number} [dealId] The ID of the deal this thread is associated with
     * @param {string} [leadId] The ID of the lead this thread is associated with
     * @param {number} [sharedFlag] 
     * @param {number} [readFlag] 
     * @param {number} [archivedFlag] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailboxApiInterface
     */
    updateMailThreadDetailsRaw(requestParameters: UpdateMailThreadDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMailThreadDetailsResponse200>>;

    /**
     * Updates the properties of a mail thread.
     * Update mail thread details
     */
    updateMailThreadDetails(requestParameters: UpdateMailThreadDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMailThreadDetailsResponse200>;

}

/**
 * 
 */
export class MailboxApi extends runtime.BaseAPI implements MailboxApiInterface {

    /**
     * Marks a mail thread as deleted.
     * Delete mail thread
     */
    async deleteMailThreadRaw(requestParameters: DeleteMailThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteMailThreadResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMailThread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["mail:full"]);
        }

        const response = await this.request({
            path: `/mailbox/mailThreads/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteMailThreadResponse200FromJSON(jsonValue));
    }

    /**
     * Marks a mail thread as deleted.
     * Delete mail thread
     */
    async deleteMailThread(requestParameters: DeleteMailThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteMailThreadResponse200> {
        const response = await this.deleteMailThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about a specific mail message.
     * Get one mail message
     */
    async getMailMessageRaw(requestParameters: GetMailMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailMessageResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMailMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeBody !== undefined) {
            queryParameters['include_body'] = requestParameters.includeBody;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["mail:read", "mail:full"]);
        }

        const response = await this.request({
            path: `/mailbox/mailMessages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailMessageResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about a specific mail message.
     * Get one mail message
     */
    async getMailMessage(requestParameters: GetMailMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailMessageResponse200> {
        const response = await this.getMailMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific mail thread.
     * Get one mail thread
     */
    async getMailThreadRaw(requestParameters: GetMailThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOneMailThreadResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMailThread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["mail:read", "mail:full"]);
        }

        const response = await this.request({
            path: `/mailbox/mailThreads/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOneMailThreadResponse200FromJSON(jsonValue));
    }

    /**
     * Returns a specific mail thread.
     * Get one mail thread
     */
    async getMailThread(requestParameters: GetMailThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOneMailThreadResponse200> {
        const response = await this.getMailThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all the mail messages inside a specified mail thread.
     * Get all mail messages of mail thread
     */
    async getMailThreadMessagesRaw(requestParameters: GetMailThreadMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllMailMessagesOfMailThreadResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMailThreadMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["mail:read", "mail:full"]);
        }

        const response = await this.request({
            path: `/mailbox/mailThreads/{id}/mailMessages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllMailMessagesOfMailThreadResponse200FromJSON(jsonValue));
    }

    /**
     * Returns all the mail messages inside a specified mail thread.
     * Get all mail messages of mail thread
     */
    async getMailThreadMessages(requestParameters: GetMailThreadMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllMailMessagesOfMailThreadResponse200> {
        const response = await this.getMailThreadMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns mail threads in a specified folder ordered by the most recent message within.
     * Get mail threads
     */
    async getMailThreadsRaw(requestParameters: GetMailThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMailThreadsResponse200>> {
        if (requestParameters.folder === null || requestParameters.folder === undefined) {
            throw new runtime.RequiredError('folder','Required parameter requestParameters.folder was null or undefined when calling getMailThreads.');
        }

        const queryParameters: any = {};

        if (requestParameters.folder !== undefined) {
            queryParameters['folder'] = requestParameters.folder;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["mail:read", "mail:full"]);
        }

        const response = await this.request({
            path: `/mailbox/mailThreads`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMailThreadsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns mail threads in a specified folder ordered by the most recent message within.
     * Get mail threads
     */
    async getMailThreads(requestParameters: GetMailThreadsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMailThreadsResponse200> {
        const response = await this.getMailThreadsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the properties of a mail thread.
     * Update mail thread details
     */
    async updateMailThreadDetailsRaw(requestParameters: UpdateMailThreadDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMailThreadDetailsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMailThreadDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["mail:full"]);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.dealId !== undefined) {
            formParams.append('deal_id', requestParameters.dealId as any);
        }

        if (requestParameters.leadId !== undefined) {
            formParams.append('lead_id', requestParameters.leadId as any);
        }

        if (requestParameters.sharedFlag !== undefined) {
            formParams.append('shared_flag', requestParameters.sharedFlag as any);
        }

        if (requestParameters.readFlag !== undefined) {
            formParams.append('read_flag', requestParameters.readFlag as any);
        }

        if (requestParameters.archivedFlag !== undefined) {
            formParams.append('archived_flag', requestParameters.archivedFlag as any);
        }

        const response = await this.request({
            path: `/mailbox/mailThreads/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMailThreadDetailsResponse200FromJSON(jsonValue));
    }

    /**
     * Updates the properties of a mail thread.
     * Update mail thread details
     */
    async updateMailThreadDetails(requestParameters: UpdateMailThreadDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMailThreadDetailsResponse200> {
        const response = await this.updateMailThreadDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetMailMessageIncludeBodyEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetMailThreadsFolderEnum {
    Inbox = 'inbox',
    Drafts = 'drafts',
    Sent = 'sent',
    Archive = 'archive'
}
/**
  * @export
  * @enum {string}
  */
export enum UpdateMailThreadDetailsSharedFlagEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum UpdateMailThreadDetailsReadFlagEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum UpdateMailThreadDetailsArchivedFlagEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
