/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddProductFollowerRequest,
  AddProductRequest,
  AddProductRequest1,
  DeleteProductFollowerResponse200,
  DeleteProductResponse200,
  GetAssociatedFilesResponse200,
  GetProductFollowersResponseSuccess,
  GetProductsResponse200,
  GetproductResponse200,
  NewFollowerResponse200,
  SearchProductsResponse200,
  UpdateDealRequest,
  UpdateProductResponse200,
  UserIds,
} from '../models';
import {
    AddProductFollowerRequestFromJSON,
    AddProductFollowerRequestToJSON,
    AddProductRequestFromJSON,
    AddProductRequestToJSON,
    AddProductRequest1FromJSON,
    AddProductRequest1ToJSON,
    DeleteProductFollowerResponse200FromJSON,
    DeleteProductFollowerResponse200ToJSON,
    DeleteProductResponse200FromJSON,
    DeleteProductResponse200ToJSON,
    GetAssociatedFilesResponse200FromJSON,
    GetAssociatedFilesResponse200ToJSON,
    GetProductFollowersResponseSuccessFromJSON,
    GetProductFollowersResponseSuccessToJSON,
    GetProductsResponse200FromJSON,
    GetProductsResponse200ToJSON,
    GetproductResponse200FromJSON,
    GetproductResponse200ToJSON,
    NewFollowerResponse200FromJSON,
    NewFollowerResponse200ToJSON,
    SearchProductsResponse200FromJSON,
    SearchProductsResponse200ToJSON,
    UpdateDealRequestFromJSON,
    UpdateDealRequestToJSON,
    UpdateProductResponse200FromJSON,
    UpdateProductResponse200ToJSON,
    UserIdsFromJSON,
    UserIdsToJSON,
} from '../models';

export interface AddProductOperationRequest {
    addProductRequest?: AddProductRequest;
}

export interface AddProductFollowerOperationRequest {
    id: number;
    addProductFollowerRequest?: AddProductFollowerRequest;
}

export interface DeleteProductRequest {
    id: number;
}

export interface DeleteProductFollowerRequest {
    id: number;
    followerId: number;
}

export interface GetProductRequest {
    id: number;
}

export interface GetProductDealsRequest {
    id: number;
    start?: number;
    limit?: number;
    status?: GetProductDealsStatusEnum;
}

export interface GetProductFilesRequest {
    id: number;
    start?: number;
    limit?: number;
    includeDeletedFiles?: GetProductFilesIncludeDeletedFilesEnum;
    sort?: string;
}

export interface GetProductFollowersRequest {
    id: number;
    start?: number;
    limit?: number;
}

export interface GetProductUsersRequest {
    id: number;
}

export interface GetProductsRequest {
    userId?: number;
    filterId?: number;
    ids?: Array<number>;
    firstChar?: string;
    getSummary?: boolean;
    start?: number;
    limit?: number;
}

export interface SearchProductsRequest {
    term: string;
    fields?: SearchProductsFieldsEnum;
    exactMatch?: SearchProductsExactMatchEnum;
    includeFields?: SearchProductsIncludeFieldsEnum;
    start?: number;
    limit?: number;
}

export interface UpdateProductRequest {
    id: number;
    addProductRequest1?: AddProductRequest1;
}

/**
 * ProductsApi - interface
 * 
 * @export
 * @interface ProductsApiInterface
 */
export interface ProductsApiInterface {
    /**
     * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
     * @summary Add a product
     * @param {AddProductRequest} [addProductRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    addProductRaw(requestParameters: AddProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetproductResponse200>>;

    /**
     * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
     * Add a product
     */
    addProduct(requestParameters: AddProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetproductResponse200>;

    /**
     * Adds a follower to a product.
     * @summary Add a follower to a product
     * @param {number} id The ID of the product
     * @param {AddProductFollowerRequest} [addProductFollowerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    addProductFollowerRaw(requestParameters: AddProductFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewFollowerResponse200>>;

    /**
     * Adds a follower to a product.
     * Add a follower to a product
     */
    addProductFollower(requestParameters: AddProductFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewFollowerResponse200>;

    /**
     * Marks a product as deleted.
     * @summary Delete a product
     * @param {number} id The ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    deleteProductRaw(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteProductResponse200>>;

    /**
     * Marks a product as deleted.
     * Delete a product
     */
    deleteProduct(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteProductResponse200>;

    /**
     * Deletes a follower from a product.
     * @summary Delete a follower from a product
     * @param {number} id The ID of the product
     * @param {number} followerId The ID of the relationship between the follower and the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    deleteProductFollowerRaw(requestParameters: DeleteProductFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteProductFollowerResponse200>>;

    /**
     * Deletes a follower from a product.
     * Delete a follower from a product
     */
    deleteProductFollower(requestParameters: DeleteProductFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteProductFollowerResponse200>;

    /**
     * Returns data about a specific product.
     * @summary Get one product
     * @param {number} id The ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    getProductRaw(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetproductResponse200>>;

    /**
     * Returns data about a specific product.
     * Get one product
     */
    getProduct(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetproductResponse200>;

    /**
     * Returns data about deals that have a product attached to it.
     * @summary Get deals where a product is attached to
     * @param {number} id The ID of the product
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are fetched.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    getProductDealsRaw(requestParameters: GetProductDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateDealRequest>>;

    /**
     * Returns data about deals that have a product attached to it.
     * Get deals where a product is attached to
     */
    getProductDeals(requestParameters: GetProductDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateDealRequest>;

    /**
     * Lists files associated with a product.
     * @summary List files attached to a product
     * @param {number} id The ID of the product
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [includeDeletedFiles] When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work.
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    getProductFilesRaw(requestParameters: GetProductFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedFilesResponse200>>;

    /**
     * Lists files associated with a product.
     * List files attached to a product
     */
    getProductFiles(requestParameters: GetProductFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedFilesResponse200>;

    /**
     * Lists the followers of a product.
     * @summary List followers of a product
     * @param {number} id The ID of the product
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    getProductFollowersRaw(requestParameters: GetProductFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProductFollowersResponseSuccess>>;

    /**
     * Lists the followers of a product.
     * List followers of a product
     */
    getProductFollowers(requestParameters: GetProductFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProductFollowersResponseSuccess>;

    /**
     * Lists users permitted to access a product.
     * @summary List permitted users
     * @param {number} id The ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    getProductUsersRaw(requestParameters: GetProductUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserIds>>;

    /**
     * Lists users permitted to access a product.
     * List permitted users
     */
    getProductUsers(requestParameters: GetProductUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserIds>;

    /**
     * Returns data about all products.
     * @summary Get all products
     * @param {number} [userId] If supplied, only products owned by the given user will be returned
     * @param {number} [filterId] The ID of the filter to use
     * @param {Array<number>} [ids] An array of integers with the IDs of the products that should be returned in the response
     * @param {string} [firstChar] If supplied, only products whose name starts with the specified letter will be returned (case insensitive)
     * @param {boolean} [getSummary] If supplied, the response will return the total numbers of products in the &#x60;additional_data.summary.total_count&#x60; property
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    getProductsRaw(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProductsResponse200>>;

    /**
     * Returns data about all products.
     * Get all products
     */
    getProducts(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProductsResponse200>;

    /**
     * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * @summary Search products
     * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;).
     * @param {'code' | 'custom_fields' | 'name'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them.
     * @param {boolean} [exactMatch] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @param {'product.price'} [includeFields] Supports including optional fields in the results which are not provided by default
     * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    searchProductsRaw(requestParameters: SearchProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchProductsResponse200>>;

    /**
     * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * Search products
     */
    searchProducts(requestParameters: SearchProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchProductsResponse200>;

    /**
     * Updates product data.
     * @summary Update a product
     * @param {number} id The ID of the product
     * @param {AddProductRequest1} [addProductRequest1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    updateProductRaw(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProductResponse200>>;

    /**
     * Updates product data.
     * Update a product
     */
    updateProduct(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProductResponse200>;

}

/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI implements ProductsApiInterface {

    /**
     * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
     * Add a product
     */
    async addProductRaw(requestParameters: AddProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetproductResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["products:full"]);
        }

        const response = await this.request({
            path: `/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddProductRequestToJSON(requestParameters.addProductRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetproductResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new product to the Products inventory. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-product\" target=\"_blank\" rel=\"noopener noreferrer\">adding a product</a>.
     * Add a product
     */
    async addProduct(requestParameters: AddProductOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetproductResponse200> {
        const response = await this.addProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a follower to a product.
     * Add a follower to a product
     */
    async addProductFollowerRaw(requestParameters: AddProductFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewFollowerResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addProductFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["products:full"]);
        }

        const response = await this.request({
            path: `/products/{id}/followers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddProductFollowerRequestToJSON(requestParameters.addProductFollowerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewFollowerResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a follower to a product.
     * Add a follower to a product
     */
    async addProductFollower(requestParameters: AddProductFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewFollowerResponse200> {
        const response = await this.addProductFollowerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks a product as deleted.
     * Delete a product
     */
    async deleteProductRaw(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteProductResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["products:full"]);
        }

        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteProductResponse200FromJSON(jsonValue));
    }

    /**
     * Marks a product as deleted.
     * Delete a product
     */
    async deleteProduct(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteProductResponse200> {
        const response = await this.deleteProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a follower from a product.
     * Delete a follower from a product
     */
    async deleteProductFollowerRaw(requestParameters: DeleteProductFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteProductFollowerResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProductFollower.');
        }

        if (requestParameters.followerId === null || requestParameters.followerId === undefined) {
            throw new runtime.RequiredError('followerId','Required parameter requestParameters.followerId was null or undefined when calling deleteProductFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["products:full"]);
        }

        const response = await this.request({
            path: `/products/{id}/followers/{follower_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"follower_id"}}`, encodeURIComponent(String(requestParameters.followerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteProductFollowerResponse200FromJSON(jsonValue));
    }

    /**
     * Deletes a follower from a product.
     * Delete a follower from a product
     */
    async deleteProductFollower(requestParameters: DeleteProductFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteProductFollowerResponse200> {
        const response = await this.deleteProductFollowerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about a specific product.
     * Get one product
     */
    async getProductRaw(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetproductResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["products:read", "products:full"]);
        }

        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetproductResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about a specific product.
     * Get one product
     */
    async getProduct(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetproductResponse200> {
        const response = await this.getProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about deals that have a product attached to it.
     * Get deals where a product is attached to
     */
    async getProductDealsRaw(requestParameters: GetProductDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateDealRequest>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProductDeals.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/products/{id}/deals`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateDealRequestFromJSON(jsonValue));
    }

    /**
     * Returns data about deals that have a product attached to it.
     * Get deals where a product is attached to
     */
    async getProductDeals(requestParameters: GetProductDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateDealRequest> {
        const response = await this.getProductDealsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists files associated with a product.
     * List files attached to a product
     */
    async getProductFilesRaw(requestParameters: GetProductFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedFilesResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProductFiles.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.includeDeletedFiles !== undefined) {
            queryParameters['include_deleted_files'] = requestParameters.includeDeletedFiles;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["products:read", "products:full"]);
        }

        const response = await this.request({
            path: `/products/{id}/files`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedFilesResponse200FromJSON(jsonValue));
    }

    /**
     * Lists files associated with a product.
     * List files attached to a product
     */
    async getProductFiles(requestParameters: GetProductFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedFilesResponse200> {
        const response = await this.getProductFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists the followers of a product.
     * List followers of a product
     */
    async getProductFollowersRaw(requestParameters: GetProductFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProductFollowersResponseSuccess>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProductFollowers.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["products:read", "products:full"]);
        }

        const response = await this.request({
            path: `/products/{id}/followers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProductFollowersResponseSuccessFromJSON(jsonValue));
    }

    /**
     * Lists the followers of a product.
     * List followers of a product
     */
    async getProductFollowers(requestParameters: GetProductFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProductFollowersResponseSuccess> {
        const response = await this.getProductFollowersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists users permitted to access a product.
     * List permitted users
     */
    async getProductUsersRaw(requestParameters: GetProductUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserIds>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProductUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["products:read", "products:full"]);
        }

        const response = await this.request({
            path: `/products/{id}/permittedUsers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserIdsFromJSON(jsonValue));
    }

    /**
     * Lists users permitted to access a product.
     * List permitted users
     */
    async getProductUsers(requestParameters: GetProductUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserIds> {
        const response = await this.getProductUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about all products.
     * Get all products
     */
    async getProductsRaw(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProductsResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter_id'] = requestParameters.filterId;
        }

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        if (requestParameters.firstChar !== undefined) {
            queryParameters['first_char'] = requestParameters.firstChar;
        }

        if (requestParameters.getSummary !== undefined) {
            queryParameters['get_summary'] = requestParameters.getSummary;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["products:read", "products:full"]);
        }

        const response = await this.request({
            path: `/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProductsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about all products.
     * Get all products
     */
    async getProducts(requestParameters: GetProductsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProductsResponse200> {
        const response = await this.getProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * Search products
     */
    async searchProductsRaw(requestParameters: SearchProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchProductsResponse200>> {
        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling searchProducts.');
        }

        const queryParameters: any = {};

        if (requestParameters.term !== undefined) {
            queryParameters['term'] = requestParameters.term;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.exactMatch !== undefined) {
            queryParameters['exact_match'] = requestParameters.exactMatch;
        }

        if (requestParameters.includeFields !== undefined) {
            queryParameters['include_fields'] = requestParameters.includeFields;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["products:read", "products:full", "search:read"]);
        }

        const response = await this.request({
            path: `/products/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchProductsResponse200FromJSON(jsonValue));
    }

    /**
     * Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope.
     * Search products
     */
    async searchProducts(requestParameters: SearchProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchProductsResponse200> {
        const response = await this.searchProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates product data.
     * Update a product
     */
    async updateProductRaw(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProductResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["products:full"]);
        }

        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddProductRequest1ToJSON(requestParameters.addProductRequest1),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateProductResponse200FromJSON(jsonValue));
    }

    /**
     * Updates product data.
     * Update a product
     */
    async updateProduct(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProductResponse200> {
        const response = await this.updateProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetProductDealsStatusEnum {
    Open = 'open',
    Won = 'won',
    Lost = 'lost',
    Deleted = 'deleted',
    AllNotDeleted = 'all_not_deleted'
}
/**
  * @export
  * @enum {string}
  */
export enum GetProductFilesIncludeDeletedFilesEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum SearchProductsFieldsEnum {
    Code = 'code',
    CustomFields = 'custom_fields',
    Name = 'name'
}
/**
  * @export
  * @enum {string}
  */
export enum SearchProductsExactMatchEnum {
    True = true,
    False = false
}
/**
  * @export
  * @enum {string}
  */
export enum SearchProductsIncludeFieldsEnum {
    ProductPrice = 'product.price'
}
