/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddUserRequest,
  FailResponse,
  GetCurrentUserResponse200,
  GetRoleSettingsResponse200,
  GetUserPermissionsResponse200,
  GetUserRoleAssignmentsResponse200,
  UnathorizedResponse,
  UpdateUserRequest,
  UserIds,
  UserResponse200,
  UsersResponse200,
} from '../models';
import {
    AddUserRequestFromJSON,
    AddUserRequestToJSON,
    FailResponseFromJSON,
    FailResponseToJSON,
    GetCurrentUserResponse200FromJSON,
    GetCurrentUserResponse200ToJSON,
    GetRoleSettingsResponse200FromJSON,
    GetRoleSettingsResponse200ToJSON,
    GetUserPermissionsResponse200FromJSON,
    GetUserPermissionsResponse200ToJSON,
    GetUserRoleAssignmentsResponse200FromJSON,
    GetUserRoleAssignmentsResponse200ToJSON,
    UnathorizedResponseFromJSON,
    UnathorizedResponseToJSON,
    UpdateUserRequestFromJSON,
    UpdateUserRequestToJSON,
    UserIdsFromJSON,
    UserIdsToJSON,
    UserResponse200FromJSON,
    UserResponse200ToJSON,
    UsersResponse200FromJSON,
    UsersResponse200ToJSON,
} from '../models';

export interface AddUserOperationRequest {
    addUserRequest?: AddUserRequest;
}

export interface FindUsersByNameRequest {
    term: string;
    searchByEmail?: FindUsersByNameSearchByEmailEnum;
}

export interface GetUserRequest {
    id: number;
}

export interface GetUserFollowersRequest {
    id: number;
}

export interface GetUserPermissionsRequest {
    id: number;
}

export interface GetUserRoleAssignmentsRequest {
    id: number;
    start?: number;
    limit?: number;
}

export interface GetUserRoleSettingsRequest {
    id: number;
}

export interface UpdateUserOperationRequest {
    id: number;
    updateUserRequest?: UpdateUserRequest;
}

/**
 * UsersApi - interface
 * 
 * @export
 * @interface UsersApiInterface
 */
export interface UsersApiInterface {
    /**
     * Adds a new user to the company, returns the ID upon success.
     * @summary Add a new user
     * @param {AddUserRequest} [addUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    addUserRaw(requestParameters: AddUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse200>>;

    /**
     * Adds a new user to the company, returns the ID upon success.
     * Add a new user
     */
    addUser(requestParameters: AddUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse200>;

    /**
     * Finds users by their name.
     * @summary Find users by name
     * @param {string} term The search term to look for
     * @param {0 | 1} [searchByEmail] When enabled, the term will only be matched against email addresses of users. Default: &#x60;false&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    findUsersByNameRaw(requestParameters: FindUsersByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersResponse200>>;

    /**
     * Finds users by their name.
     * Find users by name
     */
    findUsersByName(requestParameters: FindUsersByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersResponse200>;

    /**
     * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
     * @summary Get current user data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCurrentUserResponse200>>;

    /**
     * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
     * Get current user data
     */
    getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCurrentUserResponse200>;

    /**
     * Returns data about a specific user within the company.
     * @summary Get one user
     * @param {number} id The ID of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse200>>;

    /**
     * Returns data about a specific user within the company.
     * Get one user
     */
    getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse200>;

    /**
     * Lists the followers of a specific user.
     * @summary List followers of a user
     * @param {number} id The ID of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserFollowersRaw(requestParameters: GetUserFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserIds>>;

    /**
     * Lists the followers of a specific user.
     * List followers of a user
     */
    getUserFollowers(requestParameters: GetUserFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserIds>;

    /**
     * Lists aggregated permissions over all assigned permission sets for a user.
     * @summary List user permissions
     * @param {number} id The ID of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserPermissionsRaw(requestParameters: GetUserPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserPermissionsResponse200>>;

    /**
     * Lists aggregated permissions over all assigned permission sets for a user.
     * List user permissions
     */
    getUserPermissions(requestParameters: GetUserPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserPermissionsResponse200>;

    /**
     * Lists role assignments for a user.
     * @summary List role assignments
     * @param {number} id The ID of the user
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserRoleAssignmentsRaw(requestParameters: GetUserRoleAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserRoleAssignmentsResponse200>>;

    /**
     * Lists role assignments for a user.
     * List role assignments
     */
    getUserRoleAssignments(requestParameters: GetUserRoleAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserRoleAssignmentsResponse200>;

    /**
     * Lists the settings of user\'s assigned role.
     * @summary List user role settings
     * @param {number} id The ID of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserRoleSettingsRaw(requestParameters: GetUserRoleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRoleSettingsResponse200>>;

    /**
     * Lists the settings of user\'s assigned role.
     * List user role settings
     */
    getUserRoleSettings(requestParameters: GetUserRoleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRoleSettingsResponse200>;

    /**
     * Returns data about all users within the company.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersResponse200>>;

    /**
     * Returns data about all users within the company.
     * Get all users
     */
    getUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersResponse200>;

    /**
     * Updates the properties of a user. Currently, only `active_flag` can be updated.
     * @summary Update user details
     * @param {number} id The ID of the user
     * @param {UpdateUserRequest} [updateUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    updateUserRaw(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse200>>;

    /**
     * Updates the properties of a user. Currently, only `active_flag` can be updated.
     * Update user details
     */
    updateUser(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse200>;

}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI implements UsersApiInterface {

    /**
     * Adds a new user to the company, returns the ID upon success.
     * Add a new user
     */
    async addUserRaw(requestParameters: AddUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddUserRequestToJSON(requestParameters.addUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new user to the company, returns the ID upon success.
     * Add a new user
     */
    async addUser(requestParameters: AddUserOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse200> {
        const response = await this.addUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Finds users by their name.
     * Find users by name
     */
    async findUsersByNameRaw(requestParameters: FindUsersByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersResponse200>> {
        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling findUsersByName.');
        }

        const queryParameters: any = {};

        if (requestParameters.term !== undefined) {
            queryParameters['term'] = requestParameters.term;
        }

        if (requestParameters.searchByEmail !== undefined) {
            queryParameters['search_by_email'] = requestParameters.searchByEmail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }

        const response = await this.request({
            path: `/users/find`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersResponse200FromJSON(jsonValue));
    }

    /**
     * Finds users by their name.
     * Find users by name
     */
    async findUsersByName(requestParameters: FindUsersByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersResponse200> {
        const response = await this.findUsersByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
     * Get current user data
     */
    async getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCurrentUserResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["base"]);
        }

        const response = await this.request({
            path: `/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCurrentUserResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means \'Date/number format\' in the Pipedrive account settings, not the chosen language.
     * Get current user data
     */
    async getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCurrentUserResponse200> {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns data about a specific user within the company.
     * Get one user
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about a specific user within the company.
     * Get one user
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse200> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists the followers of a specific user.
     * List followers of a user
     */
    async getUserFollowersRaw(requestParameters: GetUserFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserIds>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserFollowers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }

        const response = await this.request({
            path: `/users/{id}/followers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserIdsFromJSON(jsonValue));
    }

    /**
     * Lists the followers of a specific user.
     * List followers of a user
     */
    async getUserFollowers(requestParameters: GetUserFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserIds> {
        const response = await this.getUserFollowersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists aggregated permissions over all assigned permission sets for a user.
     * List user permissions
     */
    async getUserPermissionsRaw(requestParameters: GetUserPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserPermissionsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserPermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }

        const response = await this.request({
            path: `/users/{id}/permissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserPermissionsResponse200FromJSON(jsonValue));
    }

    /**
     * Lists aggregated permissions over all assigned permission sets for a user.
     * List user permissions
     */
    async getUserPermissions(requestParameters: GetUserPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserPermissionsResponse200> {
        const response = await this.getUserPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists role assignments for a user.
     * List role assignments
     */
    async getUserRoleAssignmentsRaw(requestParameters: GetUserRoleAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserRoleAssignmentsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserRoleAssignments.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }

        const response = await this.request({
            path: `/users/{id}/roleAssignments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserRoleAssignmentsResponse200FromJSON(jsonValue));
    }

    /**
     * Lists role assignments for a user.
     * List role assignments
     */
    async getUserRoleAssignments(requestParameters: GetUserRoleAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserRoleAssignmentsResponse200> {
        const response = await this.getUserRoleAssignmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists the settings of user\'s assigned role.
     * List user role settings
     */
    async getUserRoleSettingsRaw(requestParameters: GetUserRoleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRoleSettingsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserRoleSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }

        const response = await this.request({
            path: `/users/{id}/roleSettings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRoleSettingsResponse200FromJSON(jsonValue));
    }

    /**
     * Lists the settings of user\'s assigned role.
     * List user role settings
     */
    async getUserRoleSettings(requestParameters: GetUserRoleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRoleSettingsResponse200> {
        const response = await this.getUserRoleSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about all users within the company.
     * Get all users
     */
    async getUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about all users within the company.
     * Get all users
     */
    async getUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersResponse200> {
        const response = await this.getUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates the properties of a user. Currently, only `active_flag` can be updated.
     * Update user details
     */
    async updateUserRaw(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserRequestToJSON(requestParameters.updateUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponse200FromJSON(jsonValue));
    }

    /**
     * Updates the properties of a user. Currently, only `active_flag` can be updated.
     * Update user details
     */
    async updateUser(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse200> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum FindUsersByNameSearchByEmailEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
