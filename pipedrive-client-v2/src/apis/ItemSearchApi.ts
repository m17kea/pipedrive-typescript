/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SearchItemByFieldResponse200,
  SearchItemResponse200,
} from '../models';
import {
    SearchItemByFieldResponse200FromJSON,
    SearchItemByFieldResponse200ToJSON,
    SearchItemResponse200FromJSON,
    SearchItemResponse200ToJSON,
} from '../models';

export interface SearchItemRequest {
    term: string;
    itemTypes?: SearchItemItemTypesEnum;
    fields?: SearchItemFieldsEnum;
    searchForRelatedItems?: SearchItemSearchForRelatedItemsEnum;
    exactMatch?: SearchItemExactMatchEnum;
    includeFields?: SearchItemIncludeFieldsEnum;
    start?: number;
    limit?: number;
}

export interface SearchItemByFieldRequest {
    term: string;
    fieldType: SearchItemByFieldFieldTypeEnum;
    fieldKey: string;
    exactMatch?: SearchItemByFieldExactMatchEnum;
    returnItemIds?: SearchItemByFieldReturnItemIdsEnum;
    start?: number;
    limit?: number;
}

/**
 * ItemSearchApi - interface
 * 
 * @export
 * @interface ItemSearchApiInterface
 */
export interface ItemSearchApiInterface {
    /**
     * Performs a search from your choice of item types and fields.
     * @summary Perform a search from multiple item types
     * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;).
     * @param {'deal' | 'person' | 'organization' | 'product' | 'lead' | 'file' | 'mail_attachment'} [itemTypes] A comma-separated string array. The type of items to perform the search from. Defaults to all.
     * @param {'address' | 'code' | 'custom_fields' | 'email' | 'name' | 'notes' | 'organization_name' | 'person_name' | 'phone' | 'title'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all. Relevant for each item type are:&lt;br&gt; &lt;table&gt; &lt;tr&gt;&lt;th&gt;&lt;b&gt;Item type&lt;/b&gt;&lt;/th&gt;&lt;th&gt;&lt;b&gt;Field&lt;/b&gt;&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Deal&lt;/td&gt;&lt;td&gt;&#x60;custom_fields&#x60;, &#x60;notes&#x60;, &#x60;title&#x60;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Person&lt;/td&gt;&lt;td&gt;&#x60;custom_fields&#x60;, &#x60;email&#x60;, &#x60;name&#x60;, &#x60;notes&#x60;, &#x60;phone&#x60;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Organization&lt;/td&gt;&lt;td&gt;&#x60;address&#x60;, &#x60;custom_fields&#x60;, &#x60;name&#x60;, &#x60;notes&#x60;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Product&lt;/td&gt;&lt;td&gt;&#x60;code&#x60;, &#x60;custom_fields&#x60;, &#x60;name&#x60;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Lead&lt;/td&gt;&lt;td&gt;&#x60;custom_fields&#x60;, &#x60;notes&#x60;, &#x60;email&#x60;, &#x60;organization_name&#x60;, &#x60;person_name&#x60;, &#x60;phone&#x60;, &#x60;title&#x60;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;File&lt;/td&gt;&lt;td&gt;&#x60;name&#x60;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Mail attachment&lt;/td&gt;&lt;td&gt;&#x60;name&#x60;&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;br&gt; When searching for leads, the email, organization_name, person_name, and phone fields will return results only for leads not linked to contacts. For searching leads by person or organization values, please use &#x60;search_for_related_items&#x60;.
     * @param {boolean} [searchForRelatedItems] When enabled, the response will include up to 100 newest related leads and 100 newest related deals for each found person and organization and up to 100 newest related persons for each found organization.
     * @param {boolean} [exactMatch] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @param {'deal.cc_email' | 'person.picture' | 'product.price'} [includeFields] A comma-separated string array. Supports including optional fields in the results which are not provided by default.
     * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemSearchApiInterface
     */
    searchItemRaw(requestParameters: SearchItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchItemResponse200>>;

    /**
     * Performs a search from your choice of item types and fields.
     * Perform a search from multiple item types
     */
    searchItem(requestParameters: SearchItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchItemResponse200>;

    /**
     * Performs a search from the values of a specific field. Results can either be the distinct values of the field (useful for searching autocomplete field values), or the IDs of actual items (deals, leads, persons, organizations or products).
     * @summary Perform a search using a specific field from an item type
     * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;).
     * @param {'dealField' | 'leadField' | 'personField' | 'organizationField' | 'productField'} fieldType The type of the field to perform the search from
     * @param {string} fieldKey The key of the field to search from. The field key can be obtained by fetching the list of the fields using any of the fields\&#39; API GET methods (dealFields, personFields, etc.).
     * @param {boolean} [exactMatch] When enabled, only full exact matches against the given term are returned. The search &lt;b&gt;is&lt;/b&gt; case sensitive.
     * @param {boolean} [returnItemIds] Whether to return the IDs of the matching items or not. When not set or set to &#x60;0&#x60; or &#x60;false&#x60;, only distinct values of the searched field are returned. When set to &#x60;1&#x60; or &#x60;true&#x60;, the ID of each found item is returned.
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemSearchApiInterface
     */
    searchItemByFieldRaw(requestParameters: SearchItemByFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchItemByFieldResponse200>>;

    /**
     * Performs a search from the values of a specific field. Results can either be the distinct values of the field (useful for searching autocomplete field values), or the IDs of actual items (deals, leads, persons, organizations or products).
     * Perform a search using a specific field from an item type
     */
    searchItemByField(requestParameters: SearchItemByFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchItemByFieldResponse200>;

}

/**
 * 
 */
export class ItemSearchApi extends runtime.BaseAPI implements ItemSearchApiInterface {

    /**
     * Performs a search from your choice of item types and fields.
     * Perform a search from multiple item types
     */
    async searchItemRaw(requestParameters: SearchItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchItemResponse200>> {
        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling searchItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.term !== undefined) {
            queryParameters['term'] = requestParameters.term;
        }

        if (requestParameters.itemTypes !== undefined) {
            queryParameters['item_types'] = requestParameters.itemTypes;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.searchForRelatedItems !== undefined) {
            queryParameters['search_for_related_items'] = requestParameters.searchForRelatedItems;
        }

        if (requestParameters.exactMatch !== undefined) {
            queryParameters['exact_match'] = requestParameters.exactMatch;
        }

        if (requestParameters.includeFields !== undefined) {
            queryParameters['include_fields'] = requestParameters.includeFields;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["search:read"]);
        }

        const response = await this.request({
            path: `/itemSearch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchItemResponse200FromJSON(jsonValue));
    }

    /**
     * Performs a search from your choice of item types and fields.
     * Perform a search from multiple item types
     */
    async searchItem(requestParameters: SearchItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchItemResponse200> {
        const response = await this.searchItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Performs a search from the values of a specific field. Results can either be the distinct values of the field (useful for searching autocomplete field values), or the IDs of actual items (deals, leads, persons, organizations or products).
     * Perform a search using a specific field from an item type
     */
    async searchItemByFieldRaw(requestParameters: SearchItemByFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchItemByFieldResponse200>> {
        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling searchItemByField.');
        }

        if (requestParameters.fieldType === null || requestParameters.fieldType === undefined) {
            throw new runtime.RequiredError('fieldType','Required parameter requestParameters.fieldType was null or undefined when calling searchItemByField.');
        }

        if (requestParameters.fieldKey === null || requestParameters.fieldKey === undefined) {
            throw new runtime.RequiredError('fieldKey','Required parameter requestParameters.fieldKey was null or undefined when calling searchItemByField.');
        }

        const queryParameters: any = {};

        if (requestParameters.term !== undefined) {
            queryParameters['term'] = requestParameters.term;
        }

        if (requestParameters.fieldType !== undefined) {
            queryParameters['field_type'] = requestParameters.fieldType;
        }

        if (requestParameters.exactMatch !== undefined) {
            queryParameters['exact_match'] = requestParameters.exactMatch;
        }

        if (requestParameters.fieldKey !== undefined) {
            queryParameters['field_key'] = requestParameters.fieldKey;
        }

        if (requestParameters.returnItemIds !== undefined) {
            queryParameters['return_item_ids'] = requestParameters.returnItemIds;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["search:read"]);
        }

        const response = await this.request({
            path: `/itemSearch/field`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchItemByFieldResponse200FromJSON(jsonValue));
    }

    /**
     * Performs a search from the values of a specific field. Results can either be the distinct values of the field (useful for searching autocomplete field values), or the IDs of actual items (deals, leads, persons, organizations or products).
     * Perform a search using a specific field from an item type
     */
    async searchItemByField(requestParameters: SearchItemByFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchItemByFieldResponse200> {
        const response = await this.searchItemByFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum SearchItemItemTypesEnum {
    Deal = 'deal',
    Person = 'person',
    Organization = 'organization',
    Product = 'product',
    Lead = 'lead',
    File = 'file',
    MailAttachment = 'mail_attachment'
}
/**
  * @export
  * @enum {string}
  */
export enum SearchItemFieldsEnum {
    Address = 'address',
    Code = 'code',
    CustomFields = 'custom_fields',
    Email = 'email',
    Name = 'name',
    Notes = 'notes',
    OrganizationName = 'organization_name',
    PersonName = 'person_name',
    Phone = 'phone',
    Title = 'title'
}
/**
  * @export
  * @enum {string}
  */
export enum SearchItemSearchForRelatedItemsEnum {
    True = true,
    False = false
}
/**
  * @export
  * @enum {string}
  */
export enum SearchItemExactMatchEnum {
    True = true,
    False = false
}
/**
  * @export
  * @enum {string}
  */
export enum SearchItemIncludeFieldsEnum {
    DealCcEmail = 'deal.cc_email',
    PersonPicture = 'person.picture',
    ProductPrice = 'product.price'
}
/**
  * @export
  * @enum {string}
  */
export enum SearchItemByFieldFieldTypeEnum {
    DealField = 'dealField',
    LeadField = 'leadField',
    PersonField = 'personField',
    OrganizationField = 'organizationField',
    ProductField = 'productField'
}
/**
  * @export
  * @enum {string}
  */
export enum SearchItemByFieldExactMatchEnum {
    True = true,
    False = false
}
/**
  * @export
  * @enum {string}
  */
export enum SearchItemByFieldReturnItemIdsEnum {
    True = true,
    False = false
}
