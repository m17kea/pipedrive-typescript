/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateFieldRequest,
  DeleteFieldResponse200,
  DeleteFieldsResponse200,
  FieldResponse200,
  FieldsResponse200,
  UpdateFieldRequest,
} from '../models';
import {
    CreateFieldRequestFromJSON,
    CreateFieldRequestToJSON,
    DeleteFieldResponse200FromJSON,
    DeleteFieldResponse200ToJSON,
    DeleteFieldsResponse200FromJSON,
    DeleteFieldsResponse200ToJSON,
    FieldResponse200FromJSON,
    FieldResponse200ToJSON,
    FieldsResponse200FromJSON,
    FieldsResponse200ToJSON,
    UpdateFieldRequestFromJSON,
    UpdateFieldRequestToJSON,
} from '../models';

export interface AddDealFieldRequest {
    createFieldRequest?: CreateFieldRequest;
}

export interface DeleteDealFieldRequest {
    id: number;
}

export interface DeleteDealFieldsRequest {
    ids: string;
}

export interface GetDealFieldRequest {
    id: number;
}

export interface GetDealFieldsRequest {
    start?: number;
    limit?: number;
}

export interface UpdateDealFieldRequest {
    id: number;
    updateFieldRequest?: UpdateFieldRequest;
}

/**
 * DealFieldsApi - interface
 * 
 * @export
 * @interface DealFieldsApiInterface
 */
export interface DealFieldsApiInterface {
    /**
     * Adds a new deal field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
     * @summary Add a new deal field
     * @param {CreateFieldRequest} [createFieldRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealFieldsApiInterface
     */
    addDealFieldRaw(requestParameters: AddDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldResponse200>>;

    /**
     * Adds a new deal field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
     * Add a new deal field
     */
    addDealField(requestParameters: AddDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldResponse200>;

    /**
     * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
     * @summary Delete a deal field
     * @param {number} id The ID of the field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealFieldsApiInterface
     */
    deleteDealFieldRaw(requestParameters: DeleteDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFieldResponse200>>;

    /**
     * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
     * Delete a deal field
     */
    deleteDealField(requestParameters: DeleteDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFieldResponse200>;

    /**
     * Marks multiple deal fields as deleted.
     * @summary Delete multiple deal fields in bulk
     * @param {string} ids The comma-separated field IDs to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealFieldsApiInterface
     */
    deleteDealFieldsRaw(requestParameters: DeleteDealFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFieldsResponse200>>;

    /**
     * Marks multiple deal fields as deleted.
     * Delete multiple deal fields in bulk
     */
    deleteDealFields(requestParameters: DeleteDealFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFieldsResponse200>;

    /**
     * Returns data about a specific deal field.
     * @summary Get one deal field
     * @param {number} id The ID of the field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealFieldsApiInterface
     */
    getDealFieldRaw(requestParameters: GetDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldResponse200>>;

    /**
     * Returns data about a specific deal field.
     * Get one deal field
     */
    getDealField(requestParameters: GetDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldResponse200>;

    /**
     * Returns data about all deal fields.
     * @summary Get all deal fields
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealFieldsApiInterface
     */
    getDealFieldsRaw(requestParameters: GetDealFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldsResponse200>>;

    /**
     * Returns data about all deal fields.
     * Get all deal fields
     */
    getDealFields(requestParameters: GetDealFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldsResponse200>;

    /**
     * Updates a deal field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
     * @summary Update a deal field
     * @param {number} id The ID of the field
     * @param {UpdateFieldRequest} [updateFieldRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealFieldsApiInterface
     */
    updateDealFieldRaw(requestParameters: UpdateDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldResponse200>>;

    /**
     * Updates a deal field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
     * Update a deal field
     */
    updateDealField(requestParameters: UpdateDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldResponse200>;

}

/**
 * 
 */
export class DealFieldsApi extends runtime.BaseAPI implements DealFieldsApiInterface {

    /**
     * Adds a new deal field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
     * Add a new deal field
     */
    async addDealFieldRaw(requestParameters: AddDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/dealFields`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFieldRequestToJSON(requestParameters.createFieldRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FieldResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new deal field. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/adding-a-new-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">adding a new custom field</a>.
     * Add a new deal field
     */
    async addDealField(requestParameters: AddDealFieldRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldResponse200> {
        const response = await this.addDealFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
     * Delete a deal field
     */
    async deleteDealFieldRaw(requestParameters: DeleteDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFieldResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDealField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/dealFields/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteFieldResponse200FromJSON(jsonValue));
    }

    /**
     * Marks a field as deleted. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/deleting-a-custom-field\" target=\"_blank\" rel=\"noopener noreferrer\">deleting a custom field</a>.
     * Delete a deal field
     */
    async deleteDealField(requestParameters: DeleteDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFieldResponse200> {
        const response = await this.deleteDealFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks multiple deal fields as deleted.
     * Delete multiple deal fields in bulk
     */
    async deleteDealFieldsRaw(requestParameters: DeleteDealFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFieldsResponse200>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError('ids','Required parameter requestParameters.ids was null or undefined when calling deleteDealFields.');
        }

        const queryParameters: any = {};

        if (requestParameters.ids !== undefined) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/dealFields`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteFieldsResponse200FromJSON(jsonValue));
    }

    /**
     * Marks multiple deal fields as deleted.
     * Delete multiple deal fields in bulk
     */
    async deleteDealFields(requestParameters: DeleteDealFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFieldsResponse200> {
        const response = await this.deleteDealFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about a specific deal field.
     * Get one deal field
     */
    async getDealFieldRaw(requestParameters: GetDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDealField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full", "admin"]);
        }

        const response = await this.request({
            path: `/dealFields/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FieldResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about a specific deal field.
     * Get one deal field
     */
    async getDealField(requestParameters: GetDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldResponse200> {
        const response = await this.getDealFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about all deal fields.
     * Get all deal fields
     */
    async getDealFieldsRaw(requestParameters: GetDealFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldsResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full", "admin"]);
        }

        const response = await this.request({
            path: `/dealFields`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FieldsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about all deal fields.
     * Get all deal fields
     */
    async getDealFields(requestParameters: GetDealFieldsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldsResponse200> {
        const response = await this.getDealFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a deal field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
     * Update a deal field
     */
    async updateDealFieldRaw(requestParameters: UpdateDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDealField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/dealFields/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFieldRequestToJSON(requestParameters.updateFieldRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FieldResponse200FromJSON(jsonValue));
    }

    /**
     * Updates a deal field. For more information, see the tutorial for <a href=\" https://pipedrive.readme.io/docs/updating-custom-field-value \" target=\"_blank\" rel=\"noopener noreferrer\">updating custom fields\' values</a>.
     * Update a deal field
     */
    async updateDealField(requestParameters: UpdateDealFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldResponse200> {
        const response = await this.updateDealFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
