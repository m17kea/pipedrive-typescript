/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddTeamRequest,
  AddTeamUserRequest,
  DeleteTeamUserRequest,
  FailResponse,
  TeamResponse200,
  TeamsResponse200,
  UpdateTeamRequest,
  UserIds,
} from '../models';
import {
    AddTeamRequestFromJSON,
    AddTeamRequestToJSON,
    AddTeamUserRequestFromJSON,
    AddTeamUserRequestToJSON,
    DeleteTeamUserRequestFromJSON,
    DeleteTeamUserRequestToJSON,
    FailResponseFromJSON,
    FailResponseToJSON,
    TeamResponse200FromJSON,
    TeamResponse200ToJSON,
    TeamsResponse200FromJSON,
    TeamsResponse200ToJSON,
    UpdateTeamRequestFromJSON,
    UpdateTeamRequestToJSON,
    UserIdsFromJSON,
    UserIdsToJSON,
} from '../models';

export interface AddTeamOperationRequest {
    addTeamRequest?: AddTeamRequest;
}

export interface AddTeamUserOperationRequest {
    id: number;
    addTeamUserRequest?: AddTeamUserRequest;
}

export interface DeleteTeamUserOperationRequest {
    id: number;
    deleteTeamUserRequest?: DeleteTeamUserRequest;
}

export interface GetTeamRequest {
    id: number;
    skipUsers?: GetTeamSkipUsersEnum;
}

export interface GetTeamUsersRequest {
    id: number;
}

export interface GetTeamsRequest {
    orderBy?: GetTeamsOrderByEnum;
    skipUsers?: GetTeamsSkipUsersEnum;
}

export interface GetUserTeamsRequest {
    id: number;
    orderBy?: GetUserTeamsOrderByEnum;
    skipUsers?: GetUserTeamsSkipUsersEnum;
}

export interface UpdateTeamOperationRequest {
    id: number;
    updateTeamRequest?: UpdateTeamRequest;
}

/**
 * LegacyTeamsApi - interface
 * 
 * @export
 * @interface LegacyTeamsApiInterface
 */
export interface LegacyTeamsApiInterface {
    /**
     * Adds a new team to the company and returns the created object.
     * @summary Add a new team
     * @param {AddTeamRequest} [addTeamRequest] 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApiInterface
     */
    addTeamRaw(requestParameters: AddTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamResponse200>>;

    /**
     * Adds a new team to the company and returns the created object.
     * Add a new team
     */
    addTeam(requestParameters: AddTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamResponse200>;

    /**
     * Adds users to an existing team.
     * @summary Add users to a team
     * @param {number} id The ID of the team
     * @param {AddTeamUserRequest} [addTeamUserRequest] 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApiInterface
     */
    addTeamUserRaw(requestParameters: AddTeamUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserIds>>;

    /**
     * Adds users to an existing team.
     * Add users to a team
     */
    addTeamUser(requestParameters: AddTeamUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserIds>;

    /**
     * Deletes users from an existing team.
     * @summary Delete users from a team
     * @param {number} id The ID of the team
     * @param {DeleteTeamUserRequest} [deleteTeamUserRequest] 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApiInterface
     */
    deleteTeamUserRaw(requestParameters: DeleteTeamUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserIds>>;

    /**
     * Deletes users from an existing team.
     * Delete users from a team
     */
    deleteTeamUser(requestParameters: DeleteTeamUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserIds>;

    /**
     * Returns data about a specific team.
     * @summary Get a single team
     * @param {number} id The ID of the team
     * @param {0 | 1} [skipUsers] When enabled, the teams will not include IDs of member users
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApiInterface
     */
    getTeamRaw(requestParameters: GetTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamResponse200>>;

    /**
     * Returns data about a specific team.
     * Get a single team
     */
    getTeam(requestParameters: GetTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamResponse200>;

    /**
     * Returns a list of all user IDs within a team.
     * @summary Get all users in a team
     * @param {number} id The ID of the team
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApiInterface
     */
    getTeamUsersRaw(requestParameters: GetTeamUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserIds>>;

    /**
     * Returns a list of all user IDs within a team.
     * Get all users in a team
     */
    getTeamUsers(requestParameters: GetTeamUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserIds>;

    /**
     * Returns data about teams within the company.
     * @summary Get all teams
     * @param {'id' | 'name' | 'manager_id' | 'active_flag'} [orderBy] The field name to sort returned teams by
     * @param {0 | 1} [skipUsers] When enabled, the teams will not include IDs of member users
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApiInterface
     */
    getTeamsRaw(requestParameters: GetTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamsResponse200>>;

    /**
     * Returns data about teams within the company.
     * Get all teams
     */
    getTeams(requestParameters: GetTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamsResponse200>;

    /**
     * Returns data about all teams which have the specified user as a member.
     * @summary Get all teams of a user
     * @param {number} id The ID of the user
     * @param {'id' | 'name' | 'manager_id' | 'active_flag'} [orderBy] The field name to sort returned teams by
     * @param {0 | 1} [skipUsers] When enabled, the teams will not include IDs of member users
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApiInterface
     */
    getUserTeamsRaw(requestParameters: GetUserTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamsResponse200>>;

    /**
     * Returns data about all teams which have the specified user as a member.
     * Get all teams of a user
     */
    getUserTeams(requestParameters: GetUserTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamsResponse200>;

    /**
     * Updates an existing team and returns the updated object.
     * @summary Update a team
     * @param {number} id The ID of the team
     * @param {UpdateTeamRequest} [updateTeamRequest] 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LegacyTeamsApiInterface
     */
    updateTeamRaw(requestParameters: UpdateTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamResponse200>>;

    /**
     * Updates an existing team and returns the updated object.
     * Update a team
     */
    updateTeam(requestParameters: UpdateTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamResponse200>;

}

/**
 * 
 */
export class LegacyTeamsApi extends runtime.BaseAPI implements LegacyTeamsApiInterface {

    /**
     * Adds a new team to the company and returns the created object.
     * Add a new team
     */
    async addTeamRaw(requestParameters: AddTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/legacyTeams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTeamRequestToJSON(requestParameters.addTeamRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new team to the company and returns the created object.
     * Add a new team
     */
    async addTeam(requestParameters: AddTeamOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamResponse200> {
        const response = await this.addTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds users to an existing team.
     * Add users to a team
     */
    async addTeamUserRaw(requestParameters: AddTeamUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserIds>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addTeamUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/legacyTeams/{id}/users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTeamUserRequestToJSON(requestParameters.addTeamUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserIdsFromJSON(jsonValue));
    }

    /**
     * Adds users to an existing team.
     * Add users to a team
     */
    async addTeamUser(requestParameters: AddTeamUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserIds> {
        const response = await this.addTeamUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes users from an existing team.
     * Delete users from a team
     */
    async deleteTeamUserRaw(requestParameters: DeleteTeamUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserIds>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTeamUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/legacyTeams/{id}/users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteTeamUserRequestToJSON(requestParameters.deleteTeamUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserIdsFromJSON(jsonValue));
    }

    /**
     * Deletes users from an existing team.
     * Delete users from a team
     */
    async deleteTeamUser(requestParameters: DeleteTeamUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserIds> {
        const response = await this.deleteTeamUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about a specific team.
     * Get a single team
     */
    async getTeamRaw(requestParameters: GetTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTeam.');
        }

        const queryParameters: any = {};

        if (requestParameters.skipUsers !== undefined) {
            queryParameters['skip_users'] = requestParameters.skipUsers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }

        const response = await this.request({
            path: `/legacyTeams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about a specific team.
     * Get a single team
     */
    async getTeam(requestParameters: GetTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamResponse200> {
        const response = await this.getTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all user IDs within a team.
     * Get all users in a team
     */
    async getTeamUsersRaw(requestParameters: GetTeamUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserIds>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTeamUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }

        const response = await this.request({
            path: `/legacyTeams/{id}/users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserIdsFromJSON(jsonValue));
    }

    /**
     * Returns a list of all user IDs within a team.
     * Get all users in a team
     */
    async getTeamUsers(requestParameters: GetTeamUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserIds> {
        const response = await this.getTeamUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about teams within the company.
     * Get all teams
     */
    async getTeamsRaw(requestParameters: GetTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamsResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.skipUsers !== undefined) {
            queryParameters['skip_users'] = requestParameters.skipUsers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }

        const response = await this.request({
            path: `/legacyTeams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about teams within the company.
     * Get all teams
     */
    async getTeams(requestParameters: GetTeamsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamsResponse200> {
        const response = await this.getTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about all teams which have the specified user as a member.
     * Get all teams of a user
     */
    async getUserTeamsRaw(requestParameters: GetUserTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserTeams.');
        }

        const queryParameters: any = {};

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.skipUsers !== undefined) {
            queryParameters['skip_users'] = requestParameters.skipUsers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }

        const response = await this.request({
            path: `/legacyTeams/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about all teams which have the specified user as a member.
     * Get all teams of a user
     */
    async getUserTeams(requestParameters: GetUserTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamsResponse200> {
        const response = await this.getUserTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing team and returns the updated object.
     * Update a team
     */
    async updateTeamRaw(requestParameters: UpdateTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/legacyTeams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTeamRequestToJSON(requestParameters.updateTeamRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamResponse200FromJSON(jsonValue));
    }

    /**
     * Updates an existing team and returns the updated object.
     * Update a team
     */
    async updateTeam(requestParameters: UpdateTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamResponse200> {
        const response = await this.updateTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetTeamSkipUsersEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetTeamsOrderByEnum {
    Id = 'id',
    Name = 'name',
    ManagerId = 'manager_id',
    ActiveFlag = 'active_flag'
}
/**
  * @export
  * @enum {string}
  */
export enum GetTeamsSkipUsersEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetUserTeamsOrderByEnum {
    Id = 'id',
    Name = 'name',
    ManagerId = 'manager_id',
    ActiveFlag = 'active_flag'
}
/**
  * @export
  * @enum {string}
  */
export enum GetUserTeamsSkipUsersEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
