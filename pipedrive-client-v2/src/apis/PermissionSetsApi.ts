/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetPermissionSetsResponse200,
  SinglePermissionSetResponse200,
  UserAssignmentsToPermissionSetResponse200,
} from '../models';
import {
    GetPermissionSetsResponse200FromJSON,
    GetPermissionSetsResponse200ToJSON,
    SinglePermissionSetResponse200FromJSON,
    SinglePermissionSetResponse200ToJSON,
    UserAssignmentsToPermissionSetResponse200FromJSON,
    UserAssignmentsToPermissionSetResponse200ToJSON,
} from '../models';

export interface GetPermissionSetRequest {
    id: string;
}

export interface GetPermissionSetAssignmentsRequest {
    id: string;
    start?: number;
    limit?: number;
}

export interface GetPermissionSetsRequest {
    app?: GetPermissionSetsAppEnum;
}

/**
 * PermissionSetsApi - interface
 * 
 * @export
 * @interface PermissionSetsApiInterface
 */
export interface PermissionSetsApiInterface {
    /**
     * Returns data about a specific permission set.
     * @summary Get one permission set
     * @param {string} id The ID of the permission set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionSetsApiInterface
     */
    getPermissionSetRaw(requestParameters: GetPermissionSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SinglePermissionSetResponse200>>;

    /**
     * Returns data about a specific permission set.
     * Get one permission set
     */
    getPermissionSet(requestParameters: GetPermissionSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SinglePermissionSetResponse200>;

    /**
     * Returns the list of assignments for a permission set.
     * @summary List permission set assignments
     * @param {string} id The ID of the permission set
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionSetsApiInterface
     */
    getPermissionSetAssignmentsRaw(requestParameters: GetPermissionSetAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAssignmentsToPermissionSetResponse200>>;

    /**
     * Returns the list of assignments for a permission set.
     * List permission set assignments
     */
    getPermissionSetAssignments(requestParameters: GetPermissionSetAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAssignmentsToPermissionSetResponse200>;

    /**
     * Returns data about all permission sets.
     * @summary Get all permission sets
     * @param {'sales' | 'projects' | 'campaigns' | 'global' | 'account_settings'} [app] The app to filter the permission sets by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionSetsApiInterface
     */
    getPermissionSetsRaw(requestParameters: GetPermissionSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPermissionSetsResponse200>>;

    /**
     * Returns data about all permission sets.
     * Get all permission sets
     */
    getPermissionSets(requestParameters: GetPermissionSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPermissionSetsResponse200>;

}

/**
 * 
 */
export class PermissionSetsApi extends runtime.BaseAPI implements PermissionSetsApiInterface {

    /**
     * Returns data about a specific permission set.
     * Get one permission set
     */
    async getPermissionSetRaw(requestParameters: GetPermissionSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SinglePermissionSetResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPermissionSet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/permissionSets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SinglePermissionSetResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about a specific permission set.
     * Get one permission set
     */
    async getPermissionSet(requestParameters: GetPermissionSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SinglePermissionSetResponse200> {
        const response = await this.getPermissionSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the list of assignments for a permission set.
     * List permission set assignments
     */
    async getPermissionSetAssignmentsRaw(requestParameters: GetPermissionSetAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserAssignmentsToPermissionSetResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPermissionSetAssignments.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/permissionSets/{id}/assignments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAssignmentsToPermissionSetResponse200FromJSON(jsonValue));
    }

    /**
     * Returns the list of assignments for a permission set.
     * List permission set assignments
     */
    async getPermissionSetAssignments(requestParameters: GetPermissionSetAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserAssignmentsToPermissionSetResponse200> {
        const response = await this.getPermissionSetAssignmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about all permission sets.
     * Get all permission sets
     */
    async getPermissionSetsRaw(requestParameters: GetPermissionSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPermissionSetsResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.app !== undefined) {
            queryParameters['app'] = requestParameters.app;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/permissionSets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPermissionSetsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about all permission sets.
     * Get all permission sets
     */
    async getPermissionSets(requestParameters: GetPermissionSetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPermissionSetsResponse200> {
        const response = await this.getPermissionSetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetPermissionSetsAppEnum {
    Sales = 'sales',
    Projects = 'projects',
    Campaigns = 'campaigns',
    Global = 'global',
    AccountSettings = 'account_settings'
}
