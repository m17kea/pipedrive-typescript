/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddLeadLabelRequest,
  AddOrUpdateLeadLabelResponse200,
  GetLeadLabelsResponse200,
  LeadIdResponse200,
  LeadResponse404,
  UpdateLeadLabelRequest,
} from '../models';
import {
    AddLeadLabelRequestFromJSON,
    AddLeadLabelRequestToJSON,
    AddOrUpdateLeadLabelResponse200FromJSON,
    AddOrUpdateLeadLabelResponse200ToJSON,
    GetLeadLabelsResponse200FromJSON,
    GetLeadLabelsResponse200ToJSON,
    LeadIdResponse200FromJSON,
    LeadIdResponse200ToJSON,
    LeadResponse404FromJSON,
    LeadResponse404ToJSON,
    UpdateLeadLabelRequestFromJSON,
    UpdateLeadLabelRequestToJSON,
} from '../models';

export interface AddLeadLabelOperationRequest {
    addLeadLabelRequest?: AddLeadLabelRequest;
}

export interface DeleteLeadLabelRequest {
    id: string;
}

export interface UpdateLeadLabelOperationRequest {
    id: string;
    updateLeadLabelRequest?: UpdateLeadLabelRequest;
}

/**
 * LeadLabelsApi - interface
 * 
 * @export
 * @interface LeadLabelsApiInterface
 */
export interface LeadLabelsApiInterface {
    /**
     * Creates a lead label.
     * @summary Add a lead label
     * @param {AddLeadLabelRequest} [addLeadLabelRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadLabelsApiInterface
     */
    addLeadLabelRaw(requestParameters: AddLeadLabelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrUpdateLeadLabelResponse200>>;

    /**
     * Creates a lead label.
     * Add a lead label
     */
    addLeadLabel(requestParameters: AddLeadLabelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrUpdateLeadLabelResponse200>;

    /**
     * Deletes a specific lead label.
     * @summary Delete a lead label
     * @param {string} id The ID of the lead label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadLabelsApiInterface
     */
    deleteLeadLabelRaw(requestParameters: DeleteLeadLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeadIdResponse200>>;

    /**
     * Deletes a specific lead label.
     * Delete a lead label
     */
    deleteLeadLabel(requestParameters: DeleteLeadLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeadIdResponse200>;

    /**
     * Returns details of all lead labels. This endpoint does not support pagination and all labels are always returned.
     * @summary Get all lead labels
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadLabelsApiInterface
     */
    getLeadLabelsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLeadLabelsResponse200>>;

    /**
     * Returns details of all lead labels. This endpoint does not support pagination and all labels are always returned.
     * Get all lead labels
     */
    getLeadLabels(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLeadLabelsResponse200>;

    /**
     * Updates one or more properties of a lead label. Only properties included in the request will be updated. 
     * @summary Update a lead label
     * @param {string} id The ID of the lead label
     * @param {UpdateLeadLabelRequest} [updateLeadLabelRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadLabelsApiInterface
     */
    updateLeadLabelRaw(requestParameters: UpdateLeadLabelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrUpdateLeadLabelResponse200>>;

    /**
     * Updates one or more properties of a lead label. Only properties included in the request will be updated. 
     * Update a lead label
     */
    updateLeadLabel(requestParameters: UpdateLeadLabelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrUpdateLeadLabelResponse200>;

}

/**
 * 
 */
export class LeadLabelsApi extends runtime.BaseAPI implements LeadLabelsApiInterface {

    /**
     * Creates a lead label.
     * Add a lead label
     */
    async addLeadLabelRaw(requestParameters: AddLeadLabelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrUpdateLeadLabelResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["leads:full"]);
        }

        const response = await this.request({
            path: `/leadLabels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddLeadLabelRequestToJSON(requestParameters.addLeadLabelRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddOrUpdateLeadLabelResponse200FromJSON(jsonValue));
    }

    /**
     * Creates a lead label.
     * Add a lead label
     */
    async addLeadLabel(requestParameters: AddLeadLabelOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrUpdateLeadLabelResponse200> {
        const response = await this.addLeadLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific lead label.
     * Delete a lead label
     */
    async deleteLeadLabelRaw(requestParameters: DeleteLeadLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeadIdResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLeadLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["leads:full"]);
        }

        const response = await this.request({
            path: `/leadLabels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeadIdResponse200FromJSON(jsonValue));
    }

    /**
     * Deletes a specific lead label.
     * Delete a lead label
     */
    async deleteLeadLabel(requestParameters: DeleteLeadLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeadIdResponse200> {
        const response = await this.deleteLeadLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns details of all lead labels. This endpoint does not support pagination and all labels are always returned.
     * Get all lead labels
     */
    async getLeadLabelsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLeadLabelsResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["leads:read", "leads:full"]);
        }

        const response = await this.request({
            path: `/leadLabels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLeadLabelsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns details of all lead labels. This endpoint does not support pagination and all labels are always returned.
     * Get all lead labels
     */
    async getLeadLabels(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLeadLabelsResponse200> {
        const response = await this.getLeadLabelsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates one or more properties of a lead label. Only properties included in the request will be updated. 
     * Update a lead label
     */
    async updateLeadLabelRaw(requestParameters: UpdateLeadLabelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrUpdateLeadLabelResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLeadLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["leads:full"]);
        }

        const response = await this.request({
            path: `/leadLabels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLeadLabelRequestToJSON(requestParameters.updateLeadLabelRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddOrUpdateLeadLabelResponse200FromJSON(jsonValue));
    }

    /**
     * Updates one or more properties of a lead label. Only properties included in the request will be updated. 
     * Update a lead label
     */
    async updateLeadLabel(requestParameters: UpdateLeadLabelOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrUpdateLeadLabelResponse200> {
        const response = await this.updateLeadLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
