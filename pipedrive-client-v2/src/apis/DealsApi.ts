/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddDealFollowerRequest,
  AddDealFollowerResponse200,
  AddDealParticipantRequest,
  AddDealParticipantResponse200,
  AddDealProductRequest,
  AddDealRequest,
  BasicDealProductRequest,
  DealResponse200,
  DeleteDealFollowerResponse200,
  DeleteDealParticipantResponse200,
  DeleteDealProductResponse200,
  DeleteDealResponse200,
  DeleteDealsResponse200,
  DuplicateDealResponse200,
  GetAddProductAttachementResponse200,
  GetAssociatedFilesResponse200,
  GetAssociatedFollowersResponse200,
  GetAssociatedMailMessagesResponse200,
  GetDealActivitiesResponse200,
  GetDealParticipantsResponse200,
  GetDealResponse200,
  GetDealUpdatesResponse200,
  GetDealsResponse200,
  GetDealsSummaryResponse200,
  GetDealsTimelineResponse200,
  GetProductAttachementResponse200,
  ListPermittedUsersResponse200,
  ListPersonsResponse200,
  ListProductsResponse200,
  MergeDealsRequest,
  MergeDealsResponse200,
  SearchDealsResponse200,
  UpdateDealRequest,
} from '../models';
import {
    AddDealFollowerRequestFromJSON,
    AddDealFollowerRequestToJSON,
    AddDealFollowerResponse200FromJSON,
    AddDealFollowerResponse200ToJSON,
    AddDealParticipantRequestFromJSON,
    AddDealParticipantRequestToJSON,
    AddDealParticipantResponse200FromJSON,
    AddDealParticipantResponse200ToJSON,
    AddDealProductRequestFromJSON,
    AddDealProductRequestToJSON,
    AddDealRequestFromJSON,
    AddDealRequestToJSON,
    BasicDealProductRequestFromJSON,
    BasicDealProductRequestToJSON,
    DealResponse200FromJSON,
    DealResponse200ToJSON,
    DeleteDealFollowerResponse200FromJSON,
    DeleteDealFollowerResponse200ToJSON,
    DeleteDealParticipantResponse200FromJSON,
    DeleteDealParticipantResponse200ToJSON,
    DeleteDealProductResponse200FromJSON,
    DeleteDealProductResponse200ToJSON,
    DeleteDealResponse200FromJSON,
    DeleteDealResponse200ToJSON,
    DeleteDealsResponse200FromJSON,
    DeleteDealsResponse200ToJSON,
    DuplicateDealResponse200FromJSON,
    DuplicateDealResponse200ToJSON,
    GetAddProductAttachementResponse200FromJSON,
    GetAddProductAttachementResponse200ToJSON,
    GetAssociatedFilesResponse200FromJSON,
    GetAssociatedFilesResponse200ToJSON,
    GetAssociatedFollowersResponse200FromJSON,
    GetAssociatedFollowersResponse200ToJSON,
    GetAssociatedMailMessagesResponse200FromJSON,
    GetAssociatedMailMessagesResponse200ToJSON,
    GetDealActivitiesResponse200FromJSON,
    GetDealActivitiesResponse200ToJSON,
    GetDealParticipantsResponse200FromJSON,
    GetDealParticipantsResponse200ToJSON,
    GetDealResponse200FromJSON,
    GetDealResponse200ToJSON,
    GetDealUpdatesResponse200FromJSON,
    GetDealUpdatesResponse200ToJSON,
    GetDealsResponse200FromJSON,
    GetDealsResponse200ToJSON,
    GetDealsSummaryResponse200FromJSON,
    GetDealsSummaryResponse200ToJSON,
    GetDealsTimelineResponse200FromJSON,
    GetDealsTimelineResponse200ToJSON,
    GetProductAttachementResponse200FromJSON,
    GetProductAttachementResponse200ToJSON,
    ListPermittedUsersResponse200FromJSON,
    ListPermittedUsersResponse200ToJSON,
    ListPersonsResponse200FromJSON,
    ListPersonsResponse200ToJSON,
    ListProductsResponse200FromJSON,
    ListProductsResponse200ToJSON,
    MergeDealsRequestFromJSON,
    MergeDealsRequestToJSON,
    MergeDealsResponse200FromJSON,
    MergeDealsResponse200ToJSON,
    SearchDealsResponse200FromJSON,
    SearchDealsResponse200ToJSON,
    UpdateDealRequestFromJSON,
    UpdateDealRequestToJSON,
} from '../models';

export interface AddDealOperationRequest {
    addDealRequest?: AddDealRequest;
}

export interface AddDealFollowerOperationRequest {
    id: number;
    addDealFollowerRequest?: AddDealFollowerRequest;
}

export interface AddDealParticipantOperationRequest {
    id: number;
    addDealParticipantRequest?: AddDealParticipantRequest;
}

export interface AddDealProductOperationRequest {
    id: number;
    addDealProductRequest?: AddDealProductRequest;
}

export interface DeleteDealRequest {
    id: number;
}

export interface DeleteDealFollowerRequest {
    id: number;
    followerId: number;
}

export interface DeleteDealParticipantRequest {
    id: number;
    dealParticipantId: number;
}

export interface DeleteDealProductRequest {
    id: number;
    productAttachmentId: number;
}

export interface DeleteDealsRequest {
    ids: string;
}

export interface DuplicateDealRequest {
    id: number;
}

export interface GetDealRequest {
    id: number;
}

export interface GetDealActivitiesRequest {
    id: number;
    start?: number;
    limit?: number;
    done?: GetDealActivitiesDoneEnum;
    exclude?: string;
}

export interface GetDealFilesRequest {
    id: number;
    start?: number;
    limit?: number;
    includeDeletedFiles?: GetDealFilesIncludeDeletedFilesEnum;
    sort?: string;
}

export interface GetDealFollowersRequest {
    id: number;
}

export interface GetDealMailMessagesRequest {
    id: number;
    start?: number;
    limit?: number;
}

export interface GetDealParticipantsRequest {
    id: number;
    start?: number;
    limit?: number;
}

export interface GetDealPersonsRequest {
    id: number;
    start?: number;
    limit?: number;
}

export interface GetDealProductsRequest {
    id: number;
    start?: number;
    limit?: number;
    includeProductData?: GetDealProductsIncludeProductDataEnum;
}

export interface GetDealUpdatesRequest {
    id: number;
    start?: number;
    limit?: number;
    allChanges?: string;
    items?: string;
}

export interface GetDealUsersRequest {
    id: number;
}

export interface GetDealsRequest {
    userId?: number;
    filterId?: number;
    stageId?: number;
    status?: GetDealsStatusEnum;
    start?: number;
    limit?: number;
    sort?: string;
    ownedByYou?: GetDealsOwnedByYouEnum;
}

export interface GetDealsSummaryRequest {
    status?: GetDealsSummaryStatusEnum;
    filterId?: number;
    userId?: number;
    stageId?: number;
}

export interface GetDealsTimelineRequest {
    startDate: Date;
    interval: GetDealsTimelineIntervalEnum;
    amount: number;
    fieldKey: string;
    userId?: number;
    pipelineId?: number;
    filterId?: number;
    excludeDeals?: GetDealsTimelineExcludeDealsEnum;
    totalsConvertCurrency?: string;
}

export interface MergeDealsOperationRequest {
    id: number;
    mergeDealsRequest?: MergeDealsRequest;
}

export interface SearchDealsRequest {
    term: string;
    fields?: SearchDealsFieldsEnum;
    exactMatch?: SearchDealsExactMatchEnum;
    personId?: number;
    organizationId?: number;
    status?: SearchDealsStatusEnum;
    includeFields?: SearchDealsIncludeFieldsEnum;
    start?: number;
    limit?: number;
}

export interface UpdateDealOperationRequest {
    id: number;
    updateDealRequest?: UpdateDealRequest;
}

export interface UpdateDealProductRequest {
    id: number;
    productAttachmentId: number;
    basicDealProductRequest?: BasicDealProductRequest;
}

/**
 * DealsApi - interface
 * 
 * @export
 * @interface DealsApiInterface
 */
export interface DealsApiInterface {
    /**
     * Adds a new deal. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>.
     * @summary Add a deal
     * @param {AddDealRequest} [addDealRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    addDealRaw(requestParameters: AddDealOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DealResponse200>>;

    /**
     * Adds a new deal. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>.
     * Add a deal
     */
    addDeal(requestParameters: AddDealOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DealResponse200>;

    /**
     * Adds a follower to a deal.
     * @summary Add a follower to a deal
     * @param {number} id The ID of the deal
     * @param {AddDealFollowerRequest} [addDealFollowerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    addDealFollowerRaw(requestParameters: AddDealFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddDealFollowerResponse200>>;

    /**
     * Adds a follower to a deal.
     * Add a follower to a deal
     */
    addDealFollower(requestParameters: AddDealFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddDealFollowerResponse200>;

    /**
     * Adds a participant to a deal.
     * @summary Add a participant to a deal
     * @param {number} id The ID of the deal
     * @param {AddDealParticipantRequest} [addDealParticipantRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    addDealParticipantRaw(requestParameters: AddDealParticipantOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddDealParticipantResponse200>>;

    /**
     * Adds a participant to a deal.
     * Add a participant to a deal
     */
    addDealParticipant(requestParameters: AddDealParticipantOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddDealParticipantResponse200>;

    /**
     * Adds a product to the deal.
     * @summary Add a product to the deal, eventually creating a new item called a deal-product
     * @param {number} id The ID of the deal
     * @param {AddDealProductRequest} [addDealProductRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    addDealProductRaw(requestParameters: AddDealProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddProductAttachementResponse200>>;

    /**
     * Adds a product to the deal.
     * Add a product to the deal, eventually creating a new item called a deal-product
     */
    addDealProduct(requestParameters: AddDealProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddProductAttachementResponse200>;

    /**
     * Marks a deal as deleted.
     * @summary Delete a deal
     * @param {number} id The ID of the deal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    deleteDealRaw(requestParameters: DeleteDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteDealResponse200>>;

    /**
     * Marks a deal as deleted.
     * Delete a deal
     */
    deleteDeal(requestParameters: DeleteDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteDealResponse200>;

    /**
     * Deletes a follower from a deal.
     * @summary Delete a follower from a deal
     * @param {number} id The ID of the deal
     * @param {number} followerId The ID of the follower
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    deleteDealFollowerRaw(requestParameters: DeleteDealFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteDealFollowerResponse200>>;

    /**
     * Deletes a follower from a deal.
     * Delete a follower from a deal
     */
    deleteDealFollower(requestParameters: DeleteDealFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteDealFollowerResponse200>;

    /**
     * Deletes a participant from a deal.
     * @summary Delete a participant from a deal
     * @param {number} id The ID of the deal
     * @param {number} dealParticipantId The ID of the participant of the deal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    deleteDealParticipantRaw(requestParameters: DeleteDealParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteDealParticipantResponse200>>;

    /**
     * Deletes a participant from a deal.
     * Delete a participant from a deal
     */
    deleteDealParticipant(requestParameters: DeleteDealParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteDealParticipantResponse200>;

    /**
     * Deletes a product attachment from a deal, using the `product_attachment_id`.
     * @summary Delete an attached product from a deal
     * @param {number} id The ID of the deal
     * @param {number} productAttachmentId The product attachment ID. This is returned as &#x60;product_attachment_id&#x60; after attaching a product to a deal or as id when listing the products attached to a deal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    deleteDealProductRaw(requestParameters: DeleteDealProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteDealProductResponse200>>;

    /**
     * Deletes a product attachment from a deal, using the `product_attachment_id`.
     * Delete an attached product from a deal
     */
    deleteDealProduct(requestParameters: DeleteDealProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteDealProductResponse200>;

    /**
     * Marks multiple deals as deleted.
     * @summary Delete multiple deals in bulk
     * @param {string} ids The comma-separated IDs that will be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    deleteDealsRaw(requestParameters: DeleteDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteDealsResponse200>>;

    /**
     * Marks multiple deals as deleted.
     * Delete multiple deals in bulk
     */
    deleteDeals(requestParameters: DeleteDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteDealsResponse200>;

    /**
     * Duplicates a deal.
     * @summary Duplicate deal
     * @param {number} id The ID of the deal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    duplicateDealRaw(requestParameters: DuplicateDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DuplicateDealResponse200>>;

    /**
     * Duplicates a deal.
     * Duplicate deal
     */
    duplicateDeal(requestParameters: DuplicateDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DuplicateDealResponse200>;

    /**
     * Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals – such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of dealFields. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-details-of-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">getting details of a deal</a>.
     * @summary Get details of a deal
     * @param {number} id The ID of the deal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    getDealRaw(requestParameters: GetDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDealResponse200>>;

    /**
     * Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals – such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of dealFields. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-details-of-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">getting details of a deal</a>.
     * Get details of a deal
     */
    getDeal(requestParameters: GetDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDealResponse200>;

    /**
     * Lists activities associated with a deal.
     * @summary List activities associated with a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [done] Whether the activity is done or not. 0 &#x3D; Not done, 1 &#x3D; Done. If omitted, returns both Done and Not done activities.
     * @param {string} [exclude] A comma-separated string of activity IDs to exclude from result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    getDealActivitiesRaw(requestParameters: GetDealActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDealActivitiesResponse200>>;

    /**
     * Lists activities associated with a deal.
     * List activities associated with a deal
     */
    getDealActivities(requestParameters: GetDealActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDealActivitiesResponse200>;

    /**
     * Lists files associated with a deal.
     * @summary List files attached to a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [includeDeletedFiles] When enabled, the list of files will also include deleted files. Please note that trying to download these files will not work.
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys). Supported fields: &#x60;id&#x60;, &#x60;user_id&#x60;, &#x60;deal_id&#x60;, &#x60;person_id&#x60;, &#x60;org_id&#x60;, &#x60;product_id&#x60;, &#x60;add_time&#x60;, &#x60;update_time&#x60;, &#x60;file_name&#x60;, &#x60;file_type&#x60;, &#x60;file_size&#x60;, &#x60;comment&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    getDealFilesRaw(requestParameters: GetDealFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedFilesResponse200>>;

    /**
     * Lists files associated with a deal.
     * List files attached to a deal
     */
    getDealFiles(requestParameters: GetDealFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedFilesResponse200>;

    /**
     * Lists the followers of a deal.
     * @summary List followers of a deal
     * @param {number} id The ID of the deal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    getDealFollowersRaw(requestParameters: GetDealFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedFollowersResponse200>>;

    /**
     * Lists the followers of a deal.
     * List followers of a deal
     */
    getDealFollowers(requestParameters: GetDealFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedFollowersResponse200>;

    /**
     * Lists mail messages associated with a deal.
     * @summary List mail messages associated with a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    getDealMailMessagesRaw(requestParameters: GetDealMailMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedMailMessagesResponse200>>;

    /**
     * Lists mail messages associated with a deal.
     * List mail messages associated with a deal
     */
    getDealMailMessages(requestParameters: GetDealMailMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedMailMessagesResponse200>;

    /**
     * Lists the participants associated with a deal.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * @summary List participants of a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    getDealParticipantsRaw(requestParameters: GetDealParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDealParticipantsResponse200>>;

    /**
     * Lists the participants associated with a deal.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * List participants of a deal
     */
    getDealParticipants(requestParameters: GetDealParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDealParticipantsResponse200>;

    /**
     * Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.
     * @summary List all persons associated with a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    getDealPersonsRaw(requestParameters: GetDealPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPersonsResponse200>>;

    /**
     * Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.
     * List all persons associated with a deal
     */
    getDealPersons(requestParameters: GetDealPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPersonsResponse200>;

    /**
     * Lists products attached to a deal.
     * @summary List products attached to a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [includeProductData] Whether to fetch product data along with each attached product (1) or not (0, default)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    getDealProductsRaw(requestParameters: GetDealProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListProductsResponse200>>;

    /**
     * Lists products attached to a deal.
     * List products attached to a deal
     */
    getDealProducts(requestParameters: GetDealProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListProductsResponse200>;

    /**
     * Lists updates about a deal.
     * @summary List updates about a deal
     * @param {number} id The ID of the deal
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [allChanges] Whether to show custom field updates or not. 1 &#x3D; Include custom field changes. If omitted returns changes without custom field updates.
     * @param {string} [items] A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    getDealUpdatesRaw(requestParameters: GetDealUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDealUpdatesResponse200>>;

    /**
     * Lists updates about a deal.
     * List updates about a deal
     */
    getDealUpdates(requestParameters: GetDealUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDealUpdatesResponse200>;

    /**
     * Lists the users permitted to access a deal.
     * @summary List permitted users
     * @param {number} id The ID of the deal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    getDealUsersRaw(requestParameters: GetDealUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPermittedUsersResponse200>>;

    /**
     * Lists the users permitted to access a deal.
     * List permitted users
     */
    getDealUsers(requestParameters: GetDealUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPermittedUsersResponse200>;

    /**
     * Returns all deals. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-all-deals\" target=\"_blank\" rel=\"noopener noreferrer\">getting all deals</a>.
     * @summary Get all deals
     * @param {number} [userId] If supplied, only deals matching the given user will be returned. However, &#x60;filter_id&#x60; and &#x60;owned_by_you&#x60; takes precedence over &#x60;user_id&#x60; when supplied.
     * @param {number} [filterId] The ID of the filter to use
     * @param {number} [stageId] If supplied, only deals within the given stage will be returned
     * @param {'open' | 'won' | 'lost' | 'deleted' | 'all_not_deleted'} [status] Only fetch deals with a specific status. If omitted, all not deleted deals are fetched.
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {string} [sort] The field names and sorting mode separated by a comma (&#x60;field_name_1 ASC&#x60;, &#x60;field_name_2 DESC&#x60;). Only first-level field keys are supported (no nested keys).
     * @param {0 | 1} [ownedByYou] When supplied, only deals owned by you are returned. However, &#x60;filter_id&#x60; takes precedence over &#x60;owned_by_you&#x60; when both are supplied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    getDealsRaw(requestParameters: GetDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDealsResponse200>>;

    /**
     * Returns all deals. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-all-deals\" target=\"_blank\" rel=\"noopener noreferrer\">getting all deals</a>.
     * Get all deals
     */
    getDeals(requestParameters: GetDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDealsResponse200>;

    /**
     * Returns a summary of all the deals.
     * @summary Get deals summary
     * @param {'open' | 'won' | 'lost'} [status] Only fetch deals with a specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost
     * @param {number} [filterId] &lt;code&gt;user_id&lt;/code&gt; will not be considered. Only deals matching the given filter will be returned.
     * @param {number} [userId] Only deals matching the given user will be returned. &#x60;user_id&#x60; will not be considered if you use &#x60;filter_id&#x60;.
     * @param {number} [stageId] Only deals within the given stage will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    getDealsSummaryRaw(requestParameters: GetDealsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDealsSummaryResponse200>>;

    /**
     * Returns a summary of all the deals.
     * Get deals summary
     */
    getDealsSummary(requestParameters: GetDealsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDealsSummaryResponse200>;

    /**
     * Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (`field_key`) — e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups — January, February and March — based on the value of the given `field_key`.
     * @summary Get deals timeline
     * @param {Date} startDate The date when the first interval starts. Format: YYYY-MM-DD
     * @param {'day' | 'week' | 'month' | 'quarter'} interval The type of the interval&lt;table&gt;&lt;tr&gt;&lt;th&gt;Value&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;day&#x60;&lt;/td&gt;&lt;td&gt;Day&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;week&#x60;&lt;/td&gt;&lt;td&gt;A full week (7 days) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;month&#x60;&lt;/td&gt;&lt;td&gt;A full month (depending on the number of days in given month) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&#x60;quarter&#x60;&lt;/td&gt;&lt;td&gt;A full quarter (3 months) starting from &#x60;start_date&#x60;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
     * @param {number} amount The number of given intervals, starting from &#x60;start_date&#x60;, to fetch. E.g. 3 (months).
     * @param {string} fieldKey The date field key which deals will be retrieved from
     * @param {number} [userId] If supplied, only deals matching the given user will be returned
     * @param {number} [pipelineId] If supplied, only deals matching the given pipeline will be returned
     * @param {number} [filterId] If supplied, only deals matching the given filter will be returned
     * @param {0 | 1} [excludeDeals] Whether to exclude deals list (1) or not (0). Note that when deals are excluded, the timeline summary (counts and values) is still returned.
     * @param {string} [totalsConvertCurrency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;totals_converted&#x60; is returned per each interval which contains the currency-converted total amounts in the given currency. You may also set this parameter to &#x60;default_currency&#x60; in which case the user\&#39;s default currency is used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    getDealsTimelineRaw(requestParameters: GetDealsTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDealsTimelineResponse200>>;

    /**
     * Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (`field_key`) — e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups — January, February and March — based on the value of the given `field_key`.
     * Get deals timeline
     */
    getDealsTimeline(requestParameters: GetDealsTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDealsTimelineResponse200>;

    /**
     * Merges a deal with another deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-deals\" target=\"_blank\" rel=\"noopener noreferrer\">merging two deals</a>.
     * @summary Merge two deals
     * @param {number} id The ID of the deal
     * @param {MergeDealsRequest} [mergeDealsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    mergeDealsRaw(requestParameters: MergeDealsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MergeDealsResponse200>>;

    /**
     * Merges a deal with another deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-deals\" target=\"_blank\" rel=\"noopener noreferrer\">merging two deals</a>.
     * Merge two deals
     */
    mergeDeals(requestParameters: MergeDealsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MergeDealsResponse200>;

    /**
     * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
     * @summary Search deals
     * @param {string} term The search term to look for. Minimum 2 characters (or 1 if using &#x60;exact_match&#x60;).
     * @param {'custom_fields' | 'notes' | 'title'} [fields] A comma-separated string array. The fields to perform the search from. Defaults to all of them.
     * @param {boolean} [exactMatch] When enabled, only full exact matches against the given term are returned. It is &lt;b&gt;not&lt;/b&gt; case sensitive.
     * @param {number} [personId] Will filter deals by the provided person ID. The upper limit of found deals associated with the person is 2000.
     * @param {number} [organizationId] Will filter deals by the provided organization ID. The upper limit of found deals associated with the organization is 2000.
     * @param {'open' | 'won' | 'lost'} [status] Will filter deals by the provided specific status. open &#x3D; Open, won &#x3D; Won, lost &#x3D; Lost. The upper limit of found deals associated with the status is 2000.
     * @param {'deal.cc_email'} [includeFields] Supports including optional fields in the results which are not provided by default
     * @param {number} [start] Pagination start. Note that the pagination is based on main results and does not include related items when using &#x60;search_for_related_items&#x60; parameter.
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    searchDealsRaw(requestParameters: SearchDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchDealsResponse200>>;

    /**
     * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
     * Search deals
     */
    searchDeals(requestParameters: SearchDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchDealsResponse200>;

    /**
     * Updates the properties of a deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">updating a deal</a>.
     * @summary Update a deal
     * @param {number} id The ID of the deal
     * @param {UpdateDealRequest} [updateDealRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    updateDealRaw(requestParameters: UpdateDealOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DealResponse200>>;

    /**
     * Updates the properties of a deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">updating a deal</a>.
     * Update a deal
     */
    updateDeal(requestParameters: UpdateDealOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DealResponse200>;

    /**
     * Updates product attachment details.
     * @summary Update product attachment details of the deal-product (a product already attached to a deal)
     * @param {number} id The ID of the deal
     * @param {number} productAttachmentId The ID of the deal-product (the ID of the product attached to the deal)
     * @param {BasicDealProductRequest} [basicDealProductRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApiInterface
     */
    updateDealProductRaw(requestParameters: UpdateDealProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProductAttachementResponse200>>;

    /**
     * Updates product attachment details.
     * Update product attachment details of the deal-product (a product already attached to a deal)
     */
    updateDealProduct(requestParameters: UpdateDealProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProductAttachementResponse200>;

}

/**
 * 
 */
export class DealsApi extends runtime.BaseAPI implements DealsApiInterface {

    /**
     * Adds a new deal. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>.
     * Add a deal
     */
    async addDealRaw(requestParameters: AddDealOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DealResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/deals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddDealRequestToJSON(requestParameters.addDealRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DealResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new deal. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/creating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">adding a deal</a>.
     * Add a deal
     */
    async addDeal(requestParameters: AddDealOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DealResponse200> {
        const response = await this.addDealRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a follower to a deal.
     * Add a follower to a deal
     */
    async addDealFollowerRaw(requestParameters: AddDealFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddDealFollowerResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addDealFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/followers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddDealFollowerRequestToJSON(requestParameters.addDealFollowerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddDealFollowerResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a follower to a deal.
     * Add a follower to a deal
     */
    async addDealFollower(requestParameters: AddDealFollowerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddDealFollowerResponse200> {
        const response = await this.addDealFollowerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a participant to a deal.
     * Add a participant to a deal
     */
    async addDealParticipantRaw(requestParameters: AddDealParticipantOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddDealParticipantResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addDealParticipant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/participants`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddDealParticipantRequestToJSON(requestParameters.addDealParticipantRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddDealParticipantResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a participant to a deal.
     * Add a participant to a deal
     */
    async addDealParticipant(requestParameters: AddDealParticipantOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddDealParticipantResponse200> {
        const response = await this.addDealParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a product to the deal.
     * Add a product to the deal, eventually creating a new item called a deal-product
     */
    async addDealProductRaw(requestParameters: AddDealProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddProductAttachementResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addDealProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full", "products:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/products`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddDealProductRequestToJSON(requestParameters.addDealProductRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAddProductAttachementResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a product to the deal.
     * Add a product to the deal, eventually creating a new item called a deal-product
     */
    async addDealProduct(requestParameters: AddDealProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddProductAttachementResponse200> {
        const response = await this.addDealProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks a deal as deleted.
     * Delete a deal
     */
    async deleteDealRaw(requestParameters: DeleteDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteDealResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDeal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteDealResponse200FromJSON(jsonValue));
    }

    /**
     * Marks a deal as deleted.
     * Delete a deal
     */
    async deleteDeal(requestParameters: DeleteDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteDealResponse200> {
        const response = await this.deleteDealRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a follower from a deal.
     * Delete a follower from a deal
     */
    async deleteDealFollowerRaw(requestParameters: DeleteDealFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteDealFollowerResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDealFollower.');
        }

        if (requestParameters.followerId === null || requestParameters.followerId === undefined) {
            throw new runtime.RequiredError('followerId','Required parameter requestParameters.followerId was null or undefined when calling deleteDealFollower.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/followers/{follower_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"follower_id"}}`, encodeURIComponent(String(requestParameters.followerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteDealFollowerResponse200FromJSON(jsonValue));
    }

    /**
     * Deletes a follower from a deal.
     * Delete a follower from a deal
     */
    async deleteDealFollower(requestParameters: DeleteDealFollowerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteDealFollowerResponse200> {
        const response = await this.deleteDealFollowerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a participant from a deal.
     * Delete a participant from a deal
     */
    async deleteDealParticipantRaw(requestParameters: DeleteDealParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteDealParticipantResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDealParticipant.');
        }

        if (requestParameters.dealParticipantId === null || requestParameters.dealParticipantId === undefined) {
            throw new runtime.RequiredError('dealParticipantId','Required parameter requestParameters.dealParticipantId was null or undefined when calling deleteDealParticipant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/participants/{deal_participant_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"deal_participant_id"}}`, encodeURIComponent(String(requestParameters.dealParticipantId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteDealParticipantResponse200FromJSON(jsonValue));
    }

    /**
     * Deletes a participant from a deal.
     * Delete a participant from a deal
     */
    async deleteDealParticipant(requestParameters: DeleteDealParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteDealParticipantResponse200> {
        const response = await this.deleteDealParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a product attachment from a deal, using the `product_attachment_id`.
     * Delete an attached product from a deal
     */
    async deleteDealProductRaw(requestParameters: DeleteDealProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteDealProductResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDealProduct.');
        }

        if (requestParameters.productAttachmentId === null || requestParameters.productAttachmentId === undefined) {
            throw new runtime.RequiredError('productAttachmentId','Required parameter requestParameters.productAttachmentId was null or undefined when calling deleteDealProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full", "products:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/products/{product_attachment_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"product_attachment_id"}}`, encodeURIComponent(String(requestParameters.productAttachmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteDealProductResponse200FromJSON(jsonValue));
    }

    /**
     * Deletes a product attachment from a deal, using the `product_attachment_id`.
     * Delete an attached product from a deal
     */
    async deleteDealProduct(requestParameters: DeleteDealProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteDealProductResponse200> {
        const response = await this.deleteDealProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks multiple deals as deleted.
     * Delete multiple deals in bulk
     */
    async deleteDealsRaw(requestParameters: DeleteDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteDealsResponse200>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError('ids','Required parameter requestParameters.ids was null or undefined when calling deleteDeals.');
        }

        const queryParameters: any = {};

        if (requestParameters.ids !== undefined) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/deals`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteDealsResponse200FromJSON(jsonValue));
    }

    /**
     * Marks multiple deals as deleted.
     * Delete multiple deals in bulk
     */
    async deleteDeals(requestParameters: DeleteDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteDealsResponse200> {
        const response = await this.deleteDealsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Duplicates a deal.
     * Duplicate deal
     */
    async duplicateDealRaw(requestParameters: DuplicateDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DuplicateDealResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling duplicateDeal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/duplicate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DuplicateDealResponse200FromJSON(jsonValue));
    }

    /**
     * Duplicates a deal.
     * Duplicate deal
     */
    async duplicateDeal(requestParameters: DuplicateDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DuplicateDealResponse200> {
        const response = await this.duplicateDealRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals – such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of dealFields. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-details-of-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">getting details of a deal</a>.
     * Get details of a deal
     */
    async getDealRaw(requestParameters: GetDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDealResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDeal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDealResponse200FromJSON(jsonValue));
    }

    /**
     * Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals – such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of dealFields. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-details-of-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">getting details of a deal</a>.
     * Get details of a deal
     */
    async getDeal(requestParameters: GetDealRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDealResponse200> {
        const response = await this.getDealRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists activities associated with a deal.
     * List activities associated with a deal
     */
    async getDealActivitiesRaw(requestParameters: GetDealActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDealActivitiesResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDealActivities.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.done !== undefined) {
            queryParameters['done'] = requestParameters.done;
        }

        if (requestParameters.exclude !== undefined) {
            queryParameters['exclude'] = requestParameters.exclude;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["activities:read", "activities:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/activities`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDealActivitiesResponse200FromJSON(jsonValue));
    }

    /**
     * Lists activities associated with a deal.
     * List activities associated with a deal
     */
    async getDealActivities(requestParameters: GetDealActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDealActivitiesResponse200> {
        const response = await this.getDealActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists files associated with a deal.
     * List files attached to a deal
     */
    async getDealFilesRaw(requestParameters: GetDealFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedFilesResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDealFiles.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.includeDeletedFiles !== undefined) {
            queryParameters['include_deleted_files'] = requestParameters.includeDeletedFiles;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/files`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedFilesResponse200FromJSON(jsonValue));
    }

    /**
     * Lists files associated with a deal.
     * List files attached to a deal
     */
    async getDealFiles(requestParameters: GetDealFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedFilesResponse200> {
        const response = await this.getDealFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists the followers of a deal.
     * List followers of a deal
     */
    async getDealFollowersRaw(requestParameters: GetDealFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedFollowersResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDealFollowers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/followers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedFollowersResponse200FromJSON(jsonValue));
    }

    /**
     * Lists the followers of a deal.
     * List followers of a deal
     */
    async getDealFollowers(requestParameters: GetDealFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedFollowersResponse200> {
        const response = await this.getDealFollowersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists mail messages associated with a deal.
     * List mail messages associated with a deal
     */
    async getDealMailMessagesRaw(requestParameters: GetDealMailMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAssociatedMailMessagesResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDealMailMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["mail:read", "mail:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/mailMessages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAssociatedMailMessagesResponse200FromJSON(jsonValue));
    }

    /**
     * Lists mail messages associated with a deal.
     * List mail messages associated with a deal
     */
    async getDealMailMessages(requestParameters: GetDealMailMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAssociatedMailMessagesResponse200> {
        const response = await this.getDealMailMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists the participants associated with a deal.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * List participants of a deal
     */
    async getDealParticipantsRaw(requestParameters: GetDealParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDealParticipantsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDealParticipants.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/participants`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDealParticipantsResponse200FromJSON(jsonValue));
    }

    /**
     * Lists the participants associated with a deal.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
     * List participants of a deal
     */
    async getDealParticipants(requestParameters: GetDealParticipantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDealParticipantsResponse200> {
        const response = await this.getDealParticipantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.
     * List all persons associated with a deal
     */
    async getDealPersonsRaw(requestParameters: GetDealPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPersonsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDealPersons.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["contacts:read", "contacts:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/persons`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPersonsResponse200FromJSON(jsonValue));
    }

    /**
     * Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.
     * List all persons associated with a deal
     */
    async getDealPersons(requestParameters: GetDealPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPersonsResponse200> {
        const response = await this.getDealPersonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists products attached to a deal.
     * List products attached to a deal
     */
    async getDealProductsRaw(requestParameters: GetDealProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListProductsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDealProducts.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.includeProductData !== undefined) {
            queryParameters['include_product_data'] = requestParameters.includeProductData;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["products:read", "products:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/products`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListProductsResponse200FromJSON(jsonValue));
    }

    /**
     * Lists products attached to a deal.
     * List products attached to a deal
     */
    async getDealProducts(requestParameters: GetDealProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListProductsResponse200> {
        const response = await this.getDealProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists updates about a deal.
     * List updates about a deal
     */
    async getDealUpdatesRaw(requestParameters: GetDealUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDealUpdatesResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDealUpdates.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.allChanges !== undefined) {
            queryParameters['all_changes'] = requestParameters.allChanges;
        }

        if (requestParameters.items !== undefined) {
            queryParameters['items'] = requestParameters.items;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recents:read"]);
        }

        const response = await this.request({
            path: `/deals/{id}/flow`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDealUpdatesResponse200FromJSON(jsonValue));
    }

    /**
     * Lists updates about a deal.
     * List updates about a deal
     */
    async getDealUpdates(requestParameters: GetDealUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDealUpdatesResponse200> {
        const response = await this.getDealUpdatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists the users permitted to access a deal.
     * List permitted users
     */
    async getDealUsersRaw(requestParameters: GetDealUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPermittedUsersResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDealUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/deals/{id}/permittedUsers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPermittedUsersResponse200FromJSON(jsonValue));
    }

    /**
     * Lists the users permitted to access a deal.
     * List permitted users
     */
    async getDealUsers(requestParameters: GetDealUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPermittedUsersResponse200> {
        const response = await this.getDealUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all deals. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-all-deals\" target=\"_blank\" rel=\"noopener noreferrer\">getting all deals</a>.
     * Get all deals
     */
    async getDealsRaw(requestParameters: GetDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDealsResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter_id'] = requestParameters.filterId;
        }

        if (requestParameters.stageId !== undefined) {
            queryParameters['stage_id'] = requestParameters.stageId;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.ownedByYou !== undefined) {
            queryParameters['owned_by_you'] = requestParameters.ownedByYou;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/deals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDealsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns all deals. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/getting-all-deals\" target=\"_blank\" rel=\"noopener noreferrer\">getting all deals</a>.
     * Get all deals
     */
    async getDeals(requestParameters: GetDealsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDealsResponse200> {
        const response = await this.getDealsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a summary of all the deals.
     * Get deals summary
     */
    async getDealsSummaryRaw(requestParameters: GetDealsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDealsSummaryResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter_id'] = requestParameters.filterId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.stageId !== undefined) {
            queryParameters['stage_id'] = requestParameters.stageId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/deals/summary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDealsSummaryResponse200FromJSON(jsonValue));
    }

    /**
     * Returns a summary of all the deals.
     * Get deals summary
     */
    async getDealsSummary(requestParameters: GetDealsSummaryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDealsSummaryResponse200> {
        const response = await this.getDealsSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (`field_key`) — e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups — January, February and March — based on the value of the given `field_key`.
     * Get deals timeline
     */
    async getDealsTimelineRaw(requestParameters: GetDealsTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDealsTimelineResponse200>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getDealsTimeline.');
        }

        if (requestParameters.interval === null || requestParameters.interval === undefined) {
            throw new runtime.RequiredError('interval','Required parameter requestParameters.interval was null or undefined when calling getDealsTimeline.');
        }

        if (requestParameters.amount === null || requestParameters.amount === undefined) {
            throw new runtime.RequiredError('amount','Required parameter requestParameters.amount was null or undefined when calling getDealsTimeline.');
        }

        if (requestParameters.fieldKey === null || requestParameters.fieldKey === undefined) {
            throw new runtime.RequiredError('fieldKey','Required parameter requestParameters.fieldKey was null or undefined when calling getDealsTimeline.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.interval !== undefined) {
            queryParameters['interval'] = requestParameters.interval;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.fieldKey !== undefined) {
            queryParameters['field_key'] = requestParameters.fieldKey;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.pipelineId !== undefined) {
            queryParameters['pipeline_id'] = requestParameters.pipelineId;
        }

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter_id'] = requestParameters.filterId;
        }

        if (requestParameters.excludeDeals !== undefined) {
            queryParameters['exclude_deals'] = requestParameters.excludeDeals;
        }

        if (requestParameters.totalsConvertCurrency !== undefined) {
            queryParameters['totals_convert_currency'] = requestParameters.totalsConvertCurrency;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/deals/timeline`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDealsTimelineResponse200FromJSON(jsonValue));
    }

    /**
     * Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (`field_key`) — e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups — January, February and March — based on the value of the given `field_key`.
     * Get deals timeline
     */
    async getDealsTimeline(requestParameters: GetDealsTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDealsTimelineResponse200> {
        const response = await this.getDealsTimelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Merges a deal with another deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-deals\" target=\"_blank\" rel=\"noopener noreferrer\">merging two deals</a>.
     * Merge two deals
     */
    async mergeDealsRaw(requestParameters: MergeDealsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MergeDealsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mergeDeals.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}/merge`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MergeDealsRequestToJSON(requestParameters.mergeDealsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MergeDealsResponse200FromJSON(jsonValue));
    }

    /**
     * Merges a deal with another deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/merging-two-deals\" target=\"_blank\" rel=\"noopener noreferrer\">merging two deals</a>.
     * Merge two deals
     */
    async mergeDeals(requestParameters: MergeDealsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MergeDealsResponse200> {
        const response = await this.mergeDealsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
     * Search deals
     */
    async searchDealsRaw(requestParameters: SearchDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchDealsResponse200>> {
        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling searchDeals.');
        }

        const queryParameters: any = {};

        if (requestParameters.term !== undefined) {
            queryParameters['term'] = requestParameters.term;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.exactMatch !== undefined) {
            queryParameters['exact_match'] = requestParameters.exactMatch;
        }

        if (requestParameters.personId !== undefined) {
            queryParameters['person_id'] = requestParameters.personId;
        }

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organization_id'] = requestParameters.organizationId;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.includeFields !== undefined) {
            queryParameters['include_fields'] = requestParameters.includeFields;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full", "search:read"]);
        }

        const response = await this.request({
            path: `/deals/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchDealsResponse200FromJSON(jsonValue));
    }

    /**
     * Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
     * Search deals
     */
    async searchDeals(requestParameters: SearchDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchDealsResponse200> {
        const response = await this.searchDealsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the properties of a deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">updating a deal</a>.
     * Update a deal
     */
    async updateDealRaw(requestParameters: UpdateDealOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DealResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDeal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:full"]);
        }

        const response = await this.request({
            path: `/deals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDealRequestToJSON(requestParameters.updateDealRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DealResponse200FromJSON(jsonValue));
    }

    /**
     * Updates the properties of a deal. For more information, see the tutorial for <a href=\"https://pipedrive.readme.io/docs/updating-a-deal\" target=\"_blank\" rel=\"noopener noreferrer\">updating a deal</a>.
     * Update a deal
     */
    async updateDeal(requestParameters: UpdateDealOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DealResponse200> {
        const response = await this.updateDealRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates product attachment details.
     * Update product attachment details of the deal-product (a product already attached to a deal)
     */
    async updateDealProductRaw(requestParameters: UpdateDealProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProductAttachementResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDealProduct.');
        }

        if (requestParameters.productAttachmentId === null || requestParameters.productAttachmentId === undefined) {
            throw new runtime.RequiredError('productAttachmentId','Required parameter requestParameters.productAttachmentId was null or undefined when calling updateDealProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/deals/{id}/products/{product_attachment_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"product_attachment_id"}}`, encodeURIComponent(String(requestParameters.productAttachmentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BasicDealProductRequestToJSON(requestParameters.basicDealProductRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProductAttachementResponse200FromJSON(jsonValue));
    }

    /**
     * Updates product attachment details.
     * Update product attachment details of the deal-product (a product already attached to a deal)
     */
    async updateDealProduct(requestParameters: UpdateDealProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProductAttachementResponse200> {
        const response = await this.updateDealProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetDealActivitiesDoneEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetDealFilesIncludeDeletedFilesEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetDealProductsIncludeProductDataEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetDealsStatusEnum {
    Open = 'open',
    Won = 'won',
    Lost = 'lost',
    Deleted = 'deleted',
    AllNotDeleted = 'all_not_deleted'
}
/**
  * @export
  * @enum {string}
  */
export enum GetDealsOwnedByYouEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetDealsSummaryStatusEnum {
    Open = 'open',
    Won = 'won',
    Lost = 'lost'
}
/**
  * @export
  * @enum {string}
  */
export enum GetDealsTimelineIntervalEnum {
    Day = 'day',
    Week = 'week',
    Month = 'month',
    Quarter = 'quarter'
}
/**
  * @export
  * @enum {string}
  */
export enum GetDealsTimelineExcludeDealsEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum SearchDealsFieldsEnum {
    CustomFields = 'custom_fields',
    Notes = 'notes',
    Title = 'title'
}
/**
  * @export
  * @enum {string}
  */
export enum SearchDealsExactMatchEnum {
    True = true,
    False = false
}
/**
  * @export
  * @enum {string}
  */
export enum SearchDealsStatusEnum {
    Open = 'open',
    Won = 'won',
    Lost = 'lost'
}
/**
  * @export
  * @enum {string}
  */
export enum SearchDealsIncludeFieldsEnum {
    DealCcEmail = 'deal.cc_email'
}
