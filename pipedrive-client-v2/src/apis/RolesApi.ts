/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddOrUpdateRoleSettingRequest,
  AddOrUpdateRoleSettingResponse200,
  AddRoleAssignmentRequest,
  AddRoleAssignmentResponse200,
  AddRoleRequest,
  AddRoleResponse200,
  BaseRoleRequest,
  DeleteRoleAssignmentRequest,
  DeleteRoleAssignmentResponse200,
  DeleteRoleResponse200,
  GetRoleResponse200,
  GetRoleSettingsResponse200,
  GetRoleSubrolesResponse200,
  GetRolesResponse200,
  GetUserRoleAssignmentsResponse200,
  UpdateRoleResponse200,
} from '../models';
import {
    AddOrUpdateRoleSettingRequestFromJSON,
    AddOrUpdateRoleSettingRequestToJSON,
    AddOrUpdateRoleSettingResponse200FromJSON,
    AddOrUpdateRoleSettingResponse200ToJSON,
    AddRoleAssignmentRequestFromJSON,
    AddRoleAssignmentRequestToJSON,
    AddRoleAssignmentResponse200FromJSON,
    AddRoleAssignmentResponse200ToJSON,
    AddRoleRequestFromJSON,
    AddRoleRequestToJSON,
    AddRoleResponse200FromJSON,
    AddRoleResponse200ToJSON,
    BaseRoleRequestFromJSON,
    BaseRoleRequestToJSON,
    DeleteRoleAssignmentRequestFromJSON,
    DeleteRoleAssignmentRequestToJSON,
    DeleteRoleAssignmentResponse200FromJSON,
    DeleteRoleAssignmentResponse200ToJSON,
    DeleteRoleResponse200FromJSON,
    DeleteRoleResponse200ToJSON,
    GetRoleResponse200FromJSON,
    GetRoleResponse200ToJSON,
    GetRoleSettingsResponse200FromJSON,
    GetRoleSettingsResponse200ToJSON,
    GetRoleSubrolesResponse200FromJSON,
    GetRoleSubrolesResponse200ToJSON,
    GetRolesResponse200FromJSON,
    GetRolesResponse200ToJSON,
    GetUserRoleAssignmentsResponse200FromJSON,
    GetUserRoleAssignmentsResponse200ToJSON,
    UpdateRoleResponse200FromJSON,
    UpdateRoleResponse200ToJSON,
} from '../models';

export interface AddOrUpdateRoleSettingOperationRequest {
    id: number;
    addOrUpdateRoleSettingRequest?: AddOrUpdateRoleSettingRequest;
}

export interface AddRoleOperationRequest {
    addRoleRequest?: AddRoleRequest;
}

export interface AddRoleAssignmentOperationRequest {
    id: number;
    addRoleAssignmentRequest?: AddRoleAssignmentRequest;
}

export interface DeleteRoleRequest {
    id: number;
}

export interface DeleteRoleAssignmentOperationRequest {
    id: number;
    deleteRoleAssignmentRequest?: DeleteRoleAssignmentRequest;
}

export interface GetRoleRequest {
    id: number;
}

export interface GetRoleAssignmentsRequest {
    id: number;
    start?: number;
    limit?: number;
}

export interface GetRoleSettingsRequest {
    id: number;
}

export interface GetRoleSubRolesRequest {
    id: number;
    start?: number;
    limit?: number;
}

export interface GetRolesRequest {
    start?: number;
    limit?: number;
}

export interface UpdateRoleRequest {
    id: number;
    baseRoleRequest?: BaseRoleRequest;
}

/**
 * RolesApi - interface
 * 
 * @export
 * @interface RolesApiInterface
 */
export interface RolesApiInterface {
    /**
     * Adds or updates the visibility setting for a role.
     * @summary Add or update role setting
     * @param {number} id The ID of the role
     * @param {AddOrUpdateRoleSettingRequest} [addOrUpdateRoleSettingRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    addOrUpdateRoleSettingRaw(requestParameters: AddOrUpdateRoleSettingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrUpdateRoleSettingResponse200>>;

    /**
     * Adds or updates the visibility setting for a role.
     * Add or update role setting
     */
    addOrUpdateRoleSetting(requestParameters: AddOrUpdateRoleSettingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrUpdateRoleSettingResponse200>;

    /**
     * Adds a new role.
     * @summary Add a role
     * @param {AddRoleRequest} [addRoleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    addRoleRaw(requestParameters: AddRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddRoleResponse200>>;

    /**
     * Adds a new role.
     * Add a role
     */
    addRole(requestParameters: AddRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddRoleResponse200>;

    /**
     * Assigns a user to a role.
     * @summary Add role assignment
     * @param {number} id The ID of the role
     * @param {AddRoleAssignmentRequest} [addRoleAssignmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    addRoleAssignmentRaw(requestParameters: AddRoleAssignmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddRoleAssignmentResponse200>>;

    /**
     * Assigns a user to a role.
     * Add role assignment
     */
    addRoleAssignment(requestParameters: AddRoleAssignmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddRoleAssignmentResponse200>;

    /**
     * Marks a role as deleted.
     * @summary Delete a role
     * @param {number} id The ID of the role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    deleteRoleRaw(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteRoleResponse200>>;

    /**
     * Marks a role as deleted.
     * Delete a role
     */
    deleteRole(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteRoleResponse200>;

    /**
     * Removes the assigned user from a role and adds to the default role.
     * @summary Delete a role assignment
     * @param {number} id The ID of the role
     * @param {DeleteRoleAssignmentRequest} [deleteRoleAssignmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    deleteRoleAssignmentRaw(requestParameters: DeleteRoleAssignmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteRoleAssignmentResponse200>>;

    /**
     * Removes the assigned user from a role and adds to the default role.
     * Delete a role assignment
     */
    deleteRoleAssignment(requestParameters: DeleteRoleAssignmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteRoleAssignmentResponse200>;

    /**
     * Returns the details of a specific role.
     * @summary Get one role
     * @param {number} id The ID of the role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    getRoleRaw(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRoleResponse200>>;

    /**
     * Returns the details of a specific role.
     * Get one role
     */
    getRole(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRoleResponse200>;

    /**
     * Returns all users assigned to a role.
     * @summary List role assignments
     * @param {number} id The ID of the role
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    getRoleAssignmentsRaw(requestParameters: GetRoleAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserRoleAssignmentsResponse200>>;

    /**
     * Returns all users assigned to a role.
     * List role assignments
     */
    getRoleAssignments(requestParameters: GetRoleAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserRoleAssignmentsResponse200>;

    /**
     * Returns the visibility settings of a specific role.
     * @summary List role settings
     * @param {number} id The ID of the role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    getRoleSettingsRaw(requestParameters: GetRoleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRoleSettingsResponse200>>;

    /**
     * Returns the visibility settings of a specific role.
     * List role settings
     */
    getRoleSettings(requestParameters: GetRoleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRoleSettingsResponse200>;

    /**
     * Returns the direct children of a specific role.
     * @summary List role sub-roles
     * @param {number} id The ID of the role
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    getRoleSubRolesRaw(requestParameters: GetRoleSubRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRoleSubrolesResponse200>>;

    /**
     * Returns the direct children of a specific role.
     * List role sub-roles
     */
    getRoleSubRoles(requestParameters: GetRoleSubRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRoleSubrolesResponse200>;

    /**
     * Returns all the roles within the company.
     * @summary Get all roles
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    getRolesRaw(requestParameters: GetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRolesResponse200>>;

    /**
     * Returns all the roles within the company.
     * Get all roles
     */
    getRoles(requestParameters: GetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRolesResponse200>;

    /**
     * Updates the parent role and/or the name of a specific role.
     * @summary Update role details
     * @param {number} id The ID of the role
     * @param {BaseRoleRequest} [baseRoleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    updateRoleRaw(requestParameters: UpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateRoleResponse200>>;

    /**
     * Updates the parent role and/or the name of a specific role.
     * Update role details
     */
    updateRole(requestParameters: UpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateRoleResponse200>;

}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI implements RolesApiInterface {

    /**
     * Adds or updates the visibility setting for a role.
     * Add or update role setting
     */
    async addOrUpdateRoleSettingRaw(requestParameters: AddOrUpdateRoleSettingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrUpdateRoleSettingResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addOrUpdateRoleSetting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/roles/{id}/settings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOrUpdateRoleSettingRequestToJSON(requestParameters.addOrUpdateRoleSettingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddOrUpdateRoleSettingResponse200FromJSON(jsonValue));
    }

    /**
     * Adds or updates the visibility setting for a role.
     * Add or update role setting
     */
    async addOrUpdateRoleSetting(requestParameters: AddOrUpdateRoleSettingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrUpdateRoleSettingResponse200> {
        const response = await this.addOrUpdateRoleSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new role.
     * Add a role
     */
    async addRoleRaw(requestParameters: AddRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddRoleResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddRoleRequestToJSON(requestParameters.addRoleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddRoleResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new role.
     * Add a role
     */
    async addRole(requestParameters: AddRoleOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddRoleResponse200> {
        const response = await this.addRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns a user to a role.
     * Add role assignment
     */
    async addRoleAssignmentRaw(requestParameters: AddRoleAssignmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddRoleAssignmentResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addRoleAssignment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/roles/{id}/assignments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddRoleAssignmentRequestToJSON(requestParameters.addRoleAssignmentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddRoleAssignmentResponse200FromJSON(jsonValue));
    }

    /**
     * Assigns a user to a role.
     * Add role assignment
     */
    async addRoleAssignment(requestParameters: AddRoleAssignmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddRoleAssignmentResponse200> {
        const response = await this.addRoleAssignmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks a role as deleted.
     * Delete a role
     */
    async deleteRoleRaw(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteRoleResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteRoleResponse200FromJSON(jsonValue));
    }

    /**
     * Marks a role as deleted.
     * Delete a role
     */
    async deleteRole(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteRoleResponse200> {
        const response = await this.deleteRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the assigned user from a role and adds to the default role.
     * Delete a role assignment
     */
    async deleteRoleAssignmentRaw(requestParameters: DeleteRoleAssignmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteRoleAssignmentResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoleAssignment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/roles/{id}/assignments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteRoleAssignmentRequestToJSON(requestParameters.deleteRoleAssignmentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteRoleAssignmentResponse200FromJSON(jsonValue));
    }

    /**
     * Removes the assigned user from a role and adds to the default role.
     * Delete a role assignment
     */
    async deleteRoleAssignment(requestParameters: DeleteRoleAssignmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteRoleAssignmentResponse200> {
        const response = await this.deleteRoleAssignmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the details of a specific role.
     * Get one role
     */
    async getRoleRaw(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRoleResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRoleResponse200FromJSON(jsonValue));
    }

    /**
     * Returns the details of a specific role.
     * Get one role
     */
    async getRole(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRoleResponse200> {
        const response = await this.getRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all users assigned to a role.
     * List role assignments
     */
    async getRoleAssignmentsRaw(requestParameters: GetRoleAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserRoleAssignmentsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoleAssignments.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/roles/{id}/assignments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserRoleAssignmentsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns all users assigned to a role.
     * List role assignments
     */
    async getRoleAssignments(requestParameters: GetRoleAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserRoleAssignmentsResponse200> {
        const response = await this.getRoleAssignmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the visibility settings of a specific role.
     * List role settings
     */
    async getRoleSettingsRaw(requestParameters: GetRoleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRoleSettingsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoleSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/roles/{id}/settings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRoleSettingsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns the visibility settings of a specific role.
     * List role settings
     */
    async getRoleSettings(requestParameters: GetRoleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRoleSettingsResponse200> {
        const response = await this.getRoleSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the direct children of a specific role.
     * List role sub-roles
     */
    async getRoleSubRolesRaw(requestParameters: GetRoleSubRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRoleSubrolesResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoleSubRoles.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/roles/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRoleSubrolesResponse200FromJSON(jsonValue));
    }

    /**
     * Returns the direct children of a specific role.
     * List role sub-roles
     */
    async getRoleSubRoles(requestParameters: GetRoleSubRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRoleSubrolesResponse200> {
        const response = await this.getRoleSubRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all the roles within the company.
     * Get all roles
     */
    async getRolesRaw(requestParameters: GetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRolesResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRolesResponse200FromJSON(jsonValue));
    }

    /**
     * Returns all the roles within the company.
     * Get all roles
     */
    async getRoles(requestParameters: GetRolesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRolesResponse200> {
        const response = await this.getRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the parent role and/or the name of a specific role.
     * Update role details
     */
    async updateRoleRaw(requestParameters: UpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateRoleResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        const response = await this.request({
            path: `/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BaseRoleRequestToJSON(requestParameters.baseRoleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateRoleResponse200FromJSON(jsonValue));
    }

    /**
     * Updates the parent role and/or the name of a specific role.
     * Update role details
     */
    async updateRole(requestParameters: UpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateRoleResponse200> {
        const response = await this.updateRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
