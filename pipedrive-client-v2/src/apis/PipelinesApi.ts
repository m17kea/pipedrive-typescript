/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddPipelineResponse200,
  DeletePipelineResponse200,
  GetPipelineConversionStatisticsResponse200,
  GetPipelineMovementStatisticsResponse200,
  GetPipelineResponse200,
  GetPipelinesResponse200,
  GetStageDealsResponse200,
  PipelineRequest,
  PipelineRequest1,
  UpdatePipelineResponse200,
} from '../models';
import {
    AddPipelineResponse200FromJSON,
    AddPipelineResponse200ToJSON,
    DeletePipelineResponse200FromJSON,
    DeletePipelineResponse200ToJSON,
    GetPipelineConversionStatisticsResponse200FromJSON,
    GetPipelineConversionStatisticsResponse200ToJSON,
    GetPipelineMovementStatisticsResponse200FromJSON,
    GetPipelineMovementStatisticsResponse200ToJSON,
    GetPipelineResponse200FromJSON,
    GetPipelineResponse200ToJSON,
    GetPipelinesResponse200FromJSON,
    GetPipelinesResponse200ToJSON,
    GetStageDealsResponse200FromJSON,
    GetStageDealsResponse200ToJSON,
    PipelineRequestFromJSON,
    PipelineRequestToJSON,
    PipelineRequest1FromJSON,
    PipelineRequest1ToJSON,
    UpdatePipelineResponse200FromJSON,
    UpdatePipelineResponse200ToJSON,
} from '../models';

export interface AddPipelineRequest {
    pipelineRequest?: PipelineRequest;
}

export interface DeletePipelineRequest {
    id: number;
}

export interface GetPipelineRequest {
    id: number;
    totalsConvertCurrency?: string;
}

export interface GetPipelineConversionStatisticsRequest {
    id: number;
    startDate: Date;
    endDate: Date;
    userId?: number;
}

export interface GetPipelineDealsRequest {
    id: number;
    filterId?: number;
    userId?: number;
    everyone?: GetPipelineDealsEveryoneEnum;
    stageId?: number;
    start?: number;
    limit?: number;
    getSummary?: GetPipelineDealsGetSummaryEnum;
    totalsConvertCurrency?: string;
}

export interface GetPipelineMovementStatisticsRequest {
    id: number;
    startDate: Date;
    endDate: Date;
    userId?: number;
}

export interface UpdatePipelineRequest {
    id: number;
    pipelineRequest1?: PipelineRequest1;
}

/**
 * PipelinesApi - interface
 * 
 * @export
 * @interface PipelinesApiInterface
 */
export interface PipelinesApiInterface {
    /**
     * Adds a new pipeline.
     * @summary Add a new pipeline
     * @param {PipelineRequest} [pipelineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    addPipelineRaw(requestParameters: AddPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPipelineResponse200>>;

    /**
     * Adds a new pipeline.
     * Add a new pipeline
     */
    addPipeline(requestParameters: AddPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPipelineResponse200>;

    /**
     * Marks a pipeline as deleted.
     * @summary Delete a pipeline
     * @param {number} id The ID of the pipeline
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    deletePipelineRaw(requestParameters: DeletePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePipelineResponse200>>;

    /**
     * Marks a pipeline as deleted.
     * Delete a pipeline
     */
    deletePipeline(requestParameters: DeletePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePipelineResponse200>;

    /**
     * Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
     * @summary Get one pipeline
     * @param {number} id The ID of the pipeline
     * @param {string} [totalsConvertCurrency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned in &#x60;deals_summary&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    getPipelineRaw(requestParameters: GetPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPipelineResponse200>>;

    /**
     * Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
     * Get one pipeline
     */
    getPipeline(requestParameters: GetPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPipelineResponse200>;

    /**
     * Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
     * @summary Get deals conversion rates in pipeline
     * @param {number} id The ID of the pipeline
     * @param {Date} startDate The start of the period. Date in format of YYYY-MM-DD.
     * @param {Date} endDate The end of the period. Date in format of YYYY-MM-DD.
     * @param {number} [userId] The ID of the user who\&#39;s pipeline metrics statistics to fetch. If omitted, the authorized user will be used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    getPipelineConversionStatisticsRaw(requestParameters: GetPipelineConversionStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPipelineConversionStatisticsResponse200>>;

    /**
     * Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
     * Get deals conversion rates in pipeline
     */
    getPipelineConversionStatistics(requestParameters: GetPipelineConversionStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPipelineConversionStatisticsResponse200>;

    /**
     * Lists deals in a specific pipeline across all its stages.
     * @summary Get deals in a pipeline
     * @param {number} id The ID of the pipeline
     * @param {number} [filterId] If supplied, only deals matching the given filter will be returned
     * @param {number} [userId] If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
     * @param {0 | 1} [everyone] If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered â€“ instead, deals owned by everyone will be returned
     * @param {number} [stageId] If supplied, only deals within the given stage will be returned
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {0 | 1} [getSummary] Whether to include a summary of the pipeline in the &#x60;additional_data&#x60; or not
     * @param {string} [totalsConvertCurrency] The 3-letter currency code of any of the supported currencies. When supplied, &#x60;per_stages_converted&#x60; is returned inside &#x60;deals_summary&#x60; inside &#x60;additional_data&#x60; which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to &#x60;default_currency&#x60; in which case users default currency is used. Only works when &#x60;get_summary&#x60; parameter flag is enabled.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    getPipelineDealsRaw(requestParameters: GetPipelineDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStageDealsResponse200>>;

    /**
     * Lists deals in a specific pipeline across all its stages.
     * Get deals in a pipeline
     */
    getPipelineDeals(requestParameters: GetPipelineDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStageDealsResponse200>;

    /**
     * Returns statistics for deals movements for the given time period.
     * @summary Get deals movements in pipeline
     * @param {number} id The ID of the pipeline
     * @param {Date} startDate The start of the period. Date in format of YYYY-MM-DD.
     * @param {Date} endDate The end of the period. Date in format of YYYY-MM-DD.
     * @param {number} [userId] The ID of the user who\&#39;s pipeline statistics to fetch. If omitted, the authorized user will be used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    getPipelineMovementStatisticsRaw(requestParameters: GetPipelineMovementStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPipelineMovementStatisticsResponse200>>;

    /**
     * Returns statistics for deals movements for the given time period.
     * Get deals movements in pipeline
     */
    getPipelineMovementStatistics(requestParameters: GetPipelineMovementStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPipelineMovementStatisticsResponse200>;

    /**
     * Returns data about all pipelines.
     * @summary Get all pipelines
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    getPipelinesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPipelinesResponse200>>;

    /**
     * Returns data about all pipelines.
     * Get all pipelines
     */
    getPipelines(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPipelinesResponse200>;

    /**
     * Updates the properties of a pipeline.
     * @summary Update a pipeline
     * @param {number} id The ID of the pipeline
     * @param {PipelineRequest1} [pipelineRequest1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApiInterface
     */
    updatePipelineRaw(requestParameters: UpdatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatePipelineResponse200>>;

    /**
     * Updates the properties of a pipeline.
     * Update a pipeline
     */
    updatePipeline(requestParameters: UpdatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatePipelineResponse200>;

}

/**
 * 
 */
export class PipelinesApi extends runtime.BaseAPI implements PipelinesApiInterface {

    /**
     * Adds a new pipeline.
     * Add a new pipeline
     */
    async addPipelineRaw(requestParameters: AddPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPipelineResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/pipelines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PipelineRequestToJSON(requestParameters.pipelineRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPipelineResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new pipeline.
     * Add a new pipeline
     */
    async addPipeline(requestParameters: AddPipelineRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPipelineResponse200> {
        const response = await this.addPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks a pipeline as deleted.
     * Delete a pipeline
     */
    async deletePipelineRaw(requestParameters: DeletePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePipelineResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/pipelines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePipelineResponse200FromJSON(jsonValue));
    }

    /**
     * Marks a pipeline as deleted.
     * Delete a pipeline
     */
    async deletePipeline(requestParameters: DeletePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePipelineResponse200> {
        const response = await this.deletePipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
     * Get one pipeline
     */
    async getPipelineRaw(requestParameters: GetPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPipelineResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPipeline.');
        }

        const queryParameters: any = {};

        if (requestParameters.totalsConvertCurrency !== undefined) {
            queryParameters['totals_convert_currency'] = requestParameters.totalsConvertCurrency;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full", "admin"]);
        }

        const response = await this.request({
            path: `/pipelines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPipelineResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
     * Get one pipeline
     */
    async getPipeline(requestParameters: GetPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPipelineResponse200> {
        const response = await this.getPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
     * Get deals conversion rates in pipeline
     */
    async getPipelineConversionStatisticsRaw(requestParameters: GetPipelineConversionStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPipelineConversionStatisticsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPipelineConversionStatistics.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getPipelineConversionStatistics.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getPipelineConversionStatistics.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/pipelines/{id}/conversion_statistics`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPipelineConversionStatisticsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
     * Get deals conversion rates in pipeline
     */
    async getPipelineConversionStatistics(requestParameters: GetPipelineConversionStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPipelineConversionStatisticsResponse200> {
        const response = await this.getPipelineConversionStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists deals in a specific pipeline across all its stages.
     * Get deals in a pipeline
     */
    async getPipelineDealsRaw(requestParameters: GetPipelineDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStageDealsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPipelineDeals.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter_id'] = requestParameters.filterId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.everyone !== undefined) {
            queryParameters['everyone'] = requestParameters.everyone;
        }

        if (requestParameters.stageId !== undefined) {
            queryParameters['stage_id'] = requestParameters.stageId;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.getSummary !== undefined) {
            queryParameters['get_summary'] = requestParameters.getSummary;
        }

        if (requestParameters.totalsConvertCurrency !== undefined) {
            queryParameters['totals_convert_currency'] = requestParameters.totalsConvertCurrency;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/pipelines/{id}/deals`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStageDealsResponse200FromJSON(jsonValue));
    }

    /**
     * Lists deals in a specific pipeline across all its stages.
     * Get deals in a pipeline
     */
    async getPipelineDeals(requestParameters: GetPipelineDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStageDealsResponse200> {
        const response = await this.getPipelineDealsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns statistics for deals movements for the given time period.
     * Get deals movements in pipeline
     */
    async getPipelineMovementStatisticsRaw(requestParameters: GetPipelineMovementStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPipelineMovementStatisticsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPipelineMovementStatistics.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling getPipelineMovementStatistics.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling getPipelineMovementStatistics.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/pipelines/{id}/movement_statistics`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPipelineMovementStatisticsResponse200FromJSON(jsonValue));
    }

    /**
     * Returns statistics for deals movements for the given time period.
     * Get deals movements in pipeline
     */
    async getPipelineMovementStatistics(requestParameters: GetPipelineMovementStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPipelineMovementStatisticsResponse200> {
        const response = await this.getPipelineMovementStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about all pipelines.
     * Get all pipelines
     */
    async getPipelinesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPipelinesResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full", "admin"]);
        }

        const response = await this.request({
            path: `/pipelines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPipelinesResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about all pipelines.
     * Get all pipelines
     */
    async getPipelines(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPipelinesResponse200> {
        const response = await this.getPipelinesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates the properties of a pipeline.
     * Update a pipeline
     */
    async updatePipelineRaw(requestParameters: UpdatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatePipelineResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePipeline.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/pipelines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PipelineRequest1ToJSON(requestParameters.pipelineRequest1),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatePipelineResponse200FromJSON(jsonValue));
    }

    /**
     * Updates the properties of a pipeline.
     * Update a pipeline
     */
    async updatePipeline(requestParameters: UpdatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatePipelineResponse200> {
        const response = await this.updatePipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetPipelineDealsEveryoneEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetPipelineDealsGetSummaryEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
