/* tslint:disable */
/* eslint-disable */
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddStageRequest,
  DeleteStageResponse200,
  DeleteStagesResponse200,
  GetStageDealsResponse200,
  GetStageResponse200,
  GetStagesResponse200,
  StageResponse200,
  UpdateStageRequest,
} from '../models';
import {
    AddStageRequestFromJSON,
    AddStageRequestToJSON,
    DeleteStageResponse200FromJSON,
    DeleteStageResponse200ToJSON,
    DeleteStagesResponse200FromJSON,
    DeleteStagesResponse200ToJSON,
    GetStageDealsResponse200FromJSON,
    GetStageDealsResponse200ToJSON,
    GetStageResponse200FromJSON,
    GetStageResponse200ToJSON,
    GetStagesResponse200FromJSON,
    GetStagesResponse200ToJSON,
    StageResponse200FromJSON,
    StageResponse200ToJSON,
    UpdateStageRequestFromJSON,
    UpdateStageRequestToJSON,
} from '../models';

export interface AddStageOperationRequest {
    addStageRequest?: AddStageRequest;
}

export interface DeleteStageRequest {
    id: number;
}

export interface DeleteStagesRequest {
    ids: string;
}

export interface GetStageRequest {
    id: number;
    everyone?: GetStageEveryoneEnum;
}

export interface GetStageDealsRequest {
    id: number;
    filterId?: number;
    userId?: number;
    everyone?: GetStageDealsEveryoneEnum;
    start?: number;
    limit?: number;
}

export interface GetStagesRequest {
    pipelineId?: number;
}

export interface UpdateStageOperationRequest {
    id: number;
    updateStageRequest?: UpdateStageRequest;
}

/**
 * StagesApi - interface
 * 
 * @export
 * @interface StagesApiInterface
 */
export interface StagesApiInterface {
    /**
     * Adds a new stage, returns the ID upon success.
     * @summary Add a new stage
     * @param {AddStageRequest} [addStageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StagesApiInterface
     */
    addStageRaw(requestParameters: AddStageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageResponse200>>;

    /**
     * Adds a new stage, returns the ID upon success.
     * Add a new stage
     */
    addStage(requestParameters: AddStageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageResponse200>;

    /**
     * Marks a stage as deleted.
     * @summary Delete a stage
     * @param {number} id The ID of the stage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StagesApiInterface
     */
    deleteStageRaw(requestParameters: DeleteStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteStageResponse200>>;

    /**
     * Marks a stage as deleted.
     * Delete a stage
     */
    deleteStage(requestParameters: DeleteStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteStageResponse200>;

    /**
     * Marks multiple stages as deleted.
     * @summary Delete multiple stages in bulk
     * @param {string} ids The comma-separated stage IDs to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StagesApiInterface
     */
    deleteStagesRaw(requestParameters: DeleteStagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteStagesResponse200>>;

    /**
     * Marks multiple stages as deleted.
     * Delete multiple stages in bulk
     */
    deleteStages(requestParameters: DeleteStagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteStagesResponse200>;

    /**
     * Returns data about a specific stage.
     * @summary Get one stage
     * @param {number} id The ID of the stage
     * @param {0 | 1} [everyone] If &#x60;everyone&#x3D;1&#x60; is provided, deals summary will return deals owned by every user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StagesApiInterface
     */
    getStageRaw(requestParameters: GetStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStageResponse200>>;

    /**
     * Returns data about a specific stage.
     * Get one stage
     */
    getStage(requestParameters: GetStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStageResponse200>;

    /**
     * Lists deals in a specific stage.
     * @summary Get deals in a stage
     * @param {number} id The ID of the stage
     * @param {number} [filterId] If supplied, only deals matching the given filter will be returned
     * @param {number} [userId] If supplied, &#x60;filter_id&#x60; will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
     * @param {0 | 1} [everyone] If supplied, &#x60;filter_id&#x60; and &#x60;user_id&#x60; will not be considered â€“ instead, deals owned by everyone will be returned
     * @param {number} [start] Pagination start
     * @param {number} [limit] Items shown per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StagesApiInterface
     */
    getStageDealsRaw(requestParameters: GetStageDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStageDealsResponse200>>;

    /**
     * Lists deals in a specific stage.
     * Get deals in a stage
     */
    getStageDeals(requestParameters: GetStageDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStageDealsResponse200>;

    /**
     * Returns data about all stages.
     * @summary Get all stages
     * @param {number} [pipelineId] The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StagesApiInterface
     */
    getStagesRaw(requestParameters: GetStagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStagesResponse200>>;

    /**
     * Returns data about all stages.
     * Get all stages
     */
    getStages(requestParameters: GetStagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStagesResponse200>;

    /**
     * Updates the properties of a stage.
     * @summary Update stage details
     * @param {number} id The ID of the stage
     * @param {UpdateStageRequest} [updateStageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StagesApiInterface
     */
    updateStageRaw(requestParameters: UpdateStageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageResponse200>>;

    /**
     * Updates the properties of a stage.
     * Update stage details
     */
    updateStage(requestParameters: UpdateStageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageResponse200>;

}

/**
 * 
 */
export class StagesApi extends runtime.BaseAPI implements StagesApiInterface {

    /**
     * Adds a new stage, returns the ID upon success.
     * Add a new stage
     */
    async addStageRaw(requestParameters: AddStageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/stages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddStageRequestToJSON(requestParameters.addStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new stage, returns the ID upon success.
     * Add a new stage
     */
    async addStage(requestParameters: AddStageOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageResponse200> {
        const response = await this.addStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks a stage as deleted.
     * Delete a stage
     */
    async deleteStageRaw(requestParameters: DeleteStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteStageResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/stages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteStageResponse200FromJSON(jsonValue));
    }

    /**
     * Marks a stage as deleted.
     * Delete a stage
     */
    async deleteStage(requestParameters: DeleteStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteStageResponse200> {
        const response = await this.deleteStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Marks multiple stages as deleted.
     * Delete multiple stages in bulk
     */
    async deleteStagesRaw(requestParameters: DeleteStagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteStagesResponse200>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError('ids','Required parameter requestParameters.ids was null or undefined when calling deleteStages.');
        }

        const queryParameters: any = {};

        if (requestParameters.ids !== undefined) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/stages`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteStagesResponse200FromJSON(jsonValue));
    }

    /**
     * Marks multiple stages as deleted.
     * Delete multiple stages in bulk
     */
    async deleteStages(requestParameters: DeleteStagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteStagesResponse200> {
        const response = await this.deleteStagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about a specific stage.
     * Get one stage
     */
    async getStageRaw(requestParameters: GetStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStageResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStage.');
        }

        const queryParameters: any = {};

        if (requestParameters.everyone !== undefined) {
            queryParameters['everyone'] = requestParameters.everyone;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full", "admin"]);
        }

        const response = await this.request({
            path: `/stages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStageResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about a specific stage.
     * Get one stage
     */
    async getStage(requestParameters: GetStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStageResponse200> {
        const response = await this.getStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists deals in a specific stage.
     * Get deals in a stage
     */
    async getStageDealsRaw(requestParameters: GetStageDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStageDealsResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStageDeals.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterId !== undefined) {
            queryParameters['filter_id'] = requestParameters.filterId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.everyone !== undefined) {
            queryParameters['everyone'] = requestParameters.everyone;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full"]);
        }

        const response = await this.request({
            path: `/stages/{id}/deals`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStageDealsResponse200FromJSON(jsonValue));
    }

    /**
     * Lists deals in a specific stage.
     * Get deals in a stage
     */
    async getStageDeals(requestParameters: GetStageDealsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStageDealsResponse200> {
        const response = await this.getStageDealsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns data about all stages.
     * Get all stages
     */
    async getStagesRaw(requestParameters: GetStagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStagesResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.pipelineId !== undefined) {
            queryParameters['pipeline_id'] = requestParameters.pipelineId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["deals:read", "deals:full", "admin"]);
        }

        const response = await this.request({
            path: `/stages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStagesResponse200FromJSON(jsonValue));
    }

    /**
     * Returns data about all stages.
     * Get all stages
     */
    async getStages(requestParameters: GetStagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStagesResponse200> {
        const response = await this.getStagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the properties of a stage.
     * Update stage details
     */
    async updateStageRaw(requestParameters: UpdateStageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageResponse200>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["api_token"] = this.configuration.apiKey("api_token"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["admin"]);
        }

        const response = await this.request({
            path: `/stages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStageRequestToJSON(requestParameters.updateStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageResponse200FromJSON(jsonValue));
    }

    /**
     * Updates the properties of a stage.
     * Update stage details
     */
    async updateStage(requestParameters: UpdateStageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageResponse200> {
        const response = await this.updateStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetStageEveryoneEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
/**
  * @export
  * @enum {string}
  */
export enum GetStageDealsEveryoneEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}
