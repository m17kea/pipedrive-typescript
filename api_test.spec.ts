/**
 * Pipedrive API v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("ActivitiesApi", () => {
  let instance: api.ActivitiesApi
  beforeEach(function() {
    instance = new api.ActivitiesApi(config)
  });

  test("addActivity", () => {
    const body: api.AddActivityRequest = undefined
    return expect(instance.addActivity(body, {})).resolves.toBe(null)
  })
  test("deleteActivities", () => {
    const ids: string = "ids_example"
    return expect(instance.deleteActivities(ids, {})).resolves.toBe(null)
  })
  test("deleteActivity", () => {
    const id: number = 56
    return expect(instance.deleteActivity(id, {})).resolves.toBe(null)
  })
  test("getActivities", () => {
    const user_id: number = 56
    const filter_id: number = 56
    const type: string = "type_example"
    const limit: number = 56
    const start: number = 56
    const start_date: string = 2013-10-20
    const end_date: string = 2013-10-20
    const done: number = 1.2
    return expect(instance.getActivities(user_id, filter_id, type, limit, start, start_date, end_date, done, {})).resolves.toBe(null)
  })
  test("getActivity", () => {
    const id: number = 56
    return expect(instance.getActivity(id, {})).resolves.toBe(null)
  })
  test("updateActivity", () => {
    const id: number = 56
    const body: api.UpdateActivityRequest = undefined
    return expect(instance.updateActivity(id, body, {})).resolves.toBe(null)
  })
})

describe("ActivityFieldsApi", () => {
  let instance: api.ActivityFieldsApi
  beforeEach(function() {
    instance = new api.ActivityFieldsApi(config)
  });

  test("getActivityFields", () => {
    return expect(instance.getActivityFields({})).resolves.toBe(null)
  })
})

describe("ActivityTypesApi", () => {
  let instance: api.ActivityTypesApi
  beforeEach(function() {
    instance = new api.ActivityTypesApi(config)
  });

  test("addActivityType", () => {
    const name: string = "name_example"
    const icon_key: string = "icon_key_example"
    const color: string = "color_example"
    return expect(instance.addActivityType(name, icon_key, color, {})).resolves.toBe(null)
  })
  test("deleteActivityType", () => {
    const id: number = 56
    return expect(instance.deleteActivityType(id, {})).resolves.toBe(null)
  })
  test("deleteActivityTypes", () => {
    const ids: string = "ids_example"
    return expect(instance.deleteActivityTypes(ids, {})).resolves.toBe(null)
  })
  test("getActivityTypes", () => {
    return expect(instance.getActivityTypes({})).resolves.toBe(null)
  })
  test("updateActivityType", () => {
    const id: number = 56
    const name: string = "name_example"
    const icon_key: string = "icon_key_example"
    const color: string = "color_example"
    const order_nr: number = 56
    return expect(instance.updateActivityType(id, name, icon_key, color, order_nr, {})).resolves.toBe(null)
  })
})

describe("BillingApi", () => {
  let instance: api.BillingApi
  beforeEach(function() {
    instance = new api.BillingApi(config)
  });

  test("getCompanyAddons", () => {
    return expect(instance.getCompanyAddons({})).resolves.toBe(null)
  })
})

describe("CallLogsApi", () => {
  let instance: api.CallLogsApi
  beforeEach(function() {
    instance = new api.CallLogsApi(config)
  });

  test("addCallLog", () => {
    const body: api.AddCallLogRequest = undefined
    return expect(instance.addCallLog(body, {})).resolves.toBe(null)
  })
  test("addCallLogAudioFile", () => {
    const id: string = "id_example"
    const file: Blob = "file_example"
    return expect(instance.addCallLogAudioFile(id, file, {})).resolves.toBe(null)
  })
  test("deleteCallLog", () => {
    const id: string = "id_example"
    return expect(instance.deleteCallLog(id, {})).resolves.toBe(null)
  })
  test("getCallLog", () => {
    const id: string = "id_example"
    return expect(instance.getCallLog(id, {})).resolves.toBe(null)
  })
  test("getUserCallLogs", () => {
    const start: number = 56
    const limit: number = 56
    return expect(instance.getUserCallLogs(start, limit, {})).resolves.toBe(null)
  })
})

describe("ChannelsApi", () => {
  let instance: api.ChannelsApi
  beforeEach(function() {
    instance = new api.ChannelsApi(config)
  });

  test("addChannel", () => {
    const body: api.ChannelsBody = undefined
    return expect(instance.addChannel(body, {})).resolves.toBe(null)
  })
  test("deleteChannel", () => {
    const id: string = "id_example"
    return expect(instance.deleteChannel(id, {})).resolves.toBe(null)
  })
  test("deleteConversation", () => {
    const channel_id: string = "channel_id_example"
    const conversation_id: string = "conversation_id_example"
    return expect(instance.deleteConversation(channel_id, conversation_id, {})).resolves.toBe(null)
  })
  test("receiveMessage", () => {
    const body: api.MessagesReceiveBody = undefined
    return expect(instance.receiveMessage(body, {})).resolves.toBe(null)
  })
})

describe("CurrenciesApi", () => {
  let instance: api.CurrenciesApi
  beforeEach(function() {
    instance = new api.CurrenciesApi(config)
  });

  test("getCurrencies", () => {
    const term: string = "term_example"
    return expect(instance.getCurrencies(term, {})).resolves.toBe(null)
  })
})

describe("DealFieldsApi", () => {
  let instance: api.DealFieldsApi
  beforeEach(function() {
    instance = new api.DealFieldsApi(config)
  });

  test("addDealField", () => {
    const body: api.CreateFieldRequest = undefined
    return expect(instance.addDealField(body, {})).resolves.toBe(null)
  })
  test("deleteDealField", () => {
    const id: number = 56
    return expect(instance.deleteDealField(id, {})).resolves.toBe(null)
  })
  test("deleteDealFields", () => {
    const ids: string = "ids_example"
    return expect(instance.deleteDealFields(ids, {})).resolves.toBe(null)
  })
  test("getDealField", () => {
    const id: number = 56
    return expect(instance.getDealField(id, {})).resolves.toBe(null)
  })
  test("getDealFields", () => {
    const start: number = 56
    const limit: number = 56
    return expect(instance.getDealFields(start, limit, {})).resolves.toBe(null)
  })
  test("updateDealField", () => {
    const id: number = 56
    const body: api.UpdateFieldRequest = undefined
    return expect(instance.updateDealField(id, body, {})).resolves.toBe(null)
  })
})

describe("DealsApi", () => {
  let instance: api.DealsApi
  beforeEach(function() {
    instance = new api.DealsApi(config)
  });

  test("addDeal", () => {
    const body: api.AddDealRequest = undefined
    return expect(instance.addDeal(body, {})).resolves.toBe(null)
  })
  test("addDealFollower", () => {
    const id: number = 56
    const body: api.AddDealFollowerRequest = undefined
    return expect(instance.addDealFollower(id, body, {})).resolves.toBe(null)
  })
  test("addDealParticipant", () => {
    const id: number = 56
    const body: api.AddDealParticipantRequest = undefined
    return expect(instance.addDealParticipant(id, body, {})).resolves.toBe(null)
  })
  test("addDealProduct", () => {
    const id: number = 56
    const body: api.AddDealProductRequest = undefined
    return expect(instance.addDealProduct(id, body, {})).resolves.toBe(null)
  })
  test("deleteDeal", () => {
    const id: number = 56
    return expect(instance.deleteDeal(id, {})).resolves.toBe(null)
  })
  test("deleteDealFollower", () => {
    const id: number = 56
    const follower_id: number = 56
    return expect(instance.deleteDealFollower(id, follower_id, {})).resolves.toBe(null)
  })
  test("deleteDealParticipant", () => {
    const id: number = 56
    const deal_participant_id: number = 56
    return expect(instance.deleteDealParticipant(id, deal_participant_id, {})).resolves.toBe(null)
  })
  test("deleteDealProduct", () => {
    const id: number = 56
    const product_attachment_id: number = 56
    return expect(instance.deleteDealProduct(id, product_attachment_id, {})).resolves.toBe(null)
  })
  test("deleteDeals", () => {
    const ids: string = "ids_example"
    return expect(instance.deleteDeals(ids, {})).resolves.toBe(null)
  })
  test("duplicateDeal", () => {
    const id: number = 56
    return expect(instance.duplicateDeal(id, {})).resolves.toBe(null)
  })
  test("getDeal", () => {
    const id: number = 56
    return expect(instance.getDeal(id, {})).resolves.toBe(null)
  })
  test("getDealActivities", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    const done: number = 1.2
    const exclude: string = "exclude_example"
    return expect(instance.getDealActivities(id, start, limit, done, exclude, {})).resolves.toBe(null)
  })
  test("getDealFiles", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    const include_deleted_files: number = 1.2
    const sort: string = "sort_example"
    return expect(instance.getDealFiles(id, start, limit, include_deleted_files, sort, {})).resolves.toBe(null)
  })
  test("getDealFollowers", () => {
    const id: number = 56
    return expect(instance.getDealFollowers(id, {})).resolves.toBe(null)
  })
  test("getDealMailMessages", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    return expect(instance.getDealMailMessages(id, start, limit, {})).resolves.toBe(null)
  })
  test("getDealParticipants", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    return expect(instance.getDealParticipants(id, start, limit, {})).resolves.toBe(null)
  })
  test("getDealPersons", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    return expect(instance.getDealPersons(id, start, limit, {})).resolves.toBe(null)
  })
  test("getDealProducts", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    const include_product_data: number = 1.2
    return expect(instance.getDealProducts(id, start, limit, include_product_data, {})).resolves.toBe(null)
  })
  test("getDealUpdates", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    const all_changes: string = "all_changes_example"
    const items: string = "items_example"
    return expect(instance.getDealUpdates(id, start, limit, all_changes, items, {})).resolves.toBe(null)
  })
  test("getDealUsers", () => {
    const id: number = 56
    return expect(instance.getDealUsers(id, {})).resolves.toBe(null)
  })
  test("getDeals", () => {
    const user_id: number = 56
    const filter_id: number = 56
    const stage_id: number = 56
    const status: string = "status_example"
    const start: number = 56
    const limit: number = 56
    const sort: string = "sort_example"
    const owned_by_you: number = 1.2
    return expect(instance.getDeals(user_id, filter_id, stage_id, status, start, limit, sort, owned_by_you, {})).resolves.toBe(null)
  })
  test("getDealsSummary", () => {
    const status: string = "status_example"
    const filter_id: number = 56
    const user_id: number = 56
    const stage_id: number = 56
    return expect(instance.getDealsSummary(status, filter_id, user_id, stage_id, {})).resolves.toBe(null)
  })
  test("getDealsTimeline", () => {
    const start_date: string = 2013-10-20
    const interval: string = "interval_example"
    const amount: number = 56
    const field_key: string = "field_key_example"
    const user_id: number = 56
    const pipeline_id: number = 56
    const filter_id: number = 56
    const exclude_deals: number = 1.2
    const totals_convert_currency: string = "totals_convert_currency_example"
    return expect(instance.getDealsTimeline(start_date, interval, amount, field_key, user_id, pipeline_id, filter_id, exclude_deals, totals_convert_currency, {})).resolves.toBe(null)
  })
  test("mergeDeals", () => {
    const id: number = 56
    const body: api.MergeDealsRequest = undefined
    return expect(instance.mergeDeals(id, body, {})).resolves.toBe(null)
  })
  test("searchDeals", () => {
    const term: string = "term_example"
    const fields: string = "fields_example"
    const exact_match: boolean = true
    const person_id: number = 56
    const organization_id: number = 56
    const status: string = "status_example"
    const include_fields: string = "include_fields_example"
    const start: number = 56
    const limit: number = 56
    return expect(instance.searchDeals(term, fields, exact_match, person_id, organization_id, status, include_fields, start, limit, {})).resolves.toBe(null)
  })
  test("updateDeal", () => {
    const id: number = 56
    const body: api.UpdateDealRequest = undefined
    return expect(instance.updateDeal(id, body, {})).resolves.toBe(null)
  })
  test("updateDealProduct", () => {
    const id: number = 56
    const product_attachment_id: number = 56
    const body: api.BasicDealProductRequest = undefined
    return expect(instance.updateDealProduct(id, product_attachment_id, body, {})).resolves.toBe(null)
  })
})

describe("FilesApi", () => {
  let instance: api.FilesApi
  beforeEach(function() {
    instance = new api.FilesApi(config)
  });

  test("addFile", () => {
    const file: Blob = "file_example"
    const deal_id: number = 56
    const person_id: number = 56
    const org_id: number = 56
    const product_id: number = 56
    const activity_id: number = 56
    return expect(instance.addFile(file, deal_id, person_id, org_id, product_id, activity_id, {})).resolves.toBe(null)
  })
  test("addFileAndLinkIt", () => {
    const file_type: string = "file_type_example"
    const title: string = "title_example"
    const item_type: string = "item_type_example"
    const item_id: number = 56
    const remote_location: string = "remote_location_example"
    return expect(instance.addFileAndLinkIt(file_type, title, item_type, item_id, remote_location, {})).resolves.toBe(null)
  })
  test("deleteFile", () => {
    const id: number = 56
    return expect(instance.deleteFile(id, {})).resolves.toBe(null)
  })
  test("downloadFile", () => {
    const id: number = 56
    return expect(instance.downloadFile(id, {})).resolves.toBe(null)
  })
  test("getFile", () => {
    const id: number = 56
    return expect(instance.getFile(id, {})).resolves.toBe(null)
  })
  test("getFiles", () => {
    const start: number = 56
    const limit: number = 56
    const include_deleted_files: number = 1.2
    const sort: string = "sort_example"
    return expect(instance.getFiles(start, limit, include_deleted_files, sort, {})).resolves.toBe(null)
  })
  test("linkFileToItem", () => {
    const item_type: string = "item_type_example"
    const item_id: number = 56
    const remote_id: string = "remote_id_example"
    const remote_location: string = "remote_location_example"
    return expect(instance.linkFileToItem(item_type, item_id, remote_id, remote_location, {})).resolves.toBe(null)
  })
  test("updateFile", () => {
    const id: number = 56
    const name: string = "name_example"
    const description: string = "description_example"
    return expect(instance.updateFile(id, name, description, {})).resolves.toBe(null)
  })
})

describe("FiltersApi", () => {
  let instance: api.FiltersApi
  beforeEach(function() {
    instance = new api.FiltersApi(config)
  });

  test("addFilter", () => {
    const body: api.AddFilterRequest = undefined
    return expect(instance.addFilter(body, {})).resolves.toBe(null)
  })
  test("deleteFilter", () => {
    const id: number = 56
    return expect(instance.deleteFilter(id, {})).resolves.toBe(null)
  })
  test("deleteFilters", () => {
    const ids: string = "ids_example"
    return expect(instance.deleteFilters(ids, {})).resolves.toBe(null)
  })
  test("getFilter", () => {
    const id: number = 56
    return expect(instance.getFilter(id, {})).resolves.toBe(null)
  })
  test("getFilterHelpers", () => {
    return expect(instance.getFilterHelpers({})).resolves.toBe(null)
  })
  test("getFilters", () => {
    const type: string = "type_example"
    return expect(instance.getFilters(type, {})).resolves.toBe(null)
  })
  test("updateFilter", () => {
    const id: number = 56
    const body: api.UpdateFilterRequest = undefined
    return expect(instance.updateFilter(id, body, {})).resolves.toBe(null)
  })
})

describe("GoalsApi", () => {
  let instance: api.GoalsApi
  beforeEach(function() {
    instance = new api.GoalsApi(config)
  });

  test("addGoal", () => {
    const body: api.AddGoalRequest = undefined
    return expect(instance.addGoal(body, {})).resolves.toBe(null)
  })
  test("deleteGoal", () => {
    const id: string = "id_example"
    return expect(instance.deleteGoal(id, {})).resolves.toBe(null)
  })
  test("getGoalResult", () => {
    const id: string = "id_example"
    const period_start: string = 2013-10-20
    const period_end: string = 2013-10-20
    return expect(instance.getGoalResult(id, period_start, period_end, {})).resolves.toBe(null)
  })
  test("getGoals", () => {
    const type_name: string = "type_name_example"
    const title: string = "title_example"
    const is_active: boolean = true
    const assignee_id: number = 56
    const assignee_type: string = "assignee_type_example"
    const expected_outcome_target: number = 1.2
    const expected_outcome_tracking_metric: string = "expected_outcome_tracking_metric_example"
    const expected_outcome_currency_id: number = 56
    const type_params_pipeline_id: number = 56
    const type_params_stage_id: number = 56
    const type_params_activity_type_id: number = 56
    const period_start: string = 2013-10-20
    const period_end: string = 2013-10-20
    return expect(instance.getGoals(type_name, title, is_active, assignee_id, assignee_type, expected_outcome_target, expected_outcome_tracking_metric, expected_outcome_currency_id, type_params_pipeline_id, type_params_stage_id, type_params_activity_type_id, period_start, period_end, {})).resolves.toBe(null)
  })
  test("updateGoal", () => {
    const id: string = "id_example"
    const body: api.BasicGoalRequest = undefined
    return expect(instance.updateGoal(id, body, {})).resolves.toBe(null)
  })
})

describe("ItemSearchApi", () => {
  let instance: api.ItemSearchApi
  beforeEach(function() {
    instance = new api.ItemSearchApi(config)
  });

  test("searchItem", () => {
    const term: string = "term_example"
    const item_types: string = "item_types_example"
    const fields: string = "fields_example"
    const search_for_related_items: boolean = true
    const exact_match: boolean = true
    const include_fields: string = "include_fields_example"
    const start: number = 56
    const limit: number = 56
    return expect(instance.searchItem(term, item_types, fields, search_for_related_items, exact_match, include_fields, start, limit, {})).resolves.toBe(null)
  })
  test("searchItemByField", () => {
    const term: string = "term_example"
    const field_type: string = "field_type_example"
    const field_key: string = "field_key_example"
    const exact_match: boolean = true
    const return_item_ids: boolean = true
    const start: number = 56
    const limit: number = 56
    return expect(instance.searchItemByField(term, field_type, field_key, exact_match, return_item_ids, start, limit, {})).resolves.toBe(null)
  })
})

describe("LeadLabelsApi", () => {
  let instance: api.LeadLabelsApi
  beforeEach(function() {
    instance = new api.LeadLabelsApi(config)
  });

  test("addLeadLabel", () => {
    const body: api.AddLeadLabelRequest = undefined
    return expect(instance.addLeadLabel(body, {})).resolves.toBe(null)
  })
  test("deleteLeadLabel", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.deleteLeadLabel(id, {})).resolves.toBe(null)
  })
  test("getLeadLabels", () => {
    return expect(instance.getLeadLabels({})).resolves.toBe(null)
  })
  test("updateLeadLabel", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const body: api.UpdateLeadLabelRequest = undefined
    return expect(instance.updateLeadLabel(id, body, {})).resolves.toBe(null)
  })
})

describe("LeadSourcesApi", () => {
  let instance: api.LeadSourcesApi
  beforeEach(function() {
    instance = new api.LeadSourcesApi(config)
  });

  test("getLeadSources", () => {
    return expect(instance.getLeadSources({})).resolves.toBe(null)
  })
})

describe("LeadsApi", () => {
  let instance: api.LeadsApi
  beforeEach(function() {
    instance = new api.LeadsApi(config)
  });

  test("addLead", () => {
    const body: api.AddLeadRequest = undefined
    return expect(instance.addLead(body, {})).resolves.toBe(null)
  })
  test("deleteLead", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.deleteLead(id, {})).resolves.toBe(null)
  })
  test("getLead", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.getLead(id, {})).resolves.toBe(null)
  })
  test("getLeads", () => {
    const limit: number = 56
    const start: number = 56
    const archived_status: string = "archived_status_example"
    const owner_id: number = 56
    const person_id: number = 56
    const organization_id: number = 56
    const filter_id: number = 56
    const sort: string = "sort_example"
    return expect(instance.getLeads(limit, start, archived_status, owner_id, person_id, organization_id, filter_id, sort, {})).resolves.toBe(null)
  })
  test("searchLeads", () => {
    const term: string = "term_example"
    const fields: string = "fields_example"
    const exact_match: boolean = true
    const person_id: number = 56
    const organization_id: number = 56
    const include_fields: string = "include_fields_example"
    const start: number = 56
    const limit: number = 56
    return expect(instance.searchLeads(term, fields, exact_match, person_id, organization_id, include_fields, start, limit, {})).resolves.toBe(null)
  })
  test("updateLead", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const body: api.UpdateLeadRequest = undefined
    return expect(instance.updateLead(id, body, {})).resolves.toBe(null)
  })
})

describe("LegacyTeamsApi", () => {
  let instance: api.LegacyTeamsApi
  beforeEach(function() {
    instance = new api.LegacyTeamsApi(config)
  });

  test("addTeam", () => {
    const body: api.AddTeamRequest = undefined
    return expect(instance.addTeam(body, {})).resolves.toBe(null)
  })
  test("addTeamUser", () => {
    const id: number = 56
    const body: api.AddTeamUserRequest = undefined
    return expect(instance.addTeamUser(id, body, {})).resolves.toBe(null)
  })
  test("deleteTeamUser", () => {
    const id: number = 56
    const body: api.DeleteTeamUserRequest = undefined
    return expect(instance.deleteTeamUser(id, body, {})).resolves.toBe(null)
  })
  test("getTeam", () => {
    const id: number = 56
    const skip_users: number = 1.2
    return expect(instance.getTeam(id, skip_users, {})).resolves.toBe(null)
  })
  test("getTeamUsers", () => {
    const id: number = 56
    return expect(instance.getTeamUsers(id, {})).resolves.toBe(null)
  })
  test("getTeams", () => {
    const order_by: string = "order_by_example"
    const skip_users: number = 1.2
    return expect(instance.getTeams(order_by, skip_users, {})).resolves.toBe(null)
  })
  test("getUserTeams", () => {
    const id: number = 56
    const order_by: string = "order_by_example"
    const skip_users: number = 1.2
    return expect(instance.getUserTeams(id, order_by, skip_users, {})).resolves.toBe(null)
  })
  test("updateTeam", () => {
    const id: number = 56
    const body: api.UpdateTeamRequest = undefined
    return expect(instance.updateTeam(id, body, {})).resolves.toBe(null)
  })
})

describe("MailboxApi", () => {
  let instance: api.MailboxApi
  beforeEach(function() {
    instance = new api.MailboxApi(config)
  });

  test("deleteMailThread", () => {
    const id: number = 56
    return expect(instance.deleteMailThread(id, {})).resolves.toBe(null)
  })
  test("getMailMessage", () => {
    const id: number = 56
    const include_body: number = 1.2
    return expect(instance.getMailMessage(id, include_body, {})).resolves.toBe(null)
  })
  test("getMailThread", () => {
    const id: number = 56
    return expect(instance.getMailThread(id, {})).resolves.toBe(null)
  })
  test("getMailThreadMessages", () => {
    const id: number = 56
    return expect(instance.getMailThreadMessages(id, {})).resolves.toBe(null)
  })
  test("getMailThreads", () => {
    const folder: string = "folder_example"
    const start: number = 56
    const limit: number = 56
    return expect(instance.getMailThreads(folder, start, limit, {})).resolves.toBe(null)
  })
  test("updateMailThreadDetails", () => {
    const id: number = 56
    const deal_id: number = 56
    const lead_id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const shared_flag: api.number = undefined
    const read_flag: api.number = undefined
    const archived_flag: api.number = undefined
    return expect(instance.updateMailThreadDetails(id, deal_id, lead_id, shared_flag, read_flag, archived_flag, {})).resolves.toBe(null)
  })
})

describe("NoteFieldsApi", () => {
  let instance: api.NoteFieldsApi
  beforeEach(function() {
    instance = new api.NoteFieldsApi(config)
  });

  test("getNoteFields", () => {
    return expect(instance.getNoteFields({})).resolves.toBe(null)
  })
})

describe("NotesApi", () => {
  let instance: api.NotesApi
  beforeEach(function() {
    instance = new api.NotesApi(config)
  });

  test("addNote", () => {
    const body: api.NotesBody = undefined
    return expect(instance.addNote(body, {})).resolves.toBe(null)
  })
  test("addNoteComment", () => {
    const id: number = 56
    const body: api.CommentPostPutObject = undefined
    return expect(instance.addNoteComment(id, body, {})).resolves.toBe(null)
  })
  test("deleteComment", () => {
    const id: number = 56
    const commentId: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.deleteComment(id, commentId, {})).resolves.toBe(null)
  })
  test("deleteNote", () => {
    const id: number = 56
    return expect(instance.deleteNote(id, {})).resolves.toBe(null)
  })
  test("getComment", () => {
    const id: number = 56
    const commentId: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.getComment(id, commentId, {})).resolves.toBe(null)
  })
  test("getNote", () => {
    const id: number = 56
    return expect(instance.getNote(id, {})).resolves.toBe(null)
  })
  test("getNoteComments", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    return expect(instance.getNoteComments(id, start, limit, {})).resolves.toBe(null)
  })
  test("getNotes", () => {
    const user_id: number = 56
    const lead_id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const deal_id: number = 56
    const person_id: number = 56
    const org_id: number = 56
    const start: number = 56
    const limit: number = 56
    const sort: string = "sort_example"
    const start_date: string = 2013-10-20
    const end_date: string = 2013-10-20
    const pinned_to_lead_flag: number = 1.2
    const pinned_to_deal_flag: number = 1.2
    const pinned_to_organization_flag: number = 1.2
    const pinned_to_person_flag: number = 1.2
    return expect(instance.getNotes(user_id, lead_id, deal_id, person_id, org_id, start, limit, sort, start_date, end_date, pinned_to_lead_flag, pinned_to_deal_flag, pinned_to_organization_flag, pinned_to_person_flag, {})).resolves.toBe(null)
  })
  test("updateCommentForNote", () => {
    const id: number = 56
    const commentId: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    const body: api.CommentPostPutObject1 = undefined
    return expect(instance.updateCommentForNote(id, commentId, body, {})).resolves.toBe(null)
  })
  test("updateNote", () => {
    const id: number = 56
    const body: api.NoteRequest = undefined
    return expect(instance.updateNote(id, body, {})).resolves.toBe(null)
  })
})

describe("OrganizationFieldsApi", () => {
  let instance: api.OrganizationFieldsApi
  beforeEach(function() {
    instance = new api.OrganizationFieldsApi(config)
  });

  test("addOrganizationField", () => {
    const body: api.CreateFieldRequest1 = undefined
    return expect(instance.addOrganizationField(body, {})).resolves.toBe(null)
  })
  test("deleteOrganizationField", () => {
    const id: number = 56
    return expect(instance.deleteOrganizationField(id, {})).resolves.toBe(null)
  })
  test("deleteOrganizationFields", () => {
    const ids: string = "ids_example"
    return expect(instance.deleteOrganizationFields(ids, {})).resolves.toBe(null)
  })
  test("getOrganizationField", () => {
    const id: number = 56
    return expect(instance.getOrganizationField(id, {})).resolves.toBe(null)
  })
  test("getOrganizationFields", () => {
    const start: number = 56
    const limit: number = 56
    return expect(instance.getOrganizationFields(start, limit, {})).resolves.toBe(null)
  })
  test("updateOrganizationField", () => {
    const id: number = 56
    const body: api.UpdateFieldRequest1 = undefined
    return expect(instance.updateOrganizationField(id, body, {})).resolves.toBe(null)
  })
})

describe("OrganizationRelationshipsApi", () => {
  let instance: api.OrganizationRelationshipsApi
  beforeEach(function() {
    instance = new api.OrganizationRelationshipsApi(config)
  });

  test("addOrganizationRelationship", () => {
    const body: api.AddOrganizationRelationshipRequest = undefined
    return expect(instance.addOrganizationRelationship(body, {})).resolves.toBe(null)
  })
  test("deleteOrganizationRelationship", () => {
    const id: number = 56
    return expect(instance.deleteOrganizationRelationship(id, {})).resolves.toBe(null)
  })
  test("getOrganizationRelationship", () => {
    const id: number = 56
    const org_id: number = 56
    return expect(instance.getOrganizationRelationship(id, org_id, {})).resolves.toBe(null)
  })
  test("getOrganizationRelationships", () => {
    const org_id: number = 56
    return expect(instance.getOrganizationRelationships(org_id, {})).resolves.toBe(null)
  })
  test("updateOrganizationRelationship", () => {
    const id: number = 56
    const body: api.OrganizationRelationship = undefined
    return expect(instance.updateOrganizationRelationship(id, body, {})).resolves.toBe(null)
  })
})

describe("OrganizationsApi", () => {
  let instance: api.OrganizationsApi
  beforeEach(function() {
    instance = new api.OrganizationsApi(config)
  });

  test("addOrganization", () => {
    const body: api.AddOrganizationRequest = undefined
    return expect(instance.addOrganization(body, {})).resolves.toBe(null)
  })
  test("addOrganizationFollower", () => {
    const id: number = 56
    const body: api.AddOrganizationFollowerRequest = undefined
    return expect(instance.addOrganizationFollower(id, body, {})).resolves.toBe(null)
  })
  test("deleteOrganization", () => {
    const id: number = 56
    return expect(instance.deleteOrganization(id, {})).resolves.toBe(null)
  })
  test("deleteOrganizationFollower", () => {
    const id: number = 56
    const follower_id: number = 56
    return expect(instance.deleteOrganizationFollower(id, follower_id, {})).resolves.toBe(null)
  })
  test("deleteOrganizations", () => {
    const ids: string = "ids_example"
    return expect(instance.deleteOrganizations(ids, {})).resolves.toBe(null)
  })
  test("getOrganization", () => {
    const id: number = 56
    return expect(instance.getOrganization(id, {})).resolves.toBe(null)
  })
  test("getOrganizationActivities", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    const done: number = 1.2
    const exclude: string = "exclude_example"
    return expect(instance.getOrganizationActivities(id, start, limit, done, exclude, {})).resolves.toBe(null)
  })
  test("getOrganizationDeals", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    const status: string = "status_example"
    const sort: string = "sort_example"
    const only_primary_association: number = 1.2
    return expect(instance.getOrganizationDeals(id, start, limit, status, sort, only_primary_association, {})).resolves.toBe(null)
  })
  test("getOrganizationFiles", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    const include_deleted_files: number = 1.2
    const sort: string = "sort_example"
    return expect(instance.getOrganizationFiles(id, start, limit, include_deleted_files, sort, {})).resolves.toBe(null)
  })
  test("getOrganizationFollowers", () => {
    const id: number = 56
    return expect(instance.getOrganizationFollowers(id, {})).resolves.toBe(null)
  })
  test("getOrganizationMailMessages", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    return expect(instance.getOrganizationMailMessages(id, start, limit, {})).resolves.toBe(null)
  })
  test("getOrganizationPersons", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    return expect(instance.getOrganizationPersons(id, start, limit, {})).resolves.toBe(null)
  })
  test("getOrganizationUpdates", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    const all_changes: string = "all_changes_example"
    const items: string = "items_example"
    return expect(instance.getOrganizationUpdates(id, start, limit, all_changes, items, {})).resolves.toBe(null)
  })
  test("getOrganizationUsers", () => {
    const id: number = 56
    return expect(instance.getOrganizationUsers(id, {})).resolves.toBe(null)
  })
  test("getOrganizations", () => {
    const user_id: number = 56
    const filter_id: number = 56
    const first_char: string = "first_char_example"
    const start: number = 56
    const limit: number = 56
    const sort: string = "sort_example"
    return expect(instance.getOrganizations(user_id, filter_id, first_char, start, limit, sort, {})).resolves.toBe(null)
  })
  test("mergeOrganizations", () => {
    const id: number = 56
    const body: api.MergeOrganizationsRequest = undefined
    return expect(instance.mergeOrganizations(id, body, {})).resolves.toBe(null)
  })
  test("searchOrganization", () => {
    const term: string = "term_example"
    const fields: string = "fields_example"
    const exact_match: boolean = true
    const start: number = 56
    const limit: number = 56
    return expect(instance.searchOrganization(term, fields, exact_match, start, limit, {})).resolves.toBe(null)
  })
  test("updateOrganization", () => {
    const id: number = 56
    const body: api.UpdateOrganizationRequest = undefined
    return expect(instance.updateOrganization(id, body, {})).resolves.toBe(null)
  })
})

describe("PermissionSetsApi", () => {
  let instance: api.PermissionSetsApi
  beforeEach(function() {
    instance = new api.PermissionSetsApi(config)
  });

  test("getPermissionSet", () => {
    const id: string = "id_example"
    return expect(instance.getPermissionSet(id, {})).resolves.toBe(null)
  })
  test("getPermissionSetAssignments", () => {
    const id: string = "id_example"
    const start: number = 56
    const limit: number = 56
    return expect(instance.getPermissionSetAssignments(id, start, limit, {})).resolves.toBe(null)
  })
  test("getPermissionSets", () => {
    const app: string = "app_example"
    return expect(instance.getPermissionSets(app, {})).resolves.toBe(null)
  })
})

describe("PersonFieldsApi", () => {
  let instance: api.PersonFieldsApi
  beforeEach(function() {
    instance = new api.PersonFieldsApi(config)
  });

  test("addPersonField", () => {
    const body: api.CreateFieldRequest2 = undefined
    return expect(instance.addPersonField(body, {})).resolves.toBe(null)
  })
  test("deletePersonField", () => {
    const id: number = 56
    return expect(instance.deletePersonField(id, {})).resolves.toBe(null)
  })
  test("deletePersonFields", () => {
    const ids: string = "ids_example"
    return expect(instance.deletePersonFields(ids, {})).resolves.toBe(null)
  })
  test("getPersonField", () => {
    const id: number = 56
    return expect(instance.getPersonField(id, {})).resolves.toBe(null)
  })
  test("getPersonFields", () => {
    const start: number = 56
    const limit: number = 56
    return expect(instance.getPersonFields(start, limit, {})).resolves.toBe(null)
  })
  test("updatePersonField", () => {
    const id: number = 56
    const body: api.UpdateFieldRequest2 = undefined
    return expect(instance.updatePersonField(id, body, {})).resolves.toBe(null)
  })
})

describe("PersonsApi", () => {
  let instance: api.PersonsApi
  beforeEach(function() {
    instance = new api.PersonsApi(config)
  });

  test("addPerson", () => {
    const body: api.AddPersonRequest = undefined
    return expect(instance.addPerson(body, {})).resolves.toBe(null)
  })
  test("addPersonFollower", () => {
    const id: number = 56
    const body: api.AddPersonFollowerRequest = undefined
    return expect(instance.addPersonFollower(id, body, {})).resolves.toBe(null)
  })
  test("addPersonPicture", () => {
    const id: number = 56
    const file: Blob = "file_example"
    const crop_x: number = 56
    const crop_y: number = 56
    const crop_width: number = 56
    const crop_height: number = 56
    return expect(instance.addPersonPicture(id, file, crop_x, crop_y, crop_width, crop_height, {})).resolves.toBe(null)
  })
  test("deletePerson", () => {
    const id: number = 56
    return expect(instance.deletePerson(id, {})).resolves.toBe(null)
  })
  test("deletePersonFollower", () => {
    const id: number = 56
    const follower_id: number = 56
    return expect(instance.deletePersonFollower(id, follower_id, {})).resolves.toBe(null)
  })
  test("deletePersonPicture", () => {
    const id: number = 56
    return expect(instance.deletePersonPicture(id, {})).resolves.toBe(null)
  })
  test("deletePersons", () => {
    const ids: string = "ids_example"
    return expect(instance.deletePersons(ids, {})).resolves.toBe(null)
  })
  test("getPerson", () => {
    const id: number = 56
    return expect(instance.getPerson(id, {})).resolves.toBe(null)
  })
  test("getPersonActivities", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    const done: number = 1.2
    const exclude: string = "exclude_example"
    return expect(instance.getPersonActivities(id, start, limit, done, exclude, {})).resolves.toBe(null)
  })
  test("getPersonDeals", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    const status: string = "status_example"
    const sort: string = "sort_example"
    return expect(instance.getPersonDeals(id, start, limit, status, sort, {})).resolves.toBe(null)
  })
  test("getPersonFiles", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    const include_deleted_files: number = 1.2
    const sort: string = "sort_example"
    return expect(instance.getPersonFiles(id, start, limit, include_deleted_files, sort, {})).resolves.toBe(null)
  })
  test("getPersonFollowers", () => {
    const id: number = 56
    return expect(instance.getPersonFollowers(id, {})).resolves.toBe(null)
  })
  test("getPersonMailMessages", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    return expect(instance.getPersonMailMessages(id, start, limit, {})).resolves.toBe(null)
  })
  test("getPersonProducts", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    return expect(instance.getPersonProducts(id, start, limit, {})).resolves.toBe(null)
  })
  test("getPersonUpdates", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    const all_changes: string = "all_changes_example"
    const items: string = "items_example"
    return expect(instance.getPersonUpdates(id, start, limit, all_changes, items, {})).resolves.toBe(null)
  })
  test("getPersonUsers", () => {
    const id: number = 56
    return expect(instance.getPersonUsers(id, {})).resolves.toBe(null)
  })
  test("getPersons", () => {
    const user_id: number = 56
    const filter_id: number = 56
    const first_char: string = "first_char_example"
    const start: number = 56
    const limit: number = 56
    const sort: string = "sort_example"
    return expect(instance.getPersons(user_id, filter_id, first_char, start, limit, sort, {})).resolves.toBe(null)
  })
  test("mergePersons", () => {
    const id: number = 56
    const body: api.MergePersonsRequest = undefined
    return expect(instance.mergePersons(id, body, {})).resolves.toBe(null)
  })
  test("searchPersons", () => {
    const term: string = "term_example"
    const fields: string = "fields_example"
    const exact_match: boolean = true
    const organization_id: number = 56
    const include_fields: string = "include_fields_example"
    const start: number = 56
    const limit: number = 56
    return expect(instance.searchPersons(term, fields, exact_match, organization_id, include_fields, start, limit, {})).resolves.toBe(null)
  })
  test("updatePerson", () => {
    const id: number = 56
    const body: api.UpdatePersonRequest = undefined
    return expect(instance.updatePerson(id, body, {})).resolves.toBe(null)
  })
})

describe("PipelinesApi", () => {
  let instance: api.PipelinesApi
  beforeEach(function() {
    instance = new api.PipelinesApi(config)
  });

  test("addPipeline", () => {
    const body: api.PipelineRequest = undefined
    return expect(instance.addPipeline(body, {})).resolves.toBe(null)
  })
  test("deletePipeline", () => {
    const id: number = 56
    return expect(instance.deletePipeline(id, {})).resolves.toBe(null)
  })
  test("getPipeline", () => {
    const id: number = 56
    const totals_convert_currency: string = "totals_convert_currency_example"
    return expect(instance.getPipeline(id, totals_convert_currency, {})).resolves.toBe(null)
  })
  test("getPipelineConversionStatistics", () => {
    const id: number = 56
    const start_date: string = 2013-10-20
    const end_date: string = 2013-10-20
    const user_id: number = 56
    return expect(instance.getPipelineConversionStatistics(id, start_date, end_date, user_id, {})).resolves.toBe(null)
  })
  test("getPipelineDeals", () => {
    const id: number = 56
    const filter_id: number = 56
    const user_id: number = 56
    const everyone: number = 1.2
    const stage_id: number = 56
    const start: number = 56
    const limit: number = 56
    const get_summary: number = 1.2
    const totals_convert_currency: string = "totals_convert_currency_example"
    return expect(instance.getPipelineDeals(id, filter_id, user_id, everyone, stage_id, start, limit, get_summary, totals_convert_currency, {})).resolves.toBe(null)
  })
  test("getPipelineMovementStatistics", () => {
    const id: number = 56
    const start_date: string = 2013-10-20
    const end_date: string = 2013-10-20
    const user_id: number = 56
    return expect(instance.getPipelineMovementStatistics(id, start_date, end_date, user_id, {})).resolves.toBe(null)
  })
  test("getPipelines", () => {
    return expect(instance.getPipelines({})).resolves.toBe(null)
  })
  test("updatePipeline", () => {
    const id: number = 56
    const body: api.PipelineRequest1 = undefined
    return expect(instance.updatePipeline(id, body, {})).resolves.toBe(null)
  })
})

describe("ProductFieldsApi", () => {
  let instance: api.ProductFieldsApi
  beforeEach(function() {
    instance = new api.ProductFieldsApi(config)
  });

  test("addProductField", () => {
    const body: api.ProductFieldsBody = undefined
    return expect(instance.addProductField(body, {})).resolves.toBe(null)
  })
  test("deleteProductField", () => {
    const id: number = 56
    return expect(instance.deleteProductField(id, {})).resolves.toBe(null)
  })
  test("deleteProductFields", () => {
    const ids: string = "ids_example"
    return expect(instance.deleteProductFields(ids, {})).resolves.toBe(null)
  })
  test("getProductField", () => {
    const id: number = 56
    return expect(instance.getProductField(id, {})).resolves.toBe(null)
  })
  test("getProductFields", () => {
    const start: number = 56
    const limit: number = 56
    return expect(instance.getProductFields(start, limit, {})).resolves.toBe(null)
  })
  test("updateProductField", () => {
    const id: number = 56
    const body: api.UpdateProductFieldResponse200 = undefined
    return expect(instance.updateProductField(id, body, {})).resolves.toBe(null)
  })
})

describe("ProductsApi", () => {
  let instance: api.ProductsApi
  beforeEach(function() {
    instance = new api.ProductsApi(config)
  });

  test("addProduct", () => {
    const body: api.AddProductRequest = undefined
    return expect(instance.addProduct(body, {})).resolves.toBe(null)
  })
  test("addProductFollower", () => {
    const id: number = 56
    const body: api.AddProductFollowerRequest = undefined
    return expect(instance.addProductFollower(id, body, {})).resolves.toBe(null)
  })
  test("deleteProduct", () => {
    const id: number = 56
    return expect(instance.deleteProduct(id, {})).resolves.toBe(null)
  })
  test("deleteProductFollower", () => {
    const id: number = 56
    const follower_id: number = 56
    return expect(instance.deleteProductFollower(id, follower_id, {})).resolves.toBe(null)
  })
  test("getProduct", () => {
    const id: number = 56
    return expect(instance.getProduct(id, {})).resolves.toBe(null)
  })
  test("getProductDeals", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    const status: string = "status_example"
    return expect(instance.getProductDeals(id, start, limit, status, {})).resolves.toBe(null)
  })
  test("getProductFiles", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    const include_deleted_files: number = 1.2
    const sort: string = "sort_example"
    return expect(instance.getProductFiles(id, start, limit, include_deleted_files, sort, {})).resolves.toBe(null)
  })
  test("getProductFollowers", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    return expect(instance.getProductFollowers(id, start, limit, {})).resolves.toBe(null)
  })
  test("getProductUsers", () => {
    const id: number = 56
    return expect(instance.getProductUsers(id, {})).resolves.toBe(null)
  })
  test("getProducts", () => {
    const user_id: number = 56
    const filter_id: number = 56
    const ids: Array<number> = undefined
    const first_char: string = "first_char_example"
    const get_summary: boolean = true
    const start: number = 56
    const limit: number = 56
    return expect(instance.getProducts(user_id, filter_id, ids, first_char, get_summary, start, limit, {})).resolves.toBe(null)
  })
  test("searchProducts", () => {
    const term: string = "term_example"
    const fields: string = "fields_example"
    const exact_match: boolean = true
    const include_fields: string = "include_fields_example"
    const start: number = 56
    const limit: number = 56
    return expect(instance.searchProducts(term, fields, exact_match, include_fields, start, limit, {})).resolves.toBe(null)
  })
  test("updateProduct", () => {
    const id: number = 56
    const body: api.AddProductRequest1 = undefined
    return expect(instance.updateProduct(id, body, {})).resolves.toBe(null)
  })
})

describe("RecentsApi", () => {
  let instance: api.RecentsApi
  beforeEach(function() {
    instance = new api.RecentsApi(config)
  });

  test("getRecents", () => {
    const since_timestamp: string = "since_timestamp_example"
    const items: string = "items_example"
    const start: number = 56
    const limit: number = 56
    return expect(instance.getRecents(since_timestamp, items, start, limit, {})).resolves.toBe(null)
  })
})

describe("RolesApi", () => {
  let instance: api.RolesApi
  beforeEach(function() {
    instance = new api.RolesApi(config)
  });

  test("addOrUpdateRoleSetting", () => {
    const id: number = 56
    const body: api.AddOrUpdateRoleSettingRequest = undefined
    return expect(instance.addOrUpdateRoleSetting(id, body, {})).resolves.toBe(null)
  })
  test("addRole", () => {
    const body: api.AddRoleRequest = undefined
    return expect(instance.addRole(body, {})).resolves.toBe(null)
  })
  test("addRoleAssignment", () => {
    const id: number = 56
    const body: api.AddRoleAssignmentRequest = undefined
    return expect(instance.addRoleAssignment(id, body, {})).resolves.toBe(null)
  })
  test("deleteRole", () => {
    const id: number = 56
    return expect(instance.deleteRole(id, {})).resolves.toBe(null)
  })
  test("deleteRoleAssignment", () => {
    const id: number = 56
    const body: api.DeleteRoleAssignmentRequest = undefined
    return expect(instance.deleteRoleAssignment(id, body, {})).resolves.toBe(null)
  })
  test("getRole", () => {
    const id: number = 56
    return expect(instance.getRole(id, {})).resolves.toBe(null)
  })
  test("getRoleAssignments", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    return expect(instance.getRoleAssignments(id, start, limit, {})).resolves.toBe(null)
  })
  test("getRoleSettings", () => {
    const id: number = 56
    return expect(instance.getRoleSettings(id, {})).resolves.toBe(null)
  })
  test("getRoleSubRoles", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    return expect(instance.getRoleSubRoles(id, start, limit, {})).resolves.toBe(null)
  })
  test("getRoles", () => {
    const start: number = 56
    const limit: number = 56
    return expect(instance.getRoles(start, limit, {})).resolves.toBe(null)
  })
  test("updateRole", () => {
    const id: number = 56
    const body: api.BaseRoleRequest = undefined
    return expect(instance.updateRole(id, body, {})).resolves.toBe(null)
  })
})

describe("StagesApi", () => {
  let instance: api.StagesApi
  beforeEach(function() {
    instance = new api.StagesApi(config)
  });

  test("addStage", () => {
    const body: api.AddStageRequest = undefined
    return expect(instance.addStage(body, {})).resolves.toBe(null)
  })
  test("deleteStage", () => {
    const id: number = 56
    return expect(instance.deleteStage(id, {})).resolves.toBe(null)
  })
  test("deleteStages", () => {
    const ids: string = "ids_example"
    return expect(instance.deleteStages(ids, {})).resolves.toBe(null)
  })
  test("getStage", () => {
    const id: number = 56
    const everyone: number = 1.2
    return expect(instance.getStage(id, everyone, {})).resolves.toBe(null)
  })
  test("getStageDeals", () => {
    const id: number = 56
    const filter_id: number = 56
    const user_id: number = 56
    const everyone: number = 1.2
    const start: number = 56
    const limit: number = 56
    return expect(instance.getStageDeals(id, filter_id, user_id, everyone, start, limit, {})).resolves.toBe(null)
  })
  test("getStages", () => {
    const pipeline_id: number = 56
    return expect(instance.getStages(pipeline_id, {})).resolves.toBe(null)
  })
  test("updateStage", () => {
    const id: number = 56
    const body: api.UpdateStageRequest = undefined
    return expect(instance.updateStage(id, body, {})).resolves.toBe(null)
  })
})

describe("SubscriptionsApi", () => {
  let instance: api.SubscriptionsApi
  beforeEach(function() {
    instance = new api.SubscriptionsApi(config)
  });

  test("addRecurringSubscription", () => {
    const body: api.AddRecurringSubscriptionRequest = undefined
    return expect(instance.addRecurringSubscription(body, {})).resolves.toBe(null)
  })
  test("addSubscriptionInstallment", () => {
    const body: api.AddSubscriptionInstallmentRequest = undefined
    return expect(instance.addSubscriptionInstallment(body, {})).resolves.toBe(null)
  })
  test("cancelRecurringSubscription", () => {
    const id: number = 56
    const body: api.CancelRecurringSubscriptionRequest = undefined
    return expect(instance.cancelRecurringSubscription(id, body, {})).resolves.toBe(null)
  })
  test("deleteSubscription", () => {
    const id: number = 56
    return expect(instance.deleteSubscription(id, {})).resolves.toBe(null)
  })
  test("findSubscriptionByDeal", () => {
    const dealId: number = 56
    return expect(instance.findSubscriptionByDeal(dealId, {})).resolves.toBe(null)
  })
  test("getSubscription", () => {
    const id: number = 56
    return expect(instance.getSubscription(id, {})).resolves.toBe(null)
  })
  test("getSubscriptionPayments", () => {
    const id: number = 56
    return expect(instance.getSubscriptionPayments(id, {})).resolves.toBe(null)
  })
  test("updateRecurringSubscription", () => {
    const id: number = 56
    const body: api.UpdateRecurringSubscriptionRequest = undefined
    return expect(instance.updateRecurringSubscription(id, body, {})).resolves.toBe(null)
  })
  test("updateSubscriptionInstallment", () => {
    const id: number = 56
    const body: api.UpdateSubscriptionInstallmentRequest = undefined
    return expect(instance.updateSubscriptionInstallment(id, body, {})).resolves.toBe(null)
  })
})

describe("UserConnectionsApi", () => {
  let instance: api.UserConnectionsApi
  beforeEach(function() {
    instance = new api.UserConnectionsApi(config)
  });

  test("getUserConnections", () => {
    return expect(instance.getUserConnections({})).resolves.toBe(null)
  })
})

describe("UserSettingsApi", () => {
  let instance: api.UserSettingsApi
  beforeEach(function() {
    instance = new api.UserSettingsApi(config)
  });

  test("getUserSettings", () => {
    return expect(instance.getUserSettings({})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("addUser", () => {
    const body: api.AddUserRequest = undefined
    return expect(instance.addUser(body, {})).resolves.toBe(null)
  })
  test("findUsersByName", () => {
    const term: string = "term_example"
    const search_by_email: number = 1.2
    return expect(instance.findUsersByName(term, search_by_email, {})).resolves.toBe(null)
  })
  test("getCurrentUser", () => {
    return expect(instance.getCurrentUser({})).resolves.toBe(null)
  })
  test("getUser", () => {
    const id: number = 56
    return expect(instance.getUser(id, {})).resolves.toBe(null)
  })
  test("getUserFollowers", () => {
    const id: number = 56
    return expect(instance.getUserFollowers(id, {})).resolves.toBe(null)
  })
  test("getUserPermissions", () => {
    const id: number = 56
    return expect(instance.getUserPermissions(id, {})).resolves.toBe(null)
  })
  test("getUserRoleAssignments", () => {
    const id: number = 56
    const start: number = 56
    const limit: number = 56
    return expect(instance.getUserRoleAssignments(id, start, limit, {})).resolves.toBe(null)
  })
  test("getUserRoleSettings", () => {
    const id: number = 56
    return expect(instance.getUserRoleSettings(id, {})).resolves.toBe(null)
  })
  test("getUsers", () => {
    return expect(instance.getUsers({})).resolves.toBe(null)
  })
  test("updateUser", () => {
    const id: number = 56
    const body: api.UpdateUserRequest = undefined
    return expect(instance.updateUser(id, body, {})).resolves.toBe(null)
  })
})

describe("WebhooksApi", () => {
  let instance: api.WebhooksApi
  beforeEach(function() {
    instance = new api.WebhooksApi(config)
  });

  test("addWebhook", () => {
    const body: api.AddWebhookRequest = undefined
    return expect(instance.addWebhook(body, {})).resolves.toBe(null)
  })
  test("deleteWebhook", () => {
    const id: number = 56
    return expect(instance.deleteWebhook(id, {})).resolves.toBe(null)
  })
  test("getWebhooks", () => {
    return expect(instance.getWebhooks({})).resolves.toBe(null)
  })
})

