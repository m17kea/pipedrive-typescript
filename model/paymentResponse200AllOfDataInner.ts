/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class PaymentResponse200AllOfDataInner {
    /**
    * The ID of the payment
    */
    'id'?: number;
    /**
    * The ID of the subscription this payment is associated with
    */
    'subscriptionId'?: number;
    /**
    * The ID of the deal this payment is associated with
    */
    'dealId'?: number;
    /**
    * The payment status
    */
    'isActive'?: boolean;
    /**
    * The payment amount
    */
    'amount'?: number;
    /**
    * The currency of the payment
    */
    'currency'?: string;
    /**
    * The difference between the amount of the current payment and the previous payment. The value can be either positive or negative.
    */
    'changeAmount'?: number;
    /**
    * The date when payment occurs
    */
    'dueAt'?: string;
    /**
    * Represents the movement of revenue in comparison with the previous payment. Possible values are: `New` - first payment of the subscription. `Recurring` - no movement. `Expansion` - current payment amount > previous payment amount. `Contraction` - current payment amount < previous payment amount. `Churn` - last payment of the subscription.
    */
    'revenueMovementType'?: PaymentResponse200AllOfDataInner.RevenueMovementTypeEnum;
    /**
    * The type of the payment. Possible values are: `Recurring` - payments occur over fixed intervals of time, `Additional` - extra payment not the recurring payment of the recurring subscription, `Installment` - payment of the installment subscription.
    */
    'paymentType'?: PaymentResponse200AllOfDataInner.PaymentTypeEnum;
    /**
    * The description of the payment
    */
    'description'?: string;
    /**
    * The creation time of the payment
    */
    'addTime'?: string;
    /**
    * The update time of the payment
    */
    'updateTime'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "subscriptionId",
            "baseName": "subscription_id",
            "type": "number"
        },
        {
            "name": "dealId",
            "baseName": "deal_id",
            "type": "number"
        },
        {
            "name": "isActive",
            "baseName": "is_active",
            "type": "boolean"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "changeAmount",
            "baseName": "change_amount",
            "type": "number"
        },
        {
            "name": "dueAt",
            "baseName": "due_at",
            "type": "string"
        },
        {
            "name": "revenueMovementType",
            "baseName": "revenue_movement_type",
            "type": "PaymentResponse200AllOfDataInner.RevenueMovementTypeEnum"
        },
        {
            "name": "paymentType",
            "baseName": "payment_type",
            "type": "PaymentResponse200AllOfDataInner.PaymentTypeEnum"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "addTime",
            "baseName": "add_time",
            "type": "string"
        },
        {
            "name": "updateTime",
            "baseName": "update_time",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return PaymentResponse200AllOfDataInner.attributeTypeMap;
    }
}

export namespace PaymentResponse200AllOfDataInner {
    export enum RevenueMovementTypeEnum {
        New = <any> 'new',
        Recurring = <any> 'recurring',
        Expansion = <any> 'expansion',
        Contraction = <any> 'contraction',
        None = <any> 'none',
        Churn = <any> 'churn'
    }
    export enum PaymentTypeEnum {
        Recurring = <any> 'recurring',
        Additional = <any> 'additional',
        Installment = <any> 'installment'
    }
}
