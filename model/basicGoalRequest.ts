/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class BasicGoalRequest {
    /**
    * The title of the goal
    */
    'title'?: string;
    /**
    * Who this goal is assigned to. It requires the following JSON structure: { \"id\": \"1\", \"type\": \"person\" }. `type` can be either `person`, `company` or `team`. ID of the assignee person, company or team.
    */
    'assignee'?: object;
    /**
    * The type of the goal. It requires the following JSON structure: { \"name\": \"deals_started\", \"params\": { \"pipeline_id\": 1 } }. Type can be one of: `deals_won`, `deals_progressed`, `activities_completed`, `activities_added`, `deals_started` or `revenue_forecast`. `params` can include `pipeline_id`, `stage_id` or `activity_type_id`. `stage_id` is related to only `deals_progressed` type of goals and `activity_type_id` to `activities_completed` or `activities_added` types of goals. To track goal in all pipelines set `pipeline_id` as `null`.
    */
    'type'?: object;
    /**
    * The expected outcome of the goal. Expected outcome can be tracked either by `quantity` or by `sum`. It requires the following JSON structure: { \"target\": \"50\", \"tracking_metric\": \"quantity\" } or { \"target\": \"50\", \"tracking_metric\": \"sum\", \"currency_id\": 1 }. `currency_id` should only be added to `sum` type of goals.
    */
    'expectedOutcome'?: object;
    /**
    * The date when the goal starts and ends. It requires the following JSON structure: { \"start\": \"2019-01-01\", \"end\": \"2022-12-31\" }. Date in format of YYYY-MM-DD. \"end\" can be set to `null` for an infinite, open-ended goal.
    */
    'duration'?: object;
    /**
    * The interval of the goal
    */
    'interval'?: BasicGoalRequest.IntervalEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "assignee",
            "baseName": "assignee",
            "type": "object"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "object"
        },
        {
            "name": "expectedOutcome",
            "baseName": "expected_outcome",
            "type": "object"
        },
        {
            "name": "duration",
            "baseName": "duration",
            "type": "object"
        },
        {
            "name": "interval",
            "baseName": "interval",
            "type": "BasicGoalRequest.IntervalEnum"
        }    ];

    static getAttributeTypeMap() {
        return BasicGoalRequest.attributeTypeMap;
    }
}

export namespace BasicGoalRequest {
    export enum IntervalEnum {
        Weekly = <any> 'weekly',
        Monthly = <any> 'monthly',
        Quarterly = <any> 'quarterly',
        Yearly = <any> 'yearly'
    }
}
